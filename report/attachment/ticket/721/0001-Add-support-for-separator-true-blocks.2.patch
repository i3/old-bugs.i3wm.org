From 00b40c3115e81ba4c35283a08fa5a9485e223094 Mon Sep 17 00:00:00 2001
From: Vadim Atlygin <vadim.atlygin@gmail.com>
Date: Fri, 8 Jun 2012 21:55:46 +1000
Subject: [PATCH] Add support for {"separator" : true} blocks

---
 docs/i3bar-protocol    |   18 +++++++++++++++++-
 i3bar/include/common.h |    6 ++++++
 i3bar/src/child.c      |   42 ++++++++++++++++++++++++++++++++++++------
 i3bar/src/xcb.c        |   27 +++++++++++++--------------
 4 files changed, 72 insertions(+), 21 deletions(-)

diff --git a/docs/i3bar-protocol b/docs/i3bar-protocol
index f66c7a9..2435c61 100644
--- a/docs/i3bar-protocol
+++ b/docs/i3bar-protocol
@@ -46,9 +46,12 @@ consists of a single JSON hash:
 
 *Example*:
 ----------------
-{ "version": 1 }
+{"version":1.01}
 ----------------
 
+Note that the string must look exactly as above, as it is not parsed by proper
+JSON parser yet.
+
 What follows is an infinite array (so it should be parsed by a streaming JSON
 parser, but as described above you can go for a simpler solution), whose
 elements are one array per status line. A status line is one unit of
@@ -66,6 +69,10 @@ be represented by a JSON hash:
    "color": "#00ff00"
   },
   {
+   "separator": true,
+   "color": "#333333"
+  }
+  {
    "full_text": "2012-01-05 20:00:01"
   }
  ],
@@ -76,6 +83,10 @@ be represented by a JSON hash:
    "color": "#00ff00"
   },
   {
+   "separator": true,
+   "color": "#333333"
+  }
+  {
    "full_text": "2012-01-05 20:00:02"
   }
  ],
@@ -101,6 +112,11 @@ short_text::
 	while the prefix changes. When displaying the date, the time is more
 	important than the date (it is more likely that you know which day it
 	is than what time it is).
+separator::
+	Since version 1.01, you have to manually insert separator blocks. Good
+	news is that now you can mix colors within one bucket and choose the
+	color of separators as well.
+	If this field set to true, full_text will be ignored.
 color::
 	To make the current state of the information easy to spot, colors can
 	be used. For example, the wireless block could be displayed in red
diff --git a/i3bar/include/common.h b/i3bar/include/common.h
index 212b9dd..15c38b1 100644
--- a/i3bar/include/common.h
+++ b/i3bar/include/common.h
@@ -31,6 +31,12 @@ struct rect_t {
 struct status_block {
     char *full_text;
 
+    /* true if this block represents separator, a thin vertical line.
+     * If set, full_text will be NULL.
+     * New in version 2 of the i3bar protocol.
+     */
+    bool separator;
+
     char *color;
 
     /* full_text, but converted to UCS-2. This variable is only temporarily
diff --git a/i3bar/src/child.c b/i3bar/src/child.c
index c2be484..1ec0ad2 100644
--- a/i3bar/src/child.c
+++ b/i3bar/src/child.c
@@ -34,6 +34,7 @@ ev_child *child_sig;
 /* JSON parser for stdin */
 bool first_line = true;
 bool plaintext = false;
+int version;
 yajl_callbacks callbacks;
 yajl_handle parser;
 
@@ -80,7 +81,9 @@ static int stdin_start_array(void *context) {
     struct status_block *first;
     while (!TAILQ_EMPTY(&statusline_head)) {
         first = TAILQ_FIRST(&statusline_head);
-        FREE(first->full_text);
+        if (!first->separator) {
+            FREE(first->full_text);
+        }
         FREE(first->color);
         TAILQ_REMOVE(&statusline_head, first, blocks);
         free(first);
@@ -115,22 +118,31 @@ static int stdin_string(void *context, const unsigned char *val, size_t len) {
 static int stdin_string(void *context, const unsigned char *val, unsigned int len) {
 #endif
     parser_ctx *ctx = context;
-    if (strcasecmp(ctx->last_map_key, "full_text") == 0) {
+    if (strncasecmp(ctx->last_map_key, "full_text", strlen("full_text")) == 0 && !ctx->block.separator) {
         sasprintf(&(ctx->block.full_text), "%.*s", len, val);
     }
-    if (strcasecmp(ctx->last_map_key, "color") == 0) {
+    if (strncasecmp(ctx->last_map_key, "color", strlen("color")) == 0) {
         sasprintf(&(ctx->block.color), "%.*s", len, val);
     }
     return 1;
 }
 
+static int stdin_boolean(void *context, int boolVal) {
+    parser_ctx *ctx = context;
+    if (strncasecmp(ctx->last_map_key, "separator", strlen("separator")) == 0 && boolVal) {
+        FREE(ctx->block.full_text);
+        ctx->block.separator = true;
+    }
+    return 1;
+}
+
 static int stdin_end_map(void *context) {
     parser_ctx *ctx = context;
     struct status_block *new_block = smalloc(sizeof(struct status_block));
     memcpy(new_block, &(ctx->block), sizeof(struct status_block));
     /* Ensure we have a full_text set, so that when it is missing (or null),
      * i3bar doesn’t crash and the user gets an annoying message. */
-    if (!new_block->full_text)
+    if (!new_block->separator && !new_block->full_text)
         new_block->full_text = sstrdup("SPEC VIOLATION (null)");
     TAILQ_INSERT_TAIL(&statusline_head, new_block, blocks);
     return 1;
@@ -140,6 +152,14 @@ static int stdin_end_array(void *context) {
     DLOG("dumping statusline:\n");
     struct status_block *current;
     TAILQ_FOREACH(current, &statusline_head, blocks) {
+        if (version == 100 && TAILQ_FIRST(&statusline_head) != current) {
+            // Insert separator.
+            struct status_block *separator = smalloc(sizeof(struct status_block));
+            memset(separator, '\0', sizeof(struct status_block));
+            separator->separator = true;
+            sasprintf(&separator->color, "%.*s", strlen("#333333"), "#333333");
+            TAILQ_INSERT_BEFORE(current, separator, blocks);
+        }
         DLOG("full_text = %s\n", current->full_text);
         DLOG("color = %s\n", current->color);
     }
@@ -199,8 +219,17 @@ void stdin_io_cb(struct ev_loop *loop, ev_io *watcher, int revents) {
             struct status_block *new_block = scalloc(sizeof(struct status_block));
             TAILQ_INSERT_TAIL(&statusline_head, new_block, blocks);
         } else {
-            /* At the moment, we don’t care for the version. This might change
-             * in the future, but for now, we just discard it. */
+            json_input += strlen("{\"version\":");
+            rec -= strlen("{\"version\":");
+            if (strncasecmp((char*)json_input, "1.01", strlen("1.01")) == 0) {
+                version = 101;
+            } else if (strncasecmp((char*)json_input, "1", strlen("1")) == 0) {
+                version = 100;
+            } else {
+                DLOG("Unrecognized version, assume 1");
+                version = 100;
+            }
+            /* Skip the rest. */
             while (*json_input != '\n' && *json_input != '\0') {
                 json_input++;
                 rec--;
@@ -253,6 +282,7 @@ void start_child(char *command) {
     memset(&callbacks, '\0', sizeof(yajl_callbacks));
     callbacks.yajl_map_key = stdin_map_key;
     callbacks.yajl_string = stdin_string;
+    callbacks.yajl_boolean = stdin_boolean;
     callbacks.yajl_start_array = stdin_start_array;
     callbacks.yajl_end_array = stdin_end_array;
     callbacks.yajl_start_map = stdin_start_map;
diff --git a/i3bar/src/xcb.c b/i3bar/src/xcb.c
index 205c08c..1d8c329 100644
--- a/i3bar/src/xcb.c
+++ b/i3bar/src/xcb.c
@@ -117,11 +117,12 @@ void refresh_statusline() {
     /* Convert all blocks from UTF-8 to UCS-2 and predict the text width (in
      * pixels). */
     TAILQ_FOREACH(block, &statusline_head, blocks) {
-        block->ucs2_full_text = (xcb_char2b_t*)convert_utf8_to_ucs2(block->full_text, &(block->glyph_count_full_text));
-        block->width = predict_text_width((char*)block->ucs2_full_text, block->glyph_count_full_text, true);
-        /* If this is not the last block, add some pixels for a separator. */
-        if (TAILQ_NEXT(block, blocks) != NULL)
-            block->width += 9;
+        if (block->separator) {
+            block->width = 8;
+        } else {
+            block->ucs2_full_text = (xcb_char2b_t*)convert_utf8_to_ucs2(block->full_text, &(block->glyph_count_full_text));
+            block->width = predict_text_width((char*)block->ucs2_full_text, block->glyph_count_full_text, true);
+        }
         statusline_width += block->width;
     }
 
@@ -140,19 +141,17 @@ void refresh_statusline() {
     TAILQ_FOREACH(block, &statusline_head, blocks) {
         uint32_t colorpixel = (block->color ? get_colorpixel(block->color) : colors.bar_fg);
         set_font_colors(statusline_ctx, colorpixel, colors.bar_bg);
-        draw_text((char*)block->ucs2_full_text, block->glyph_count_full_text,
-                  true, statusline_pm, statusline_ctx, x, 0, block->width);
-        x += block->width;
 
-        if (TAILQ_NEXT(block, blocks) != NULL) {
-            /* This is not the last block, draw a separator. */
-            set_font_colors(statusline_ctx, get_colorpixel("#666666"), colors.bar_bg);
+        if (block->separator) {
             xcb_poly_line(xcb_connection, XCB_COORD_MODE_ORIGIN, statusline_pm,
                           statusline_ctx, 2,
-                          (xcb_point_t[]){ { x - 5, 2 }, { x - 5, font.height - 2 } });
+                          (xcb_point_t[]){ { x + 3, 2 }, { x + 3, font.height - 2 } });
+        } else {
+            draw_text((char*)block->ucs2_full_text, block->glyph_count_full_text,
+                      true, statusline_pm, statusline_ctx, x, 0, block->width);
+            FREE(block->ucs2_full_text);
         }
-
-        FREE(block->ucs2_full_text);
+        x += block->width;
     }
 }
 
-- 
1.7.9.5

