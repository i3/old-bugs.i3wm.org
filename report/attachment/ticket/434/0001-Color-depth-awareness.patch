From b57193e066c151a21da9d8efa6b2c453a2d60694 Mon Sep 17 00:00:00 2001
From: Vladimir Chizhov <master@mirlord.com>
Date: Wed, 16 Nov 2011 18:05:11 +0400
Subject: [PATCH] Color depth awareness.

Try to get current XDisplay color depth to convert config colors
from 24-bit to 16-bit.
---
 include/config.h       |    2 +-
 include/libi3.h        |    2 ++
 libi3/get_colorpixel.c |   17 +++++++++++++++++
 src/cfgparse.y         |    2 +-
 src/cmdparse.y         |    2 +-
 src/config.c           |    2 +-
 src/main.c             |   34 +++++++++++++++++-----------------
 7 files changed, 40 insertions(+), 21 deletions(-)

diff --git a/include/config.h b/include/config.h
index b4128ca..4f64155 100644
--- a/include/config.h
+++ b/include/config.h
@@ -243,7 +243,7 @@ struct Barconfig {
  * configuration file.
  *
  */
-void load_configuration(xcb_connection_t *conn, const char *override_configfile, bool reload);
+void load_configuration(Display *xlibdpy, xcb_connection_t *conn, const char *override_configfile, bool reload);
 
 /**
  * Translates keysymbols to keycodes for all bindings which use keysyms.
diff --git a/include/libi3.h b/include/libi3.h
index 71fba76..7f26a49 100644
--- a/include/libi3.h
+++ b/include/libi3.h
@@ -139,6 +139,8 @@ void fake_configure_notify(xcb_connection_t *conn, xcb_rectangle_t r, xcb_window
  */
 uint32_t get_colorpixel(const char *hex) __attribute__((const));
 
+uint32_t get_colorpixel_in_depth(const char *hex, const int depth) __attribute__((const));
+
 #if defined(__APPLE__)
 
 /*
diff --git a/libi3/get_colorpixel.c b/libi3/get_colorpixel.c
index 73bbef3..06cdb87 100644
--- a/libi3/get_colorpixel.c
+++ b/libi3/get_colorpixel.c
@@ -10,6 +10,8 @@
 
 #include "libi3.h"
 
+unsigned short convert888to565(uint8_t r8, uint8_t g8, uint8_t b8)  __attribute__((const));
+
 /*
  * Returns the colorpixel to use for the given hex color (think of HTML). Only
  * works for true-color (vast majority of cases) at the moment, avoiding a
@@ -25,6 +27,10 @@
  *
  */
 uint32_t get_colorpixel(const char *hex) {
+    return get_colorpixel_in_depth(hex, 24);
+}
+
+uint32_t get_colorpixel_in_depth(const char *hex, const int depth) {
     char strgroups[3][3] = {{hex[1], hex[2], '\0'},
                             {hex[3], hex[4], '\0'},
                             {hex[5], hex[6], '\0'}};
@@ -32,5 +38,16 @@ uint32_t get_colorpixel(const char *hex) {
     uint8_t g = strtol(strgroups[1], NULL, 16);
     uint8_t b = strtol(strgroups[2], NULL, 16);
 
+    if (depth == 16) {
+        return convert888to565(r, g, b);
+    }
     return (r << 16 | g << 8 | b);
 }
+
+unsigned short convert888to565(uint8_t r8, uint8_t g8, uint8_t b8) {
+    uint8_t r5 = r8 >> 3; // 5-bit red
+    uint8_t g6 = g8 >> 2; // 6-bit green
+    uint8_t b5 = b8 >> 3; // 5-bit blue
+    return b5 + (g6 << 5) + (r5 << (5 + 6));
+}
+
diff --git a/src/cfgparse.y b/src/cfgparse.y
index 79da317..78fc1fb 100644
--- a/src/cfgparse.y
+++ b/src/cfgparse.y
@@ -1574,7 +1574,7 @@ color:
 colorpixel:
     HEXCOLOR
     {
-        $$ = get_colorpixel($1);
+        $$ = get_colorpixel_in_depth($1, XDefaultDepth(xlibdpy, 0));
         free($1);
     }
     ;
diff --git a/src/cmdparse.y b/src/cmdparse.y
index e413f21..18be138 100644
--- a/src/cmdparse.y
+++ b/src/cmdparse.y
@@ -418,7 +418,7 @@ reload:
     {
         printf("reloading\n");
         kill_configerror_nagbar(false);
-        load_configuration(conn, NULL, true);
+        load_configuration(xlibdpy, conn, NULL, true);
         x_set_i3_atoms();
         /* Send an IPC event just in case the ws names have changed */
         ipc_send_event("workspace", I3_IPC_EVENT_WORKSPACE, "{\"change\":\"reload\"}");
diff --git a/src/config.c b/src/config.c
index 8efb491..43b9cc3 100644
--- a/src/config.c
+++ b/src/config.c
@@ -250,7 +250,7 @@ static void parse_configuration(const char *override_configpath) {
  * (Re-)loads the configuration file (sets useful defaults before).
  *
  */
-void load_configuration(xcb_connection_t *conn, const char *override_configpath, bool reload) {
+void load_configuration(Display *xlibdpy, xcb_connection_t *conn, const char *override_configpath, bool reload) {
     if (reload) {
         /* First ungrab the keys */
         ungrab_all_keys(conn);
diff --git a/src/main.c b/src/main.c
index 062a486..738d245 100644
--- a/src/main.c
+++ b/src/main.c
@@ -442,7 +442,23 @@ int main(int argc, char *argv[]) {
     xcb_get_geometry_cookie_t gcookie = xcb_get_geometry(conn, root);
     xcb_query_pointer_cookie_t pointercookie = xcb_query_pointer(conn, root);
 
-    load_configuration(conn, override_configpath, false);
+    /* Initialize the Xlib connection */
+    xlibdpy = xkbdpy = XOpenDisplay(NULL);
+
+    /* Try to load the X cursors and initialize the XKB extension */
+    if (xlibdpy == NULL) {
+        ELOG("ERROR: XOpenDisplay() failed, disabling libXcursor/XKB support\n");
+        xcursor_supported = false;
+        xkb_supported = false;
+    } else if (fcntl(ConnectionNumber(xlibdpy), F_SETFD, FD_CLOEXEC) == -1) {
+        ELOG("Could not set FD_CLOEXEC on xkbdpy\n");
+        return 1;
+    } else {
+        xcursor_load_cursors();
+        /*init_xkb();*/
+    }
+
+    load_configuration(xlibdpy, conn, override_configpath, false);
     if (only_check_config) {
         LOG("Done checking configuration file. Exiting.\n");
         exit(0);
@@ -481,22 +497,6 @@ int main(int argc, char *argv[]) {
     #include "atoms.xmacro"
     #undef xmacro
 
-    /* Initialize the Xlib connection */
-    xlibdpy = xkbdpy = XOpenDisplay(NULL);
-
-    /* Try to load the X cursors and initialize the XKB extension */
-    if (xlibdpy == NULL) {
-        ELOG("ERROR: XOpenDisplay() failed, disabling libXcursor/XKB support\n");
-        xcursor_supported = false;
-        xkb_supported = false;
-    } else if (fcntl(ConnectionNumber(xlibdpy), F_SETFD, FD_CLOEXEC) == -1) {
-        ELOG("Could not set FD_CLOEXEC on xkbdpy\n");
-        return 1;
-    } else {
-        xcursor_load_cursors();
-        /*init_xkb();*/
-    }
-
     /* Set a cursor for the root window (otherwise the root window will show no
        cursor until the first client is launched). */
     if (xcursor_supported)
-- 
1.7.7.3

