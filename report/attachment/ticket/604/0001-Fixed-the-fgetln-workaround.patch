From 19d114389a9f899905095e03f510e02c03db8723 Mon Sep 17 00:00:00 2001
From: beauby <lucas.hosseini@gmail.com>
Date: Thu, 9 Feb 2012 01:44:46 +0100
Subject: [PATCH 1/3] Fixed the fgetln workaround.

---
 i3-config-wizard/main.c |   74 +++++++++++++++++++++++++++++++++++------------
 1 files changed, 55 insertions(+), 19 deletions(-)

diff --git a/i3-config-wizard/main.c b/i3-config-wizard/main.c
index cdce065..ee1ab33 100644
--- a/i3-config-wizard/main.c
+++ b/i3-config-wizard/main.c
@@ -24,6 +24,9 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <glob.h>
+#if defined(__FreeBSD__)
+#include <sys/param.h>
+#endif
 
 #include <xcb/xcb.h>
 #include <xcb/xcb_aux.h>
@@ -33,6 +36,11 @@
 #include <X11/Xlib.h>
 #include <X11/keysym.h>
 
+/* Little hack for systems which don't provide a getline implementation */
+#if defined(__APPLE__) || (defined(__FreeBSD__) && __FreeBSD_version < 800000)
+#define USE_FGETLN
+#endif
+
 /* We need SYSCONFDIR for the path to the keycode config template, so raise an
  * error if it’s not defined for whatever reason */
 #ifndef SYSCONFDIR
@@ -283,10 +291,10 @@ static void finish() {
 
     char *line = NULL;
     size_t len = 0;
-#if !defined(__APPLE__)
+    bool head_of_file = true;
+#ifndef USE_FGETLN
     ssize_t read;
 #endif
-    bool head_of_file = true;
 
     /* write a header about auto-generation to the output file */
     fputs("# This file has been auto-generated by i3-config-wizard(1).\n", ks_config);
@@ -296,10 +304,13 @@ static void finish() {
     fputs("# this file and re-run i3-config-wizard(1).\n", ks_config);
     fputs("#\n", ks_config);
 
-#if defined(__APPLE__)
+#ifdef USE_FGETLN
+    char *buf = NULL;
     while ((line = fgetln(kc_config, &len)) != NULL) {
 #else
-    while ((read = getline(&line, &len, kc_config)) != -1) {
+    size_t linecap = 0;
+    while ((read = getline(&line, &linecap, kc_config)) != -1) {
+        len = strlen(line);
 #endif
         /* skip the warning block at the beginning of the input file */
         if (head_of_file &&
@@ -308,35 +319,60 @@ static void finish() {
 
         head_of_file = false;
 
+#ifdef USE_FGETLN
+        /* Proper handling of fgetln */
+        if (line[len-1] == '\n') {
+            line[len-1] = '\0';
+            --len;
+        } else {
+            /* EOF without EOL */
+            buf = malloc(len + 1);
+            if (buf == NULL)
+                err(EXIT_FAILURE, "malloc() failed\n");
+            memcpy(buf, line, len);
+            buf[len] = '\0';
+            line = buf;
+        }
+#else
+        if (len > 0 && line[len-1] == '\n') {
+            line[len-1] = '\0';
+            --len;
+        }
+#endif
+
         /* Skip leading whitespace */
         char *walk = line;
         while (isspace(*walk) && walk < (line + len))
             walk++;
 
-        /* Set the modifier the user chose */
         if (strncmp(walk, "set $mod ", strlen("set $mod ")) == 0) {
+            /* Set the modifier the user chose */
             if (modifier == MOD_Mod1)
                 fputs("set $mod Mod1\n", ks_config);
-            else fputs("set $mod Mod4\n", ks_config);
-            continue;
+            else 
+                fputs("set $mod Mod4\n", ks_config);
+        } else if (strncmp(walk, "bindcode", strlen("bindcode")) == 0) {
+            /* Check for 'bindcode' */
+            char *result = rewrite_binding(walk);
+            fputs(result, ks_config);
+            free(result);
+        } else {
+            /* If it’s not a bindcode line, we
+             * just copy it to the output file */
+            fputs(walk, ks_config);
+            fputc('\n', ks_config);
         }
-
-        /* Check for 'bindcode'. If it’s not a bindcode line, we
-         * just copy it to the output file */
-        if (strncmp(walk, "bindcode", strlen("bindcode")) != 0) {
-            fputs(line, ks_config);
-            continue;
-        }
-        char *result = rewrite_binding(walk);
-        fputs(result, ks_config);
-        free(result);
     }
 
+#ifdef USE_FGETLN
+    free(buf);
+#else
+    free(line);
+#endif
+
     /* sync to do our best in order to have the file really stored on disk */
     fflush(ks_config);
     fsync(fileno(ks_config));
-
-    free(line);
     fclose(kc_config);
     fclose(ks_config);
 
-- 
1.7.9

