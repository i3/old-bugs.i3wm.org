From cbe795ee0a89df1efb4f43bd3b16685efe6a3655 Mon Sep 17 00:00:00 2001
From: Ewgenij Starostin <ewgenij@ewgenij-starostin.name>
Date: Fri, 4 May 2012 04:27:06 +0200
Subject: [PATCH] Use a better way of reading from the child.

- Plaintext handling:
  - If no full line has been read, do not update the bar and keep the
    buffer content.
  - If multiple lines have been read, use the last one.
  - If a full line has been read, followed by a fragment of the next
    one, keep the fragment for the next read.
- JSON handling:
  - Actually handle {"version":1} in the parser.
  - Kludge around when using yajl 1, because of the previous point.
  - If the parser fails to consume part of the buffer, keep that part
    and append to it on the next read.
  - Relax the protocol a bit, as a side-effect:
    - Complain about, but ignore, top-level maps.
    - Accept multiple (finite) arrays of status updates.
    - Probably even accept status updates at any array nesting depth.
    - Accept numeric values, treat them as strings (other than the
      version.)
- config.c: show the DLOG message about changing the verbosity after
  changing the verbosity. Or not show it, depending.
---
 i3bar/src/child.c  |  160 ++++++++++++++++++++++++++++++++++++++++++---------
 i3bar/src/config.c |    2 +-
 2 files changed, 132 insertions(+), 30 deletions(-)

diff --git a/i3bar/src/child.c b/i3bar/src/child.c
index 0b6f07d..10198fb 100644
--- a/i3bar/src/child.c
+++ b/i3bar/src/child.c
@@ -34,8 +34,27 @@ ev_child *child_sig;
 /* JSON parser for stdin */
 bool first_line = true;
 bool plaintext = false;
+int in_array = 0; /* Current array depth (0: not in an array). */
+int json_version = 0; /* Currently, the only valid value is 1. */
+#if YAJL_MAJOR < 2
+/* Kludge: yajl 1 does not have a yajl_allow_multiple_values mode.  It seems to
+ * act like yajl_allow_trailing_garbage is always on, and discards all
+ * top-level values in the input after the first one. This hurts because per
+ * the protocol, the first value is the version map, and the array with the
+ * data comes second.
+ *
+ * When using yajl 1, the following flag is set after each top-level map or
+ * array ends, and the handler functions stop the parser. Control returns to
+ * stdin_io_cb, which deletes the current parser, starts a new one and resets
+ * this flag. (As of right now, the flag isn't necessary, but it will be needed
+ * if the handler functions ever stop the parser for other reasons.) */
+bool reinit_parser = false;
+#endif
 yajl_callbacks callbacks;
 yajl_handle parser;
+#if YAJL_MAJOR < 2
+yajl_parser_config parse_conf = { 0, 0 };
+#endif
 
 typedef struct parser_ctx {
     /* A copy of the last JSON map key. */
@@ -78,6 +97,7 @@ void cleanup() {
  */
 static int stdin_start_array(void *context) {
     struct status_block *first;
+    in_array++;
     while (!TAILQ_EMPTY(&statusline_head)) {
         first = TAILQ_FIRST(&statusline_head);
         FREE(first->full_text);
@@ -94,6 +114,8 @@ static int stdin_start_array(void *context) {
  */
 static int stdin_start_map(void *context) {
     parser_ctx *ctx = context;
+    if (!in_array)
+        return 1;
     memset(&(ctx->block), '\0', sizeof(struct status_block));
     return 1;
 }
@@ -104,6 +126,14 @@ static int stdin_map_key(void *context, const unsigned char *key, size_t len) {
 static int stdin_map_key(void *context, const unsigned char *key, unsigned int len) {
 #endif
     parser_ctx *ctx = context;
+    if (!in_array) {
+        if (len != 7 || !strncmp((char*)key, "version", 7)) { /* strcmp would be insufficient here. */
+            DLOG("Found JSON version key.\n");
+        } else {
+            ELOG("Found map \"%.*s\", which does not belong to an array and isn't \"version\".\n",
+                    (int)len, key);
+        } 
+    }
     FREE(ctx->last_map_key);
     sasprintf(&(ctx->last_map_key), "%.*s", len, key);
     return 1;
@@ -124,8 +154,33 @@ static int stdin_string(void *context, const unsigned char *val, unsigned int le
     return 1;
 }
 
+#if YAJL_MAJOR >= 2
+static int stdin_number(void *context, const char *val, size_t len) {
+#else
+static int stdin_number(void *context, const char *val, unsigned int len) {
+#endif
+    parser_ctx *ctx = context;
+    if (!in_array && !strcmp(ctx->last_map_key, "version")) {
+        json_version = atoi(val);
+        DLOG("The child protocol version is %d.\n", json_version);
+    }
+    if (!in_array)
+        return 1;
+    else
+        /* Let's assume the number was intended as a string. */
+        return stdin_string(context, (unsigned char*)val, len);
+}
+
 static int stdin_end_map(void *context) {
     parser_ctx *ctx = context;
+    if (!in_array) {
+#if YAJL_MAJOR < 2
+        reinit_parser = true;
+        return 0;
+#else
+        return 1;
+#endif
+    }
     struct status_block *new_block = smalloc(sizeof(struct status_block));
     memcpy(new_block, &(ctx->block), sizeof(struct status_block));
     TAILQ_INSERT_TAIL(&statusline_head, new_block, blocks);
@@ -135,12 +190,20 @@ static int stdin_end_map(void *context) {
 static int stdin_end_array(void *context) {
     DLOG("dumping statusline:\n");
     struct status_block *current;
+    in_array--;
     TAILQ_FOREACH(current, &statusline_head, blocks) {
         DLOG("full_text = %s\n", current->full_text);
         DLOG("color = %s\n", current->color);
     }
     DLOG("end of dump\n");
+#if YAJL_MAJOR < 2
+    if (!in_array) {
+        reinit_parser = true;
+        return 0;
+    }
+#else
     return 1;
+#endif
 }
 
 /*
@@ -151,10 +214,15 @@ static int stdin_end_array(void *context) {
 void stdin_io_cb(struct ev_loop *loop, ev_io *watcher, int revents) {
     int fd = watcher->fd;
     int n = 0;
-    int rec = 0;
-    int buffer_len = STDIN_CHUNK_SIZE;
-    unsigned char *buffer = smalloc(buffer_len+1);
-    buffer[0] = '\0';
+    static int rec = 0;
+    static int buffer_len = STDIN_CHUNK_SIZE;
+    static char *buffer = NULL;
+    static const char *signature = "{\"version\":";
+    if(!buffer) {
+        buffer = smalloc(buffer_len+1);
+        buffer[0] = '\0';
+        buffer[buffer_len] = '\0'; /* Paranoia. */
+    }
     while(1) {
         n = read(fd, buffer + rec, buffer_len - rec);
         if (n == -1) {
@@ -168,59 +236,93 @@ void stdin_io_cb(struct ev_loop *loop, ev_io *watcher, int revents) {
         if (n == 0) {
             /* end of file, kill the watcher */
             ELOG("stdin: received EOF\n");
+            FREE(buffer);
             cleanup();
             draw_bars();
             return;
         }
         rec += n;
+        buffer[rec] = '\0';
 
         if (rec == buffer_len) {
             buffer_len += STDIN_CHUNK_SIZE;
             buffer = srealloc(buffer, buffer_len);
         }
     }
-    if (*buffer == '\0') {
-        FREE(buffer);
-        return;
-    }
 
-    unsigned char *json_input = buffer;
     if (first_line) {
         DLOG("Detecting input type based on buffer *%.*s*\n", rec, buffer);
         /* Detect whether this is JSON or plain text. */
-        plaintext = (strncasecmp((char*)buffer, "{\"version\":", strlen("{\"version\":")) != 0);
+        plaintext = (strncasecmp(buffer, signature, strlen(signature)) != 0);
+        if (plaintext && strstr(signature, buffer) == signature) {
+            /* We haven't read the full expected JSON signature, but we may have read a prefix of it.
+             * Waiting for more input before deciding. */
+            plaintext = false;
+            return;
+        }
         if (plaintext) {
             /* In case of plaintext, we just add a single block and change its
              * full_text pointer later. */
             struct status_block *new_block = scalloc(sizeof(struct status_block));
             TAILQ_INSERT_TAIL(&statusline_head, new_block, blocks);
-        } else {
-            /* At the moment, we donâ€™t care for the version. This might change
-             * in the future, but for now, we just discard it. */
-            while (*json_input != '\n' && *json_input != '\0') {
-                json_input++;
-                rec--;
-            }
         }
         first_line = false;
     }
     if (!plaintext) {
-        yajl_status status = yajl_parse(parser, json_input, rec);
-        if (status != yajl_status_ok) {
+        yajl_status status = yajl_parse(parser, (unsigned char*)buffer, rec);
+        int processed = yajl_get_bytes_consumed(parser);
+#if YAJL_MAJOR < 2
+        if (status == yajl_status_client_canceled && reinit_parser) {
+            reinit_parser = false;
+            yajl_free(parser);
+            parser = yajl_alloc(&callbacks, &parse_conf, NULL, (void*)&parser_context);
+        } else /* intentionally continues with the next if in this case */
+#endif
+        if (status != yajl_status_ok
+#if YAJL_MAJOR < 2
+                && status != yajl_status_insufficient_data
+#endif
+                ) {
+            unsigned char *str = yajl_get_error(parser, true, (unsigned char*)buffer, rec);
             fprintf(stderr, "[i3bar] Could not parse JSON input: %.*s\n",
-                    rec, json_input);
+                    rec, buffer);
+            DLOG("Parser says: %s\n", str);
+            yajl_free_error(parser, str);
         }
-        free(buffer);
+        /* If not everything that was read was processed immediately, move the remaining text
+         * to the start of the buffer. */
+        if (0 < processed && processed < rec)
+            memmove(buffer, buffer + processed, rec - processed);
+        rec -= processed;
     } else {
         struct status_block *first = TAILQ_FIRST(&statusline_head);
+        char *line_start = buffer, *line_end = strchr(buffer, '\n'), *next_line_end;
+        unsigned int new_rec, line_length;
+        if (!line_end) {
+            /* No complete line read, and not at EOF. Maybe next time, then. */
+            return;
+        }
+        /* Find the last line, skipping over any others. */
+        for (next_line_end = strchr(line_end + 1, '\n'); next_line_end; next_line_end = strchr(line_end + 1, '\n')) {
+            line_start = line_end + 1;
+            line_end = next_line_end;
+        }
         /* Clear the old buffer if any. */
         FREE(first->full_text);
-        /* Remove the trailing newline and terminate the string at the same
-         * time. */
-        if (buffer[rec-1] == '\n' || buffer[rec-1] == '\r')
-            buffer[rec-1] = '\0';
-        else buffer[rec] = '\0';
-        first->full_text = (char*)buffer;
+        /* Copy the last line we found, sans newline. */
+        line_length = line_end - line_start;
+        first->full_text = smalloc(line_length + 1);
+        first->full_text[line_length] = '\0';
+        strncpy(first->full_text, line_start, line_length);
+        /* Shift any data remaining beyond the last newline to the start of the buffer. */
+        new_rec = rec - (line_end - buffer + 1);
+        if (new_rec > 0) {
+            memmove(buffer, line_end + 1, new_rec);
+            rec = new_rec;
+        } else {
+            rec = 0;
+        }
+        buffer[rec] = '\0';
     }
     draw_bars();
 }
@@ -249,16 +351,16 @@ void start_child(char *command) {
     memset(&callbacks, '\0', sizeof(yajl_callbacks));
     callbacks.yajl_map_key = stdin_map_key;
     callbacks.yajl_string = stdin_string;
+    callbacks.yajl_number = stdin_number;
     callbacks.yajl_start_array = stdin_start_array;
     callbacks.yajl_end_array = stdin_end_array;
     callbacks.yajl_start_map = stdin_start_map;
     callbacks.yajl_end_map = stdin_end_map;
 #if YAJL_MAJOR < 2
-    yajl_parser_config parse_conf = { 0, 0 };
-
     parser = yajl_alloc(&callbacks, &parse_conf, NULL, (void*)&parser_context);
 #else
     parser = yajl_alloc(&callbacks, NULL, &parser_context);
+    yajl_config(parser, yajl_allow_multiple_values);
 #endif
 
     child_pid = 0;
diff --git a/i3bar/src/config.c b/i3bar/src/config.c
index 69355b6..466c8a0 100644
--- a/i3bar/src/config.c
+++ b/i3bar/src/config.c
@@ -191,8 +191,8 @@ static int config_boolean_cb(void *params_, int val) {
     }
 
     if (!strcmp(cur_key, "verbose")) {
-        DLOG("verbose = %d\n", val);
         config.verbose = val;
+        DLOG("verbose = %d\n", val);
         return 1;
     }
 
-- 
1.7.8.6

