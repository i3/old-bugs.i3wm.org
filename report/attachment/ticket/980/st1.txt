22042 execve("/usr/bin/i3-dmenu-desktop", ["i3-dmenu-desktop"], [/* 61 vars */]) = 0
22042 brk(0)                            = 0x804f000
22042 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb773f000
22042 access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
22042 open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=149638, ...}) = 0
22042 mmap2(NULL, 149638, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb771a000
22042 close(3)                          = 0
22042 open("/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
22042 read(3, "\177ELF\1\1\1\3\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\360\246\1\0004\0\0\0<p\30\0\0\0\0\0004\0 \0\v\0(\0$\0!\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0`\1\0\0`\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0\370\220\26\0\370\220\26\0\370\220\26\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0.7\30\0.7\30\0\5\0\0\0\0\20\0\0\1\0\0\0\264A\30\0\264A\30\0\264A\30\0\350,\0\0\10Y\0\0\6\0\0\0\0\20\0\0\2\0\0\0|]\30\0|]\30\0|]\30\0\370\0\0\0\370\0\0\0\6\0\0\0\4\0\0\0\4\0\0\0\224\1\0\0\224\1\0\0\224\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0\7\0\0\0\264A\30\0\264A\30\0\264A\30\0\10\0\0\0@\0\0\0\4\0\0\0\4\0\0\0P\345td\f\221\26\0\f\221\26\0\f\221\26\0\3645\0\0\3645\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\264A\30\0\264A\30\0\264A\30\0L\36\0\0L\36\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\t\0\0\0\377\3\0\0002\t\0\0+\7\0\0\200\4\0\0G\5\0\0009\10\0\0\325\5\0\0\0\0\0\0\0\0\0\0\0\0\0\0T\1\0\0\206\2\0\0v\6\0\0\0\0\0\0\16\6\0\0\4\3\0\0\305\0\0\0/\0\0\0\320\3\0\0", 512) = 512
22042 fstat64(3, {st_mode=S_IFREG|0755, st_size=1856954, ...}) = 0
22042 mmap2(NULL, 1612476, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7590000
22042 mmap2(0xb7714000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x184) = 0xb7714000
22042 mmap2(0xb7717000, 10940, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7717000
22042 close(3)                          = 0
22042 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb758f000
22042 set_thread_area({entry_number:-1 -> 6, base_addr:0xb758f6c0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
22042 mprotect(0xb7714000, 8192, PROT_READ) = 0
22042 mprotect(0x804d000, 4096, PROT_READ) = 0
22042 mprotect(0xb775f000, 4096, PROT_READ) = 0
22042 munmap(0xb771a000, 149638)        = 0
22042 brk(0)                            = 0x804f000
22042 brk(0x8070000)                    = 0x8070000
22042 open("/usr/lib/locale/locale-archive", O_RDONLY|O_LARGEFILE|O_CLOEXEC) = 3
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=2108992, ...}) = 0
22042 mmap2(NULL, 2097152, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb738f000
22042 close(3)                          = 0
22042 execve("/usr/local/bin/perl", ["perl", "/usr/bin/i3-dmenu-desktop"], [/* 61 vars */]) = -1 ENOENT (No such file or directory)
22042 execve("/usr/bin/perl", ["perl", "/usr/bin/i3-dmenu-desktop"], [/* 61 vars */]) = 0
22042 brk(0)                            = 0x804b000
22042 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7799000
22042 access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
22042 open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=149638, ...}) = 0
22042 mmap2(NULL, 149638, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7774000
22042 close(3)                          = 0
22042 open("/usr/lib/libperl.so.5.12", O_RDONLY|O_CLOEXEC) = 3
22042 read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0`3\2\0004\0\0\0x\307\23\0\0\0\0\0004\0 \0\7\0(\0\34\0\33\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\ft\23\0\ft\23\0\5\0\0\0\0\20\0\0\1\0\0\0\204\203\23\0\204\223\23\0\204\223\23\0\314B\0\0\204J\0\0\6\0\0\0\0\20\0\0\2\0\0\0\314\227\23\0\314\247\23\0\314\247\23\0\350\0\0\0\350\0\0\0\6\0\0\0\4\0\0\0P\345td\274s\23\0\274s\23\0\274s\23\0\24\0\0\0\24\0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\204\203\23\0\204\223\23\0\204\223\23\0|\34\0\0|\34\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\373\3\0\0\200\10\0\0\227\0\0\0\213\2\0\0\232\7\0\0W\7\0\0f\6\0\0F\5\0\0\0\0\0\0Y\2\0\0G\0\0\0u\4\0\0\201\3\0\0\0\0\0\0\326\2\0\0+\3\0\0\223\4\0\0\254\7\0\0\6\7\0\0\260\3\0\0\177\10\0\0002\4\0\0p\3\0\0\370\2\0\0\n\2\0\0\370\6\0\0\214\3\0\0\376\2\0\0\214\7\0\0\274\6\0\0\24\1\0\0b\10\0\0s\3\0\0\362\4\0\0\344\0\0\0\321\0\0\0\0\0\0\0'\5\0\0\303\6\0\0\306\3\0\0\0\10\0\0O\4\0\0002\3\0\0(\4\0\0\0\0\0\0/\5\0\0E\3\0\0\311\1\0\0\35\2\0\0\20\7\0\0y\2\0\0\261\6\0\0\273\0\0\0\350\7\0\0\346\0\0\0008\3\0\0?\7\0\0Q\0\0\0\32\4\0\0", 512) = 512
22042 fstat64(3, {st_mode=S_IFREG|0755, st_size=1297368, ...}) = 0
22042 mmap2(NULL, 1302024, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7636000
22042 mprotect(0xb776e000, 4096, PROT_NONE) = 0
22042 mmap2(0xb776f000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x138) = 0xb776f000
22042 close(3)                          = 0
22042 open("/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
22042 read(3, "\177ELF\1\1\1\3\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\360\246\1\0004\0\0\0<p\30\0\0\0\0\0004\0 \0\v\0(\0$\0!\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0`\1\0\0`\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0\370\220\26\0\370\220\26\0\370\220\26\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0.7\30\0.7\30\0\5\0\0\0\0\20\0\0\1\0\0\0\264A\30\0\264A\30\0\264A\30\0\350,\0\0\10Y\0\0\6\0\0\0\0\20\0\0\2\0\0\0|]\30\0|]\30\0|]\30\0\370\0\0\0\370\0\0\0\6\0\0\0\4\0\0\0\4\0\0\0\224\1\0\0\224\1\0\0\224\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0\7\0\0\0\264A\30\0\264A\30\0\264A\30\0\10\0\0\0@\0\0\0\4\0\0\0\4\0\0\0P\345td\f\221\26\0\f\221\26\0\f\221\26\0\3645\0\0\3645\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\264A\30\0\264A\30\0\264A\30\0L\36\0\0L\36\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\t\0\0\0\377\3\0\0002\t\0\0+\7\0\0\200\4\0\0G\5\0\0009\10\0\0\325\5\0\0\0\0\0\0\0\0\0\0\0\0\0\0T\1\0\0\206\2\0\0v\6\0\0\0\0\0\0\16\6\0\0\4\3\0\0\305\0\0\0/\0\0\0\320\3\0\0", 512) = 512
22042 fstat64(3, {st_mode=S_IFREG|0755, st_size=1856954, ...}) = 0
22042 mmap2(NULL, 1612476, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb74ac000
22042 mmap2(0xb7630000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x184) = 0xb7630000
22042 mmap2(0xb7633000, 10940, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7633000
22042 close(3)                          = 0
22042 open("/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
22042 read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\360\v\0\0004\0\0\0\200!\0\0\0\0\0\0004\0 \0\n\0(\0!\0\36\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0@\1\0\0@\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0007\34\0\0007\34\0\0007\34\0\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\240\34\0\0\240\34\0\0\5\0\0\0\0\20\0\0\1\0\0\0\244\36\0\0\244.\0\0\244.\0\0\240\1\0\0\324\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\300\36\0\0\300.\0\0\300.\0\0\10\1\0\0\10\1\0\0\6\0\0\0\4\0\0\0\4\0\0\0t\1\0\0t\1\0\0t\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0P\345tdL\34\0\0L\34\0\0L\34\0\0\24\0\0\0\24\0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\244\36\0\0\244.\0\0\244.\0\0\\\1\0\0\\\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\t\0\0\0A\0\0\0(\0\0\0\35\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\24\0\0\0%\0\0\0\31\0\0\0\20\0\0\0\30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0\0\0$\0\0\0\26\0\0\0\23\0\0\0\3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\22\0\0\0\17\0\0\0", 512) = 512
22042 fstat64(3, {st_mode=S_IFREG|0755, st_size=13649, ...}) = 0
22042 mmap2(NULL, 12408, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb74a8000
22042 mmap2(0xb74aa000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1) = 0xb74aa000
22042 close(3)                          = 0
22042 open("/lib/libm.so.6", O_RDONLY|O_CLOEXEC) = 3
22042 read(3, "\177ELF\1\1\1\3\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\200W\0\0004\0\0\0$\236\2\0\0\0\0\0004\0 \0\n\0(\0(\0%\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0@\1\0\0@\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0\3403\2\0\3403\2\0\3403\2\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0dD\2\0dD\2\0\5\0\0\0\0\20\0\0\1\0\0\0\320N\2\0\320^\2\0\320^\2\0p\1\0\0\260\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\344N\2\0\344^\2\0\344^\2\0\360\0\0\0\360\0\0\0\6\0\0\0\4\0\0\0\4\0\0\0t\1\0\0t\1\0\0t\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0P\345td\3643\2\0\3643\2\0\3643\2\0004\4\0\0004\4\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\320N\2\0\320^\2\0\320^\2\0000\1\0\0000\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\t\0\0\0-\3\0\0\252\1\0\0w\1\0\0\231\0\0\0\0\0\0\0\0\0\0\0006\1\0\0\346\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0m\0\0\0\0\0\0\0\31\1\0\0\207\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0K\0\0\0\0\0\0\0", 512) = 512
22042 fstat64(3, {st_mode=S_IFREG|0755, st_size=210164, ...}) = 0
22042 mmap2(NULL, 155776, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7481000
22042 mmap2(0xb74a6000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x24) = 0xb74a6000
22042 close(3)                          = 0
22042 open("/lib/libcrypt.so.1", O_RDONLY|O_CLOEXEC) = 3
22042 read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0`\10\0\0004\0\0\0d\201\0\0\0\0\0\0004\0 \0\n\0(\0\37\0\34\0\6\0\0\0004\0\0\0004\0\0\0004\0\0\0@\1\0\0@\1\0\0\5\0\0\0\4\0\0\0\3\0\0\0\300r\0\0\300r\0\0\300r\0\0\23\0\0\0\23\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(s\0\0(s\0\0\5\0\0\0\0\20\0\0\1\0\0\0\334~\0\0\334\216\0\0\334\216\0\0d\1\0\0`r\2\0\6\0\0\0\0\20\0\0\2\0\0\0\360~\0\0\360\216\0\0\360\216\0\0\350\0\0\0\350\0\0\0\6\0\0\0\4\0\0\0\4\0\0\0t\1\0\0t\1\0\0t\1\0\0 \0\0\0 \0\0\0\4\0\0\0\4\0\0\0P\345td\324r\0\0\324r\0\0\324r\0\0\24\0\0\0\24\0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\334~\0\0\334\216\0\0\334\216\0\0$\1\0\0$\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\2\0\0\0\6\0\0\0\t\0\0\0)\0\0\0\32\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\24\0\0\0\7\0\0\0\23\0\0\0\20\0\0\0\17\0\0\0\0\0\0\0\2\0\0\0\0\0\0\0\v\0\0\0\10\0\0\0\0\0\0\0\30\0\0\0\6\0\0\0", 512) = 512
22042 fstat64(3, {st_mode=S_IFREG|0755, st_size=38857, ...}) = 0
22042 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7480000
22042 mmap2(NULL, 196924, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb744f000
22042 mmap2(0xb7457000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7) = 0xb7457000
22042 mmap2(0xb7459000, 155964, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7459000
22042 close(3)                          = 0
22042 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb744e000
22042 set_thread_area({entry_number:-1 -> 6, base_addr:0xb744e6c0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
22042 mprotect(0xb7630000, 8192, PROT_READ) = 0
22042 mprotect(0xb7457000, 4096, PROT_READ) = 0
22042 mprotect(0xb74a6000, 4096, PROT_READ) = 0
22042 mprotect(0xb74aa000, 4096, PROT_READ) = 0
22042 mprotect(0xb776f000, 8192, PROT_READ) = 0
22042 mprotect(0x8049000, 4096, PROT_READ) = 0
22042 mprotect(0xb77b9000, 4096, PROT_READ) = 0
22042 munmap(0xb7774000, 149638)        = 0
22042 rt_sigaction(SIGFPE, {SIG_IGN, [FPE], SA_RESTART}, {SIG_DFL, [], 0}, 8) = 0
22042 brk(0)                            = 0x804b000
22042 brk(0x806c000)                    = 0x806c000
22042 getuid32()                        = 1015
22042 geteuid32()                       = 1015
22042 getgid32()                        = 513
22042 getegid32()                       = 513
22042 open("/usr/lib/locale/locale-archive", O_RDONLY|O_LARGEFILE|O_CLOEXEC) = 3
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=2108992, ...}) = 0
22042 mmap2(NULL, 2097152, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb724e000
22042 close(3)                          = 0
22042 open("/dev/urandom", O_RDONLY|O_LARGEFILE) = 3
22042 read(3, "7\210\356Z", 4)          = 4
22042 close(3)                          = 0
22042 time(NULL)                        = 1363379900
22042 readlink("/proc/self/exe", "/usr/bin/perl5.12.4", 4095) = 19
22042 stat64("/usr/lib/perl5/site_perl/5.12.3/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.3", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.2/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.2", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.1/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.1", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.0/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.0", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.1/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.1", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.0/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.0", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/local/lib/site_perl/5.12.4/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/local/lib/site_perl/5.12.4", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/local/lib/site_perl/i686-linux", 0xbff09ff0) = -1 ENOENT (No such file or directory)
22042 ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
22042 _llseek(0, 0, 0xbff09e28, SEEK_CUR) = -1 ESPIPE (Illegal seek)
22042 ioctl(1, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
22042 _llseek(1, 0, 0xbff09e28, SEEK_CUR) = -1 ESPIPE (Illegal seek)
22042 ioctl(2, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
22042 _llseek(2, 0, 0xbff09e28, SEEK_CUR) = -1 ESPIPE (Illegal seek)
22042 open("/usr/bin/i3-dmenu-desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09ef8) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 rt_sigaction(SIGCHLD, NULL, {SIG_DFL, [], 0}, 8) = 0
22042 getpid()                          = 22042
22042 read(3, "#!/usr/bin/env perl\n# vim:ts=4:sw=4:expandtab\n#\n# \302\251 2012 Michael Stapelberg\n#\n# No dependencies except for perl \342\211\245 v5.10\n\nuse strict;\nuse warnings qw(FATAL utf8);\nuse Data::Dumper;\nuse IPC::Open2;\nuse POSIX qw(locale_h);\nuse File::Find;\nuse File::Basename qw(basename);\nuse File::Temp qw(tempfile);\nuse Getopt::Long;\nuse Pod::Usage;\nuse v5.10;\nuse utf8;\nuse open ':encoding(UTF-8)';\n\nbinmode STDOUT, ':utf8';\nbinmode STDERR, ':utf8';\n\n# reads in a whole file\nsub slurp {\n    my ($filename) = @_;\n    open(my $fh, '<', $filename) or die \"$!\";\n    local $/;\n    my $result;\n    eval {\n        $result = <$fh>;\n    };\n    if ($@) {\n        warn \"Could not read $filename: $@\";\n        return undef;\n    } else {\n        return $result;\n    }\n}\n\nmy @entry_types;\nmy $dmenu_cmd = 'dmenu -i';\nmy $result = GetOptions(\n    'dmenu=s' => \\$dmenu_cmd,\n    'entry-type=s' => \\@entry_types,\n    'version' => sub {\n        say \"dmenu-desktop 1.4 \302\251 2012 Michael Stapelberg\";\n        exit 0;\n    },\n    'help' => sub {\n        pod2usage(-exitval => 0);\n    });\n\ndie \"Could not parse command line options\" unless $result;\n\n# Filter entry types and set default type(s) if none selected\nmy @valid_types = ('name', 'command', 'filename');\n@entry_types = grep { $_ ~~ @valid_types } @entry_types;\n@entry_types = ('name', 'command') unless @entry_types;\n\nn# \342\224\203 Convert LC_MESSAGES into an ordered list of suffixes to search for in the \342\224\203\n# \342\224\203 .desktop files (e.g. \342\200\234Name[de_DE@euro]\342\200\235 for LC_MESSAGES=de_DE.UTF-8@euro  \342\224\203\nn\n# For details on how the transformation of LC_MESSAGES to a list of ke"..., 4096) = 4096
22042 stat64("/etc/perl/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/strict.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/strict.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/strict.pm", {st_mode=S_IFREG|0444, st_size=3716, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/strict.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package strict;\n\n$strict::VERSION = \"1.04\";\n\n# Verify that we're called correctly so that strictures will work.\nunless ( __FILE__ =~ /(^|[\\/\\\\])\\Q${\\__PACKAGE__}\\E\\.pmc?$/ ) {\n    # Can't use Carp, since Carp uses us!\n    my (undef, $f, $l) = caller;\n    die(\"Incorrect use of pragma '${\\__PACKAGE__}' at $f line $l.\\n\");\n}\n\nmy %bitmask = (\nrefs => 0x00000002,\nsubs => 0x00000200,\nvars => 0x00000400\n);\n\nsub bits {\n    my $bits = 0;\n    my @wrong;\n    foreach my $s (@_) {\n\tpush @wrong, $s unless exists $bitmask{$s};\n        $bits |= $bitmask{$s} || 0;\n    }\n    if (@wrong) {\n        require Carp;\n        Carp::croak(\"Unknown 'strict' tag(s) '@wrong'\");\n    }\n    $bits;\n}\n\nmy $default_bits = bits(qw(refs subs vars));\n\nsub import {\n    shift;\n    $^H |= @_ ? bits(@_) : $default_bits;\n}\n\nsub unimport {\n    shift;\n    $^H &= ~ (@_ ? bits(@_) : $default_bits);\n}\n\n1;\n__END__\n\n=head1 NAME\n\nstrict - Perl pragma to restrict unsafe constructs\n\n=head1 SYNOPSIS\n\n    use strict;\n\n    use strict \"vars\";\n    use strict \"refs\";\n    use strict \"subs\";\n\n    use strict;\n    no strict \"vars\";\n\n=head1 DESCRIPTION\n\nIf no import list is supplied, all possible restrictions are assumed.\n(This is the safest mode to operate in, but is sometimes too strict for\ncasual programming.)  Currently, there are three possible things to be\nstrict about:  \"subs\", \"vars\", and \"refs\".\n\n=over 6\n\n=item C<strict refs>\n\nThis generates a runtime error if you \nuse symbolic references (see L<perlref>).\n\n    use strict 'refs';\n    $ref = \\$foo;\n    print $$ref;\t# ok\n    $ref = \"foo\";\n    print $$ref;\t# runtime error; normally ok\n    $file = \"STDOUT\";\n    print $file \"Hi!\";\t# error; note: no comma after $file\n\nThere is one exception to this rule:\n\n    $bar = \\&{'foo'};\n    &$bar;\n\nis allowed so that C<goto &$AUTOLOAD> would not break under stricture.\n\n\n=item C<strict vars>\n\nThis generates a compile-time error if you access a variable that wasn't\ndeclared via C<our> or C<use vars>,\nlocalized via C<my()>, or wasn't fully qualified.  Because this is to avoid\nvariable s"..., 4096) = 3716
22042 _llseek(4, 878, [878], SEEK_SET)  = 0
22042 _llseek(4, 0, [878], SEEK_CUR)    = 0
22042 close(4)                          = 0
22042 brk(0x808d000)                    = 0x808d000
22042 stat64("/etc/perl/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/warnings.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/warnings.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/warnings.pm", {st_mode=S_IFREG|0444, st_size=17476, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/warnings.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# -*- buffer-read-only: t -*-\n# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!\n# This file was created by warnings.pl\n# Any changes made here will be lost.\n#\n\npackage warnings;\n\nour $VERSION = '1.09';\n\n# Verify that we're called correctly so that warnings will work.\n# see also strict.pm.\nunless ( __FILE__ =~ /(^|[\\/\\\\])\\Q${\\__PACKAGE__}\\E\\.pmc?$/ ) {\n    my (undef, $f, $l) = caller;\n    die(\"Incorrect use of pragma '${\\__PACKAGE__}' at $f line $l.\\n\");\n}\n\n=head1 NAME\n\nwarnings - Perl pragma to control optional warnings\n\n=head1 SYNOPSIS\n\n    use warnings;\n    no warnings;\n\n    use warnings \"all\";\n    no warnings \"all\";\n\n    use warnings::register;\n    if (warnings::enabled()) {\n        warnings::warn(\"some warning\");\n    }\n\n    if (warnings::enabled(\"void\")) {\n        warnings::warn(\"void\", \"some warning\");\n    }\n\n    if (warnings::enabled($object)) {\n        warnings::warn($object, \"some warning\");\n    }\n\n    warnings::warnif(\"some warning\");\n    warnings::warnif(\"void\", \"some warning\");\n    warnings::warnif($object, \"some warning\");\n\n=head1 DESCRIPTION\n\nThe C<warnings> pragma is a replacement for the command line flag C<-w>,\nbut the pragma is limited to the enclosing block, while the flag is global.\nSee L<perllexwarn> for more information.\n\nIf no import list is supplied, all possible warnings are either enabled\nor disabled.\n\nA number of functions are provided to assist module authors.\n\n=over 4\n\n=item use warnings::register\n\nCreates a new warnings category with the same name as the package where\nthe call to the pragma is used.\n\n=item warnings::enabled()\n\nUse the warnings category with the same name as the current package.\n\nReturn TRUE if that warnings category is enabled in the calling module.\nOtherwise returns FALSE.\n\n=item warnings::enabled($category)\n\nReturn TRUE if the warnings category, C<$category>, is enabled in the\ncalling module.\nOtherwise returns FALSE.\n\n=item warnings::enabled($object)\n\nUse the name of the class for the object reference, C<$object>, as the\nwarnings category.\n\nReturn TRUE if that warnings ca"..., 4096) = 4096
22042 read(4, "\t\t=> 10,\n    'closed'\t\t=> 12,\n    'exec'\t\t=> 14,\n    'layer'\t\t=> 16,\n    'newline'\t\t=> 18,\n    'pipe'\t\t=> 20,\n    'unopened'\t\t=> 22,\n    'misc'\t\t=> 24,\n    'numeric'\t\t=> 26,\n    'once'\t\t=> 28,\n    'overflow'\t\t=> 30,\n    'pack'\t\t=> 32,\n    'portable'\t\t=> 34,\n    'recursion'\t\t=> 36,\n    'redefine'\t\t=> 38,\n    'regexp'\t\t=> 40,\n    'severe'\t\t=> 42,\n    'debugging'\t\t=> 44,\n    'inplace'\t\t=> 46,\n    'internal'\t\t=> 48,\n    'malloc'\t\t=> 50,\n    'signal'\t\t=> 52,\n    'substr'\t\t=> 54,\n    'syntax'\t\t=> 56,\n    'ambiguous'\t\t=> 58,\n    'bareword'\t\t=> 60,\n    'digit'\t\t=> 62,\n    'parenthesis'\t=> 64,\n    'precedence'\t=> 66,\n    'printf'\t\t=> 68,\n    'prototype'\t\t=> 70,\n    'qw'\t\t=> 72,\n    'reserved'\t\t=> 74,\n    'semicolon'\t\t=> 76,\n    'taint'\t\t=> 78,\n    'threads'\t\t=> 80,\n    'uninitialized'\t=> 82,\n    'unpack'\t\t=> 84,\n    'untie'\t\t=> 86,\n    'utf8'\t\t=> 88,\n    'void'\t\t=> 90,\n\n    # Warnings Categories added in Perl 5.011\n\n    'imprecision'\t=> 92,\n    'illegalproto'\t=> 94,\n  );\n\nour %Bits = (\n    'all'\t\t=> \"\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\", # [0..47]\n    'ambiguous'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\", # [29]\n    'bareword'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\", # [30]\n    'closed'\t\t=> \"\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [6]\n    'closure'\t\t=> \"\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [1]\n    'debugging'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\", # [22]\n    'deprecated'\t=> \"\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [2]\n    'digit'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\\x00\\x00\", # [31]\n    'exec'\t\t=> \"\\x00\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [7]\n    'exiting'\t\t=> \"\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [3]\n    'glob'\t\t=> \"\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [4]\n    'illegalproto'\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\", # [47]\n    'imprecision'\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\", # [46]\n    'inplace'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\\x00\\x"..., 4096) = 4096
22042 read(4, "\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\", # [39]\n    'threads'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\", # [40]\n    'uninitialized'\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\", # [41]\n    'unopened'\t\t=> \"\\x00\\x00\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [11]\n    'unpack'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\", # [42]\n    'untie'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\", # [43]\n    'utf8'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\", # [44]\n    'void'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\", # [45]\n  );\n\nour %DeadBits = (\n    'all'\t\t=> \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\", # [0..47]\n    'ambiguous'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\", # [29]\n    'bareword'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\", # [30]\n    'closed'\t\t=> \"\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [6]\n    'closure'\t\t=> \"\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [1]\n    'debugging'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\", # [22]\n    'deprecated'\t=> \"\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [2]\n    'digit'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x00\", # [31]\n    'exec'\t\t=> \"\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [7]\n    'exiting'\t\t=> \"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [3]\n    'glob'\t\t=> \"\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [4]\n    'illegalproto'\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\", # [47]\n    'imprecision'\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\", # [46]\n    'inplace'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\", # [23]\n    'internal'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\", # [24]\n    'io'\t\t=> \"\\x00\\xa8\\xaa\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [5..11]\n    'layer'\t\t=> \"\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", # [8]\n    'malloc'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\", # [25]\n    'misc'\t\t=> \"\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0"..., 4096) = 4096
22042 read(4, "00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x00\", # [43]\n    'utf8'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\", # [44]\n    'void'\t\t=> \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\", # [45]\n  );\n\n$NONE     = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n$LAST_BIT = 96 ;\n$BYTES    = 12 ;\n\n$All = \"\" ; vec($All, $Offsets{'all'}, 2) = 3 ;\n\nsub Croaker\n{\n    require Carp; # this initializes %CarpInternal\n    local $Carp::CarpInternal{'warnings'};\n    delete $Carp::CarpInternal{'warnings'};\n    Carp::croak(@_);\n}\n\nsub bits\n{\n    # called from B::Deparse.pm\n\n    push @_, 'all' unless @_;\n\n    my $mask;\n    my $catmask ;\n    my $fatal = 0 ;\n    my $no_fatal = 0 ;\n\n    foreach my $word ( @_ ) {\n\tif ($word eq 'FATAL') {\n\t    $fatal = 1;\n\t    $no_fatal = 0;\n\t}\n\telsif ($word eq 'NONFATAL') {\n\t    $fatal = 0;\n\t    $no_fatal = 1;\n\t}\n\telsif ($catmask = $Bits{$word}) {\n\t    $mask |= $catmask ;\n\t    $mask |= $DeadBits{$word} if $fatal ;\n\t    $mask &= ~($DeadBits{$word}|$All) if $no_fatal ;\n\t}\n\telse\n          { Croaker(\"Unknown warnings category '$word'\")}\n    }\n\n    return $mask ;\n}\n\nsub import \n{\n    shift;\n\n    my $catmask ;\n    my $fatal = 0 ;\n    my $no_fatal = 0 ;\n\n    my $mask = ${^WARNING_BITS} ;\n\n    if (vec($mask, $Offsets{'all'}, 1)) {\n        $mask |= $Bits{'all'} ;\n        $mask |= $DeadBits{'all'} if vec($mask, $Offsets{'all'}+1, 1);\n    }\n    \n    push @_, 'all' unless @_;\n\n    foreach my $word ( @_ ) {\n\tif ($word eq 'FATAL') {\n\t    $fatal = 1;\n\t    $no_fatal = 0;\n\t}\n\telsif ($word eq 'NONFATAL') {\n\t    $fatal = 0;\n\t    $no_fatal = 1;\n\t}\n\telsif ($catmask = $Bits{$word}) {\n\t    $mask |= $catmask ;\n\t    $mask |= $DeadBits{$word} if $fatal ;\n\t    $mask &= ~($DeadBits{$word}|$All) if $no_fatal ;\n\t}\n\telse\n          { Croaker(\"Unknown warnings category '$word'\")}\n    }\n\n    ${^WARNING_BITS} = $mask ;\n}\n\nsub unimport \n{\n    shift;\n\n    my $catmask ;\n    my $mask = ${^WARNING_BITS} ;\n\n    if (vec($mask, $Offsets{'all'}, 1)) {\n        $mask |= $Bits{'all'} ;\n        $mask |= $DeadBits{'all'} if vec($mask, $Offsets{'all'}+1, 1);\n    }\n\n  "..., 4096) = 4096
22042 read(4, "\n    my ($callers_bitmask, $offset, $i) = __chk(@_) ;\n\n    return 0 unless defined $callers_bitmask;\n    return vec($callers_bitmask, $offset + 1, 1) ||\n           vec($callers_bitmask, $Offsets{'all'} + 1, 1) ;\n}\n\nsub warn\n{\n    Croaker(\"Usage: warnings::warn([category,] 'message')\")\n\tunless @_ == 2 || @_ == 1 ;\n\n    my $message = pop ;\n    my ($callers_bitmask, $offset, $i) = __chk(@_) ;\n    require Carp;\n    Carp::croak($message)\n\tif vec($callers_bitmask, $offset+1, 1) ||\n\t   vec($callers_bitmask, $Offsets{'all'}+1, 1) ;\n    Carp::carp($message) ;\n}\n\nsub warnif\n{\n    Croaker(\"Usage: warnings::warnif([category,] 'message')\")\n\tunless @_ == 2 || @_ == 1 ;\n\n    my $message = pop ;\n    my ($callers_bitmask, $offset, $i) = __chk(@_) ;\n\n    return\n        unless defined $callers_bitmask &&\n            \t(vec($callers_bitmask, $offset, 1) ||\n            \tvec($callers_bitmask, $Offsets{'all'}, 1)) ;\n\n    require Carp;\n    Carp::croak($message)\n\tif vec($callers_bitmask, $offset+1, 1) ||\n\t   vec($callers_bitmask, $Offsets{'all'}+1, 1) ;\n\n    Carp::carp($message) ;\n}\n\n1;\n# ex: set ro:\n", 4096) = 1092
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Data/Dumper.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Data/Dumper.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Data/Dumper.pm", {st_mode=S_IFREG|0444, st_size=39827, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Data/Dumper.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "#\n# Data/Dumper.pm\n#\n# convert perl data structures into perl syntax suitable for both printing\n# and eval\n#\n# Documentation at the __END__\n#\n\npackage Data::Dumper;\n\n$VERSION = '2.125'; # Don't forget to set version and release date in POD!\n\n#$| = 1;\n\nuse 5.006_001;\nrequire Exporter;\nrequire overload;\n\nuse Carp;\n\nBEGIN {\n    @ISA = qw(Exporter);\n    @EXPORT = qw(Dumper);\n    @EXPORT_OK = qw(DumperX);\n\n    # if run under miniperl, or otherwise lacking dynamic loading,\n    # XSLoader should be attempted to load, or the pure perl flag\n    # toggled on load failure.\n    eval {\n\trequire XSLoader;\n    };\n    $Useperl = 1 if $@;\n}\n\nXSLoader::load( 'Data::Dumper' ) unless $Useperl;\n\n# module vars and their defaults\n$Indent     = 2         unless defined $Indent;\n$Purity     = 0         unless defined $Purity;\n$Pad        = \"\"        unless defined $Pad;\n$Varname    = \"VAR\"     unless defined $Varname;\n$Useqq      = 0         unless defined $Useqq;\n$Terse      = 0         unless defined $Terse;\n$Freezer    = \"\"        unless defined $Freezer;\n$Toaster    = \"\"        unless defined $Toaster;\n$Deepcopy   = 0         unless defined $Deepcopy;\n$Quotekeys  = 1         unless defined $Quotekeys;\n$Bless      = \"bless\"   unless defined $Bless;\n#$Expdepth   = 0         unless defined $Expdepth;\n$Maxdepth   = 0         unless defined $Maxdepth;\n$Pair       = ' => '    unless defined $Pair;\n$Useperl    = 0         unless defined $Useperl;\n$Sortkeys   = 0         unless defined $Sortkeys;\n$Deparse    = 0         unless defined $Deparse;\n\n#\n# expects an arrayref of values to be dumped.\n# can optionally pass an arrayref of names for the values.\n# names must have leading $ sign stripped. begin the name with *\n# to cause output of arrays and hashes rather than refs.\n#\nsub new {\n  my($c, $v, $n) = @_;\n\n  croak \"Usage:  PACKAGE->new(ARRAYREF, [ARRAYREF])\" \n    unless (defined($v) && (ref($v) eq 'ARRAY'));\n  $n = [] unless (defined($n) && (ref($n) eq 'ARRAY'));\n\n  my($s) = { \n             level      => 0,           # current recursive depth"..., 4096) = 4096
22042 stat64("/etc/perl/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Carp.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Carp.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Carp.pm", {st_mode=S_IFREG|0444, st_size=16146, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Carp.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package Carp;\n\nour $VERSION = '1.17';\n\nour $MaxEvalLen = 0;\nour $Verbose    = 0;\nour $CarpLevel  = 0;\nour $MaxArgLen  = 64;   # How much of each argument to print. 0 = all.\nour $MaxArgNums = 8;    # How many arguments to print. 0 = all.\n\nrequire Exporter;\nour @ISA = ('Exporter');\nour @EXPORT = qw(confess croak carp);\nour @EXPORT_OK = qw(cluck verbose longmess shortmess);\nour @EXPORT_FAIL = qw(verbose);\t# hook to enable verbose mode\n\n# The members of %Internal are packages that are internal to perl.\n# Carp will not report errors from within these packages if it\n# can.  The members of %CarpInternal are internal to Perl's warning\n# system.  Carp will not report errors from within these packages\n# either, and will not report calls *to* these packages for carp and\n# croak.  They replace $CarpLevel, which is deprecated.    The\n# $Max(EvalLen|(Arg(Len|Nums)) variables are used to specify how the eval\n# text and function arguments should be formatted when printed.\n\n# disable these by default, so they can live w/o require Carp\n$CarpInternal{Carp}++;\n$CarpInternal{warnings}++;\n$Internal{Exporter}++;\n$Internal{'Exporter::Heavy'}++;\n\n# if the caller specifies verbose usage (\"perl -MCarp=verbose script.pl\")\n# then the following method will be called by the Exporter which knows\n# to do this thanks to @EXPORT_FAIL, above.  $_[1] will contain the word\n# 'verbose'.\n\nsub export_fail { shift; $Verbose = shift if $_[0] eq 'verbose'; @_ }\n\nsub longmess {\n    # Icky backwards compatibility wrapper. :-(\n    #\n    # The story is that the original implementation hard-coded the\n    # number of call levels to go back, so calls to longmess were off\n    # by one.  Other code began calling longmess and expecting this\n    # behaviour, so the replacement has to emulate that behaviour.\n    my $call_pack = defined &{\"CORE::GLOBAL::caller\"} ? &{\"CORE::GLOBAL::caller\"}() : caller();\n    if ($Internal{$call_pack} or $CarpInternal{$call_pack}) {\n      return longmess_heavy(@_);\n    }\n    else {\n      local $CarpLevel = $CarpLevel + 1;\n      return lo"..., 4096) = 4096
22042 read(5, "ord($1))/eg;\n  return $arg;\n}\n\n# Takes an inheritance cache and a package and returns\n# an anon hash of known inheritances and anon array of\n# inheritances which consequences have not been figured\n# for.\nsub get_status {\n    my $cache = shift;\n    my $pkg = shift;\n    $cache->{$pkg} ||= [{$pkg => $pkg}, [trusts_directly($pkg)]];\n    return @{$cache->{$pkg}};\n}\n\n# Takes the info from caller() and figures out the name of\n# the sub/require/eval\nsub get_subname {\n  my $info = shift;\n  if (defined($info->{evaltext})) {\n    my $eval = $info->{evaltext};\n    if ($info->{is_require}) {\n      return \"require $eval\";\n    }\n    else {\n      $eval =~ s/([\\\\\\'])/\\\\$1/g;\n      return \"eval '\" . str_len_trim($eval, $MaxEvalLen) . \"'\";\n    }\n  }\n\n  return ($info->{sub} eq '(eval)') ? 'eval {...}' : $info->{sub};\n}\n\n# Figures out what call (from the point of view of the caller)\n# the long error backtrace should start at.\nsub long_error_loc {\n  my $i;\n  my $lvl = $CarpLevel;\n  {\n    ++$i;\n    my $pkg = defined &{\"CORE::GLOBAL::caller\"} ? &{\"CORE::GLOBAL::caller\"}($i) : caller($i);\n    unless(defined($pkg)) {\n      # This *shouldn't* happen.\n      if (%Internal) {\n        local %Internal;\n        $i = long_error_loc();\n        last;\n      }\n      else {\n        # OK, now I am irritated.\n        return 2;\n      }\n    }\n    redo if $CarpInternal{$pkg};\n    redo unless 0 > --$lvl;\n    redo if $Internal{$pkg};\n  }\n  return $i - 1;\n}\n\n\nsub longmess_heavy {\n  return @_ if ref($_[0]); # don't break references as exceptions\n  my $i = long_error_loc();\n  return ret_backtrace($i, @_);\n}\n\n# Returns a full stack backtrace starting from where it is\n# told.\nsub ret_backtrace {\n  my ($i, @error) = @_;\n  my $mess;\n  my $err = join '', @error;\n  $i++;\n\n  my $tid_msg = '';\n  if (defined &threads::tid) {\n    my $tid = threads->tid;\n    $tid_msg = \" thread $tid\" if $tid;\n  }\n\n  my %i = caller_info($i);\n  $mess = \"$err at $i{file} line $i{line}$tid_msg\\n\";\n\n  while (my %i = caller_info(++$i)) {\n      $mess .= \"\\t$i{sub_name} called at $i{file} line $i{"..., 4096) = 4096
22042 brk(0x80ae000)                    = 0x80ae000
22042 read(5, "ts $known->{$parent}) {\n        my $anc = shift @$partial;\n        next if exists $known->{$anc};\n        $known->{$anc}++;\n        my ($anc_knows, $anc_partial) = get_status($cache, $anc);\n        my @found = keys %$anc_knows;\n        @$known{@found} = ();\n        push @$partial, @$anc_partial;\n    }\n    return exists $known->{$parent};\n}\n\n# Takes a package and gives a list of those trusted directly\nsub trusts_directly {\n    my $class = shift;\n    no strict 'refs';\n    no warnings 'once'; \n    return @{\"$class\\::CARP_NOT\"}\n      ? @{\"$class\\::CARP_NOT\"}\n      : @{\"$class\\::ISA\"};\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\ncarp    - warn of errors (from perspective of caller)\n\ncluck   - warn of errors with stack backtrace\n          (not exported by default)\n\ncroak   - die of errors (from perspective of caller)\n\nconfess - die of errors with stack backtrace\n\n=head1 SYNOPSIS\n\n    use Carp;\n    croak \"We're outta here!\";\n\n    use Carp qw(cluck);\n    cluck \"This is how we got here!\";\n\n=head1 DESCRIPTION\n\nThe Carp routines are useful in your own modules because\nthey act like die() or warn(), but with a message which is more\nlikely to be useful to a user of your module.  In the case of\ncluck, confess, and longmess that context is a summary of every\ncall in the call-stack.  For a shorter message you can use C<carp>\nor C<croak> which report the error as being from where your module\nwas called.  There is no guarantee that that is where the error\nwas, but it is a good educated guess.\n\nYou can also alter the way the output and logic of C<Carp> works, by\nchanging some global variables in the C<Carp> namespace. See the\nsection on C<GLOBAL VARIABLES> below.\n\nHere is a more complete description of how C<carp> and C<croak> work.\nWhat they do is search the call-stack for a function call stack where\nthey have not been told that there shouldn't be an error.  If every\ncall is marked safe, they give up and give a full stack backtrace\ninstead.  In other words they presume that the first likely looking\npotential suspect is guilty.  Their rules for te"..., 4096) = 4096
22042 _llseek(5, 8795, [8795], SEEK_SET) = 0
22042 _llseek(5, 0, [8795], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 stat64("/etc/perl/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Exporter.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Exporter.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Exporter.pm", {st_mode=S_IFREG|0444, st_size=18494, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Exporter.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package Exporter;\n\nrequire 5.006;\n\n# Be lean.\n#use strict;\n#no strict 'refs';\n\nour $Debug = 0;\nour $ExportLevel = 0;\nour $Verbose ||= 0;\nour $VERSION = '5.64_01';\nour (%Cache);\n\nsub as_heavy {\n  require Exporter::Heavy;\n  # Unfortunately, this does not work if the caller is aliased as *name = \\&foo\n  # Thus the need to create a lot of identical subroutines\n  my $c = (caller(1))[3];\n  $c =~ s/.*:://;\n  \\&{\"Exporter::Heavy::heavy_$c\"};\n}\n\nsub export {\n  goto &{as_heavy()};\n}\n\nsub import {\n  my $pkg = shift;\n  my $callpkg = caller($ExportLevel);\n\n  if ($pkg eq \"Exporter\" and @_ and $_[0] eq \"import\") {\n    *{$callpkg.\"::import\"} = \\&import;\n    return;\n  }\n\n  # We *need* to treat @{\"$pkg\\::EXPORT_FAIL\"} since Carp uses it :-(\n  my($exports, $fail) = (\\@{\"$pkg\\::EXPORT\"}, \\@{\"$pkg\\::EXPORT_FAIL\"});\n  return export $pkg, $callpkg, @_\n    if $Verbose or $Debug or @$fail > 1;\n  my $export_cache = ($Cache{$pkg} ||= {});\n  my $args = @_ or @_ = @$exports;\n\n  local $_;\n  if ($args and not %$export_cache) {\n    s/^&//, $export_cache->{$_} = 1\n      foreach (@$exports, @{\"$pkg\\::EXPORT_OK\"});\n  }\n  my $heavy;\n  # Try very hard not to use {} and hence have to  enter scope on the foreach\n  # We bomb out of the loop with last as soon as heavy is set.\n  if ($args or $fail) {\n    ($heavy = (/\\W/ or $args and not exists $export_cache->{$_}\n               or @$fail and $_ eq $fail->[0])) and last\n                 foreach (@_);\n  } else {\n    ($heavy = /\\W/) and last\n      foreach (@_);\n  }\n  return export $pkg, $callpkg, ($args ? @_ : ()) if $heavy;\n  local $SIG{__WARN__} = \n\tsub {require Carp; &Carp::carp};\n  # shortcut for the common case of no type character\n  *{\"$callpkg\\::$_\"} = \\&{\"$pkg\\::$_\"} foreach @_;\n}\n\n# Default methods\n\nsub export_fail {\n    my $self = shift;\n    @_;\n}\n\n# Unfortunately, caller(1)[3] \"does not work\" if the caller is aliased as\n# *name = \\&foo.  Thus the need to create a lot of identical subroutines\n# Otherwise we could have aliased them to export().\n\nsub export_to_level {\n  goto &{as_heavy()};\n}\n\nsub ex"..., 4096) = 4096
22042 _llseek(5, 2189, [2189], SEEK_SET) = 0
22042 _llseek(5, 0, [2189], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 stat64("/etc/perl/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/XSLoader.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/XSLoader.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/XSLoader.pm", {st_mode=S_IFREG|0444, st_size=10523, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/XSLoader.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09498) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "# Generated from XSLoader.pm.PL (resolved %Config::Config value)\n\npackage XSLoader;\n\n$VERSION = \"0.10\";\n\n#use strict;\n\n# enable debug/trace messages from DynaLoader perl code\n# $dl_debug = $ENV{PERL_DL_DEBUG} || 0 unless defined $dl_debug;\n\n  my $dl_dlext = 'so';\n\npackage DynaLoader;\n\n# No prizes for guessing why we don't say 'bootstrap DynaLoader;' here.\n# NOTE: All dl_*.xs (including dl_none.xs) define a dl_error() XSUB\nboot_DynaLoader('DynaLoader') if defined(&boot_DynaLoader) &&\n                                !defined(&dl_error);\npackage XSLoader;\n\nsub load {\n    package DynaLoader;\n\n    die q{XSLoader::load('Your::Module', $Your::Module::VERSION)} unless @_;\n\n    my($module) = $_[0];\n\n    # work with static linking too\n    my $boots = \"$module\\::bootstrap\";\n    goto &$boots if defined &$boots;\n\n    goto retry unless $module and defined &dl_load_file;\n\n    my @modparts = split(/::/,$module);\n    my $modfname = $modparts[-1];\n\n    my $modpname = join('/',@modparts);\n    my $modlibname = (caller())[1];\n    my $c = @modparts;\n    $modlibname =~ s,[\\\\/][^\\\\/]+$,, while $c--;\t# Q&D basename\n    my $file = \"$modlibname/auto/$modpname/$modfname.$dl_dlext\";\n\n#   print STDERR \"XSLoader::load for $module ($file)\\n\" if $dl_debug;\n\n    my $bs = $file;\n    $bs =~ s/(\\.\\w+)?(;\\d*)?$/\\.bs/; # look for .bs 'beside' the library\n\n    if (-s $bs) { # only read file if it's not empty\n#       print STDERR \"BS: $bs ($^O, $dlsrc)\\n\" if $dl_debug;\n        eval { do $bs; };\n        warn \"$bs: $@\\n\" if $@;\n    }\n\n    goto retry if not -f $file or -s $bs;\n\n    my $bootname = \"boot_$module\";\n    $bootname =~ s/\\W/_/g;\n    @DynaLoader::dl_require_symbols = ($bootname);\n\n    my $boot_symbol_ref;\n\n    # Many dynamic extension loading problems will appear to come from\n    # this section of code: XYZ failed at line 123 of DynaLoader.pm.\n    # Often these errors are actually occurring in the initialisation\n    # C code of the extension XS file. Perl reports the error as being\n    # in this perl code simply because this was the last perl code"..., 4096) = 4096
22042 _llseek(5, 3468, [3468], SEEK_SET) = 0
22042 _llseek(5, 0, [3468], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 read(4, "mat_refaddr = sub {\n    require Scalar::Util;\n    sprintf our $refaddr_format, Scalar::Util::refaddr(shift);\n  }\n}\n\n#\n# add-to or query the table of already seen references\n#\nsub Seen {\n  my($s, $g) = @_;\n  if (defined($g) && (ref($g) eq 'HASH'))  {\n    init_refaddr_format();\n    my($k, $v, $id);\n    while (($k, $v) = each %$g) {\n      if (defined $v and ref $v) {\n\t$id = format_refaddr($v);\n\tif ($k =~ /^[*](.*)$/) {\n\t  $k = (ref $v eq 'ARRAY') ? ( \"\\\\\\@\" . $1 ) :\n\t       (ref $v eq 'HASH')  ? ( \"\\\\\\%\" . $1 ) :\n\t       (ref $v eq 'CODE')  ? ( \"\\\\\\&\" . $1 ) :\n\t\t\t\t     (   \"\\$\" . $1 ) ;\n\t}\n\telsif ($k !~ /^\\$/) {\n\t  $k = \"\\$\" . $k;\n\t}\n\t$s->{seen}{$id} = [$k, $v];\n      }\n      else {\n\tcarp \"Only refs supported, ignoring non-ref item \\$$k\";\n      }\n    }\n    return $s;\n  }\n  else {\n    return map { @$_ } values %{$s->{seen}};\n  }\n}\n\n#\n# set or query the values to be dumped\n#\nsub Values {\n  my($s, $v) = @_;\n  if (defined($v) && (ref($v) eq 'ARRAY'))  {\n    $s->{todump} = [@$v];        # make a copy\n    return $s;\n  }\n  else {\n    return @{$s->{todump}};\n  }\n}\n\n#\n# set or query the names of the values to be dumped\n#\nsub Names {\n  my($s, $n) = @_;\n  if (defined($n) && (ref($n) eq 'ARRAY'))  {\n    $s->{names} = [@$n];         # make a copy\n    return $s;\n  }\n  else {\n    return @{$s->{names}};\n  }\n}\n\nsub DESTROY {}\n\nsub Dump {\n    return &Dumpxs\n\tunless $Data::Dumper::Useperl || (ref($_[0]) && $_[0]->{useperl}) ||\n\t       $Data::Dumper::Useqq   || (ref($_[0]) && $_[0]->{useqq}) ||\n\t       $Data::Dumper::Deparse || (ref($_[0]) && $_[0]->{deparse});\n    return &Dumpperl;\n}\n\n#\n# dump the refs in the current dumper object.\n# expects same args as new() if called via package name.\n#\nsub Dumpperl {\n  my($s) = shift;\n  my(@out, $val, $name);\n  my($i) = 0;\n  local(@post);\n  init_refaddr_format();\n\n  $s = $s->new(@_) unless ref $s;\n\n  for $val (@{$s->{todump}}) {\n    my $out = \"\";\n    @post = ();\n    $name = $s->{names}[$i++];\n    if (defined $name) {\n      if ($name =~ /^[*](.*)$/) {\n\tif (defined $val) {\n\t  $name = (ref $val eq 'A"..., 4096) = 4096
22042 brk(0x80cf000)                    = 0x80cf000
22042 read(4, "0) {\n\t    $out = ($realtype eq 'HASH')  ? '{}' :\n\t      ($realtype eq 'ARRAY') ? '[]' :\n\t\t'do{my $o}' ;\n\t    push @post, $name . \" = \" . $s->{seen}{$id}[0];\n\t  }\n\t  else {\n\t    $out = $s->{seen}{$id}[0];\n\t    if ($name =~ /^([\\@\\%])/) {\n\t      my $start = $1;\n\t      if ($out =~ /^\\\\$start/) {\n\t\t$out = substr($out, 1);\n\t      }\n\t      else {\n\t\t$out = $start . '{' . $out . '}';\n\t      }\n\t    }\n          }\n\t  return $out;\n#        }\n      }\n      else {\n        # store our name\n        $s->{seen}{$id} = [ (($name =~ /^[@%]/)     ? ('\\\\' . $name ) :\n\t\t\t     ($realtype eq 'CODE' and\n\t\t\t      $name =~ /^[*](.*)$/) ? ('\\\\&' . $1 )   :\n\t\t\t     $name          ),\n\t\t\t    $val ];\n      }\n    }\n    my $no_bless = 0; \n    my $is_regex = 0;\n    if ( $realpack and ($] >= 5.009005 ? re::is_regexp($val) : $realpack eq 'Regexp') ) {\n        $is_regex = 1;\n        $no_bless = $realpack eq 'Regexp';\n    }\n\n    # If purity is not set and maxdepth is set, then check depth: \n    # if we have reached maximum depth, return the string\n    # representation of the thing we are currently examining\n    # at this depth (i.e., 'Foo=ARRAY(0xdeadbeef)'). \n    if (!$s->{purity}\n\tand $s->{maxdepth} > 0\n\tand $s->{level} >= $s->{maxdepth})\n    {\n      return qq['$val'];\n    }\n\n    # we have a blessed ref\n    if ($realpack and !$no_bless) {\n      $out = $s->{'bless'} . '( ';\n      $blesspad = $s->{apad};\n      $s->{apad} .= '       ' if ($s->{indent} >= 2);\n    }\n\n    $s->{level}++;\n    $ipad = $s->{xpad} x $s->{level};\n\n    if ($is_regex) {\n        my $pat;\n        # This really sucks, re:regexp_pattern is in ext/re/re.xs and not in \n        # universal.c, and even worse we cant just require that re to be loaded\n        # we *have* to use() it. \n        # We should probably move it to universal.c for 5.10.1 and fix this.\n        # Currently we only use re::regexp_pattern when the re is blessed into another\n        # package. This has the disadvantage of meaning that a DD dump won't round trip\n        # as the pattern will be repeatedly wrapped with th"..., 4096) = 4096
22042 read(4, "'->' if $mname =~ /^\\*.+\\{[A-Z]+\\}$/;\n      my ($sortkeys, $keys, $key) = (\"$s->{sortkeys}\");\n      if ($sortkeys) {\n\tif (ref($s->{sortkeys}) eq 'CODE') {\n\t  $keys = $s->{sortkeys}($val);\n\t  unless (ref($keys) eq 'ARRAY') {\n\t    carp \"Sortkeys subroutine did not return ARRAYREF\";\n\t    $keys = [];\n\t  }\n\t}\n\telse {\n\t  $keys = [ sort keys %$val ];\n\t}\n      }\n\n      # Ensure hash iterator is reset\n      keys(%$val);\n\n      while (($k, $v) = ! $sortkeys ? (each %$val) :\n\t     @$keys ? ($key = shift(@$keys), $val->{$key}) :\n\t     () ) \n      {\n\tmy $nk = $s->_dump($k, \"\");\n\t$nk = $1 if !$s->{quotekeys} and $nk =~ /^[\\\"\\']([A-Za-z_]\\w*)[\\\"\\']$/;\n\t$sname = $mname . '{' . $nk . '}';\n\t$out .= $pad . $ipad . $nk . $pair;\n\n\t# temporarily alter apad\n\t$s->{apad} .= (\" \" x (length($nk) + 4)) if $s->{indent} >= 2;\n\t$out .= $s->_dump($val->{$k}, $sname) . \",\";\n\t$s->{apad} = $lpad if $s->{indent} >= 2;\n      }\n      if (substr($out, -1) eq ',') {\n\tchop $out;\n\t$out .= $pad . ($s->{xpad} x ($s->{level} - 1));\n      }\n      $out .= ($name =~ /^\\%/) ? ')' : '}';\n    }\n    elsif ($realtype eq 'CODE') {\n      if ($s->{deparse}) {\n\trequire B::Deparse;\n\tmy $sub =  'sub ' . (B::Deparse->new)->coderef2text($val);\n\t$pad    =  $s->{sep} . $s->{pad} . $s->{apad} . $s->{xpad} x ($s->{level} - 1);\n\t$sub    =~ s/\\n/$pad/gse;\n\t$out   .=  $sub;\n      } else {\n        $out .= 'sub { \"DUMMY\" }';\n        carp \"Encountered CODE ref, using dummy placeholder\" if $s->{purity};\n      }\n    }\n    else {\n      croak \"Can\\'t handle $realtype type.\";\n    }\n    \n    if ($realpack and !$no_bless) { # we have a blessed ref\n      $out .= ', ' . _quote($realpack) . ' )';\n      $out .= '->' . $s->{toaster} . '()'  if $s->{toaster} ne '';\n      $s->{apad} = $blesspad;\n    }\n    $s->{level}--;\n\n  }\n  else {                                 # simple scalar\n\n    my $ref = \\$_[1];\n    # first, catalog the scalar\n    if ($name ne '') {\n      $id = format_refaddr($ref);\n      if (exists $s->{seen}{$id}) {\n        if ($s->{seen}{$id}[2]) {\n\t  $out = $s->{seen}{$id}[0];\n\t  #war"..., 4096) = 4096
22042 read(4, "\"\";\n    }\n    else {\n      $s->{xpad} = \"  \";\n      $s->{sep} = \"\\n\";\n    }\n    $s->{indent} = $v;\n    return $s;\n  }\n  else {\n    return $s->{indent};\n  }\n}\n\nsub Pair {\n    my($s, $v) = @_;\n    defined($v) ? (($s->{pair} = $v), return $s) : $s->{pair};\n}\n\nsub Pad {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{pad} = $v), return $s) : $s->{pad};\n}\n\nsub Varname {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{varname} = $v), return $s) : $s->{varname};\n}\n\nsub Purity {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{purity} = $v), return $s) : $s->{purity};\n}\n\nsub Useqq {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{useqq} = $v), return $s) : $s->{useqq};\n}\n\nsub Terse {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{terse} = $v), return $s) : $s->{terse};\n}\n\nsub Freezer {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{freezer} = $v), return $s) : $s->{freezer};\n}\n\nsub Toaster {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{toaster} = $v), return $s) : $s->{toaster};\n}\n\nsub Deepcopy {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{deepcopy} = $v), return $s) : $s->{deepcopy};\n}\n\nsub Quotekeys {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{quotekeys} = $v), return $s) : $s->{quotekeys};\n}\n\nsub Bless {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{'bless'} = $v), return $s) : $s->{'bless'};\n}\n\nsub Maxdepth {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{'maxdepth'} = $v), return $s) : $s->{'maxdepth'};\n}\n\nsub Useperl {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{'useperl'} = $v), return $s) : $s->{'useperl'};\n}\n\nsub Sortkeys {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{'sortkeys'} = $v), return $s) : $s->{'sortkeys'};\n}\n\nsub Deparse {\n  my($s, $v) = @_;\n  defined($v) ? (($s->{'deparse'} = $v), return $s) : $s->{'deparse'};\n}\n\n# used by qquote below\nmy %esc = (  \n    \"\\a\" => \"\\\\a\",\n    \"\\b\" => \"\\\\b\",\n    \"\\t\" => \"\\\\t\",\n    \"\\n\" => \"\\\\n\",\n    \"\\f\" => \"\\\\f\",\n    \"\\r\" => \"\\\\r\",\n    \"\\e\" => \"\\\\e\",\n);\n\n# put a string value in double quotes\nsub qquote {\n  local($_) = shift;\n  s/([\\\\\\\"\\@\\$])/\\\\$1/g;\n  my $bytes; { use bytes; $bytes = length }\n  s/([^\\x00-\\x7f])/'\\x{'.sprintf"..., 4096) = 4096
22042 brk(0x80f0000)                    = 0x80f0000
22042 stat64("/etc/perl/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/bytes.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/bytes.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/bytes.pm", {st_mode=S_IFREG|0444, st_size=3033, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/bytes.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package bytes;\n\nour $VERSION = '1.04';\n\n$bytes::hint_bits = 0x00000008;\n\nsub import {\n    $^H |= $bytes::hint_bits;\n}\n\nsub unimport {\n    $^H &= ~$bytes::hint_bits;\n}\n\nsub AUTOLOAD {\n    require \"bytes_heavy.pl\";\n    goto &$AUTOLOAD if defined &$AUTOLOAD;\n    require Carp;\n    Carp::croak(\"Undefined subroutine $AUTOLOAD called\");\n}\n\nsub length (_);\nsub chr (_);\nsub ord (_);\nsub substr ($$;$$);\nsub index ($$;$);\nsub rindex ($$;$);\n\n1;\n__END__\n\n=head1 NAME\n\nbytes - Perl pragma to force byte semantics rather than character semantics\n\n=head1 NOTICE\n\nThis pragma reflects early attempts to incorporate Unicode into perl and\nhas since been superseded. It breaks encapsulation (i.e. it exposes the\ninnards of how the perl executable currently happens to store a string),\nand use of this module for anything other than debugging purposes is\nstrongly discouraged. If you feel that the functions here within might be\nuseful for your application, this possibly indicates a mismatch between\nyour mental model of Perl Unicode and the current reality. In that case,\nyou may wish to read some of the perl Unicode documentation:\nL<perluniintro>, L<perlunitut>, L<perlunifaq> and L<perlunicode>.\n\n=head1 SYNOPSIS\n\n    use bytes;\n    ... chr(...);       # or bytes::chr\n    ... index(...);     # or bytes::index\n    ... length(...);    # or bytes::length\n    ... ord(...);       # or bytes::ord\n    ... rindex(...);    # or bytes::rindex\n    ... substr(...);    # or bytes::substr\n    no bytes;\n\n\n=head1 DESCRIPTION\n\nThe C<use bytes> pragma disables character semantics for the rest of the\nlexical scope in which it appears.  C<no bytes> can be used to reverse\nthe effect of C<use bytes> within the current lexical scope.\n\nPerl normally assumes character semantics in the presence of character\ndata (i.e. data that has come from a source that has been marked as\nbeing of a particular character encoding). When C<use bytes> is in\neffect, the encoding is temporarily ignored, and each string is treated\nas a series of bytes. \n\nAs an example, when Perl sees C<$x "..., 4096) = 3033
22042 _llseek(5, 446, [446], SEEK_SET)  = 0
22042 _llseek(5, 0, [446], SEEK_CUR)    = 0
22042 close(5)                          = 0
22042 _llseek(4, 19734, [19734], SEEK_SET) = 0
22042 _llseek(4, 0, [19734], SEEK_CUR)  = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/overload.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/overload.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/overload.pm", {st_mode=S_IFREG|0444, st_size=49467, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/overload.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package overload;\n\nour $VERSION = '1.10';\n\nsub nil {}\n\nsub OVERLOAD {\n  $package = shift;\n  my %arg = @_;\n  my ($sub, $fb);\n  $ {$package . \"::OVERLOAD\"}{dummy}++; # Register with magic by touching.\n  $fb = ${$package . \"::()\"}; # preserve old fallback value RT#68196\n  *{$package . \"::()\"} = \\&nil; # Make it findable via fetchmethod.\n  for (keys %arg) {\n    if ($_ eq 'fallback') {\n      $fb = $arg{$_};\n    } else {\n      $sub = $arg{$_};\n      if (not ref $sub and $sub !~ /::/) {\n\t$ {$package . \"::(\" . $_} = $sub;\n\t$sub = \\&nil;\n      }\n      #print STDERR \"Setting `$ {'package'}::\\cO$_' to \\\\&`$sub'.\\n\";\n      *{$package . \"::(\" . $_} = \\&{ $sub };\n    }\n  }\n  ${$package . \"::()\"} = $fb; # Make it findable too (fallback only).\n}\n\nsub import {\n  $package = (caller())[0];\n  # *{$package . \"::OVERLOAD\"} = \\&OVERLOAD;\n  shift;\n  $package->overload::OVERLOAD(@_);\n}\n\nsub unimport {\n  $package = (caller())[0];\n  ${$package . \"::OVERLOAD\"}{dummy}++; # Upgrade the table\n  shift;\n  for (@_) {\n    if ($_ eq 'fallback') {\n      undef $ {$package . \"::()\"};\n    } else {\n      delete $ {$package . \"::\"}{\"(\" . $_};\n    }\n  }\n}\n\nsub Overloaded {\n  my $package = shift;\n  $package = ref $package if ref $package;\n  $package->can('()');\n}\n\nsub ov_method {\n  my $globref = shift;\n  return undef unless $globref;\n  my $sub = \\&{*$globref};\n  return $sub if $sub ne \\&nil;\n  return shift->can($ {*$globref});\n}\n\nsub OverloadedStringify {\n  my $package = shift;\n  $package = ref $package if ref $package;\n  #$package->can('(\"\"')\n  ov_method mycan($package, '(\"\"'), $package\n    or ov_method mycan($package, '(0+'), $package\n    or ov_method mycan($package, '(bool'), $package\n    or ov_method mycan($package, '(nomethod'), $package;\n}\n\nsub Method {\n  my $package = shift;\n  if(ref $package) {\n    local $@;\n    local $!;\n    require Scalar::Util;\n    $package = Scalar::Util::blessed($package);\n    return undef if !defined $package;\n  }\n  #my $meth = $package->can('(' . shift);\n  ov_method mycan($package, '(' . shift), $package;\n  #return $meth if "..., 4096) = 4096
22042 stat64("/etc/perl/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/warnings/register.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/warnings/register.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/warnings/register.pm", {st_mode=S_IFREG|0444, st_size=1023, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/warnings/register.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package warnings::register;\n\nour $VERSION = '1.01';\n\n=pod\n\n=head1 NAME\n\nwarnings::register - warnings import function\n\n=head1 SYNOPSIS\n\n    use warnings::register;\n\n=head1 DESCRIPTION\n\nCreates a warnings category with the same name as the current package.\n\nSee L<warnings> and L<perllexwarn> for more information on this module's\nusage.\n\n=cut\n\nrequire warnings;\n\nsub mkMask\n{\n    my ($bit) = @_;\n    my $mask = \"\";\n\n    vec($mask, $bit, 1) = 1;\n    return $mask;\n}\n\nsub import\n{\n    shift;\n    my $package = (caller(0))[0];\n    if (! defined $warnings::Bits{$package}) {\n        $warnings::Bits{$package}     = mkMask($warnings::LAST_BIT);\n        vec($warnings::Bits{'all'}, $warnings::LAST_BIT, 1) = 1;\n        $warnings::Offsets{$package}  = $warnings::LAST_BIT ++;\n\tforeach my $k (keys %warnings::Bits) {\n\t    vec($warnings::Bits{$k}, $warnings::LAST_BIT, 1) = 0;\n\t}\n        $warnings::DeadBits{$package} = mkMask($warnings::LAST_BIT);\n        vec($warnings::DeadBits{'all'}, $warnings::LAST_BIT++, 1) = 1;\n    }\n}\n\n1;\n", 4096) = 1023
22042 read(5, "", 4096)                 = 0
22042 close(5)                          = 0
22042 read(4, "sed into.\n        if (warnings::enabled) {\n            $_ [1] = \"undef\" unless defined $_ [1];\n            warnings::warn (\"`$_[1]' is not a code reference\");\n        }\n    }\n    else {\n        $^H{$_[0]} = $_[1];\n        $^H |= $constants{$_[0]};\n    }\n    shift, shift;\n  }\n}\n\nsub remove_constant {\n  # Arguments: what, sub\n  while (@_) {\n    delete $^H{$_[0]};\n    $^H &= ~ $constants{$_[0]};\n    shift, shift;\n  }\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\noverload - Package for overloading Perl operations\n\n=head1 SYNOPSIS\n\n    package SomeThing;\n\n    use overload\n\t'+' => \\&myadd,\n\t'-' => \\&mysub;\n\t# etc\n    ...\n\n    package main;\n    $a = SomeThing->new( 57 );\n    $b=5+$a;\n    ...\n    if (overload::Overloaded $b) {...}\n    ...\n    $strval = overload::StrVal $b;\n\n=head1 DESCRIPTION\n\nThis pragma allows overloading of Perl's operators for a class.\nTo overload built-in functions, see L<perlsub/Overriding Built-in Functions> instead.\n\n=head2 Declaration of overloaded functions\n\nThe compilation directive\n\n    package Number;\n    use overload\n\t\"+\" => \\&add,\n\t\"*=\" => \"muas\";\n\ndeclares function Number::add() for addition, and method muas() in\nthe \"class\" C<Number> (or one of its base classes)\nfor the assignment form C<*=> of multiplication.\n\nArguments of this directive come in (key, value) pairs.  Legal values\nare values legal inside a C<&{ ... }> call, so the name of a\nsubroutine, a reference to a subroutine, or an anonymous subroutine\nwill all work.  Note that values specified as strings are\ninterpreted as methods, not subroutines.  Legal keys are listed below.\n\nThe subroutine C<add> will be called to execute C<$a+$b> if $a\nis a reference to an object blessed into the package C<Number>, or if $a is\nnot an object from a package with defined mathemagic addition, but $b is a\nreference to a C<Number>.  It can also be called in other situations, like\nC<$a+=7>, or C<$a++>.  See L<MAGIC AUTOGENERATION>.  (Mathemagical\nmethods refer to methods triggered by an overloaded mathematical\noperator.)\n\nSince overloading respects inheritance via the"..., 4096) = 4096
22042 _llseek(4, 4529, [4529], SEEK_SET) = 0
22042 _llseek(4, 0, [4529], SEEK_CUR)   = 0
22042 close(4)                          = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Data/Dumper/Dumper.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Data/Dumper/Dumper.so", {st_mode=S_IFREG|0555, st_size=34400, ...}) = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Data/Dumper/Dumper.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/5.12.4/i686-linux/auto/Data/Dumper/Dumper.so", O_RDONLY|O_CLOEXEC) = 4
22042 read(4, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\260\31\0\0004\0\0\0(\202\0\0\0\0\0\0004\0 \0\6\0(\0\33\0\32\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0lr\0\0lr\0\0\5\0\0\0\0\20\0\0\1\0\0\0\260~\0\0\260\216\0\0\260\216\0\0h\2\0\0p\2\0\0\6\0\0\0\0\20\0\0\2\0\0\0\320~\0\0\320\216\0\0\320\216\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\260~\0\0\260\216\0\0\260\216\0\0P\1\0\0P\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\253\0\0\0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0U\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0Q\0\0\0\0\0\0\0\3\0\0\0000\0\0\0 \0\0\0\0\0\0\0Y\0\0\0005\0\0\0R\0\0\0M\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0+\0\0\0\0\0\0\0\0\0\0\0\20\0\0\0?\0\0\0-\0\0\0\0\0\0\0\\\0\0\0\0\0\0\0\0\0\0\0\34\0\0\0A\0\0\0\0\0\0\0X\0\0\0\24\0\0\0\37\0\0\0\0\0\0\0]\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0`\0\0\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0008\0\0\0\0\0\0\0B\0\0\0N\0\0\0%\0\0\0\0\0\0\0(\0\0\0)\0\0\0D\0\0\0\0\0\0\0\4\0\0\0\0\0\0\0002\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 512) = 512
22042 fstat64(4, {st_mode=S_IFREG|0555, st_size=34400, ...}) = 0
22042 mmap2(NULL, 37152, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0xb778f000
22042 mmap2(0xb7797000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x7) = 0xb7797000
22042 close(4)                          = 0
22042 mprotect(0xb7797000, 4096, PROT_READ) = 0
22042 stat64("/etc/perl/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/IPC/Open2.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/IPC/Open2.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/IPC/Open2.pm", {st_mode=S_IFREG|0444, st_size=4023, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/IPC/Open2.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package IPC::Open2;\n\nuse strict;\nour ($VERSION, @ISA, @EXPORT);\n\nrequire 5.000;\nrequire Exporter;\n\n$VERSION\t= 1.03;\n@ISA\t\t= qw(Exporter);\n@EXPORT\t\t= qw(open2);\n\n=head1 NAME\n\nIPC::Open2 - open a process for both reading and writing using open2()\n\n=head1 SYNOPSIS\n\n    use IPC::Open2;\n\n    $pid = open2(\\*CHLD_OUT, \\*CHLD_IN, 'some cmd and args');\n      # or without using the shell\n    $pid = open2(\\*CHLD_OUT, \\*CHLD_IN, 'some', 'cmd', 'and', 'args');\n\n    # or with handle autovivification\n    my($chld_out, $chld_in);\n    $pid = open2($chld_out, $chld_in, 'some cmd and args');\n      # or without using the shell\n    $pid = open2($chld_out, $chld_in, 'some', 'cmd', 'and', 'args');\n\n    waitpid( $pid, 0 );\n    my $child_exit_status = $? >> 8;\n\n=head1 DESCRIPTION\n\nThe open2() function runs the given $cmd and connects $chld_out for\nreading and $chld_in for writing.  It's what you think should work \nwhen you try\n\n    $pid = open(HANDLE, \"|cmd args|\");\n\nThe write filehandle will have autoflush turned on.\n\nIf $chld_out is a string (that is, a bareword filehandle rather than a glob\nor a reference) and it begins with C<< >& >>, then the child will send output\ndirectly to that file handle.  If $chld_in is a string that begins with\nC<< <& >>, then $chld_in will be closed in the parent, and the child will\nread from it directly.  In both cases, there will be a dup(2) instead of a\npipe(2) made.\n\nIf either reader or writer is the null string, this will be replaced\nby an autogenerated filehandle.  If so, you must pass a valid lvalue\nin the parameter slot so it can be overwritten in the caller, or\nan exception will be raised.\n\nopen2() returns the process ID of the child process.  It doesn't return on\nfailure: it just raises an exception matching C</^open2:/>.  However,\nC<exec> failures in the child are not detected.  You'll have to\ntrap SIGPIPE yourself.\n\nopen2() does not wait for and reap the child process after it exits.\nExcept for short programs where it's acceptable to let the operating system\ntake care of this, you need to do thi"..., 4096) = 4023
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/IPC/Open3.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/IPC/Open3.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/IPC/Open3.pm", {st_mode=S_IFREG|0444, st_size=11565, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/IPC/Open3.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package IPC::Open3;\n\nuse strict;\nno strict 'refs'; # because users pass me bareword filehandles\nour ($VERSION, @ISA, @EXPORT);\n\nrequire Exporter;\n\nuse Carp;\nuse Symbol qw(gensym qualify);\n\n$VERSION\t= 1.05;\n@ISA\t\t= qw(Exporter);\n@EXPORT\t\t= qw(open3);\n\n=head1 NAME\n\nIPC::Open3 - open a process for reading, writing, and error handling using open3()\n\n=head1 SYNOPSIS\n\n    $pid = open3(\\*CHLD_IN, \\*CHLD_OUT, \\*CHLD_ERR,\n\t\t    'some cmd and args', 'optarg', ...);\n\n    my($wtr, $rdr, $err);\n    use Symbol 'gensym'; $err = gensym;\n    $pid = open3($wtr, $rdr, $err,\n\t\t    'some cmd and args', 'optarg', ...);\n\n    waitpid( $pid, 0 );\n    my $child_exit_status = $? >> 8;\n\n=head1 DESCRIPTION\n\nExtremely similar to open2(), open3() spawns the given $cmd and\nconnects CHLD_OUT for reading from the child, CHLD_IN for writing to\nthe child, and CHLD_ERR for errors.  If CHLD_ERR is false, or the\nsame file descriptor as CHLD_OUT, then STDOUT and STDERR of the child\nare on the same filehandle (this means that an autovivified lexical\ncannot be used for the STDERR filehandle, see SYNOPSIS).  The CHLD_IN\nwill have autoflush turned on.\n\nIf CHLD_IN begins with C<< <& >>, then CHLD_IN will be closed in the\nparent, and the child will read from it directly.  If CHLD_OUT or\nCHLD_ERR begins with C<< >& >>, then the child will send output\ndirectly to that filehandle.  In both cases, there will be a dup(2)\ninstead of a pipe(2) made.\n\nIf either reader or writer is the null string, this will be replaced\nby an autogenerated filehandle.  If so, you must pass a valid lvalue\nin the parameter slot so it can be overwritten in the caller, or \nan exception will be raised.\n\nThe filehandles may also be integers, in which case they are understood\nas file descriptors.\n\nopen3() returns the process ID of the child process.  It doesn't return on\nfailure: it just raises an exception matching C</^open3:/>.  However,\nC<exec> failures in the child (such as no such file or permission denied),\nare just reported to CHLD_ERR, as it is not possible to trap them.\n\nIf the chi"..., 4096) = 4096
22042 stat64("/etc/perl/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Symbol.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Symbol.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Symbol.pm", {st_mode=S_IFREG|0444, st_size=4794, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Symbol.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package Symbol;\n\n=head1 NAME\n\nSymbol - manipulate Perl symbols and their names\n\n=head1 SYNOPSIS\n\n    use Symbol;\n\n    $sym = gensym;\n    open($sym, \"filename\");\n    $_ = <$sym>;\n    # etc.\n\n    ungensym $sym;      # no effect\n\n    # replace *FOO{IO} handle but not $FOO, %FOO, etc.\n    *FOO = geniosym;\n\n    print qualify(\"x\"), \"\\n\";              # \"main::x\"\n    print qualify(\"x\", \"FOO\"), \"\\n\";       # \"FOO::x\"\n    print qualify(\"BAR::x\"), \"\\n\";         # \"BAR::x\"\n    print qualify(\"BAR::x\", \"FOO\"), \"\\n\";  # \"BAR::x\"\n    print qualify(\"STDOUT\", \"FOO\"), \"\\n\";  # \"main::STDOUT\" (global)\n    print qualify(\\*x), \"\\n\";              # returns \\*x\n    print qualify(\\*x, \"FOO\"), \"\\n\";       # returns \\*x\n\n    use strict refs;\n    print { qualify_to_ref $fh } \"foo!\\n\";\n    $ref = qualify_to_ref $name, $pkg;\n\n    use Symbol qw(delete_package);\n    delete_package('Foo::Bar');\n    print \"deleted\\n\" unless exists $Foo::{'Bar::'};\n\n=head1 DESCRIPTION\n\nC<Symbol::gensym> creates an anonymous glob and returns a reference\nto it.  Such a glob reference can be used as a file or directory\nhandle.\n\nFor backward compatibility with older implementations that didn't\nsupport anonymous globs, C<Symbol::ungensym> is also provided.\nBut it doesn't do anything.\n\nC<Symbol::geniosym> creates an anonymous IO handle.  This can be\nassigned into an existing glob without affecting the non-IO portions\nof the glob.\n\nC<Symbol::qualify> turns unqualified symbol names into qualified\nvariable names (e.g. \"myvar\" -E<gt> \"MyPackage::myvar\").  If it is given a\nsecond parameter, C<qualify> uses it as the default package;\notherwise, it uses the package of its caller.  Regardless, global\nvariable names (e.g. \"STDOUT\", \"ENV\", \"SIG\") are always qualified with\n\"main::\".\n\nQualification applies only to symbol names (strings).  References are\nleft unchanged under the assumption that they are glob references,\nwhich are qualified by their nature.\n\nC<Symbol::qualify_to_ref> is just like C<Symbol::qualify> except that it\nreturns a glob ref rather than a symbol name, so you "..., 4096) = 4096
22042 read(5, "{\n    my $pkg = shift;\n\n    # expand to full symbol table name if needed\n\n    unless ($pkg =~ /^main::.*::$/) {\n        $pkg = \"main$pkg\"\tif\t$pkg =~ /^::/;\n        $pkg = \"main::$pkg\"\tunless\t$pkg =~ /^main::/;\n        $pkg .= '::'\t\tunless\t$pkg =~ /::$/;\n    }\n\n    my($stem, $leaf) = $pkg =~ m/(.*::)(\\w+::)$/;\n    my $stem_symtab = *{$stem}{HASH};\n    return unless defined $stem_symtab and exists $stem_symtab->{$leaf};\n\n\n    # free all the symbols in the package\n\n    my $leaf_symtab = *{$stem_symtab->{$leaf}}{HASH};\n    foreach my $name (keys %$leaf_symtab) {\n        undef *{$pkg . $name};\n    }\n\n    # delete the symbol table\n\n    %$leaf_symtab = ();\n    delete $stem_symtab->{$leaf};\n}\n\n1;\n", 4096) = 698
22042 read(5, "", 4096)                 = 0
22042 close(5)                          = 0
22042 read(4, "m &open2 by tom christiansen, <tchrist@convex.com>\n# fixed for 5.001 by Ulrich Kunitz <kunitz@mai-koeln.com>\n# ported to Win32 by Ron Schmidt, Merrill Lynch almost ended my career\n# fixed for autovivving FHs, tchrist again\n# allow fd numbers to be used, by Frank Tobin\n# allow '-' as command (c.f. open \"-|\"), by Adam Spiers <perl@adamspiers.org>\n#\n# $Id: open3.pl,v 1.1 1993/11/23 06:26:15 marc Exp $\n#\n# usage: $pid = open3('wtr', 'rdr', 'err' 'some cmd and args', 'optarg', ...);\n#\n# spawn the given $cmd and connect rdr for\n# reading, wtr for writing, and err for errors.\n# if err is '', or the same as rdr, then stdout and\n# stderr of the child are on the same fh.  returns pid\n# of child (or dies on failure).\n\n\n# if wtr begins with '<&', then wtr will be closed in the parent, and\n# the child will read from it directly.  if rdr or err begins with\n# '>&', then the child will send output directly to that fd.  In both\n# cases, there will be a dup() instead of a pipe() made.\n\n\n# WARNING: this is dangerous, as you may block forever\n# unless you are very careful.\n#\n# $wtr is left unbuffered.\n#\n# abort program if\n#   rdr or wtr are null\n#   a system call fails\n\nour $Me = 'open3 (bug)';\t# you should never see this, it's always localized\n\n# Fatal.pm needs to be fixed WRT prototypes.\n\nsub xfork {\n    my $pid = fork;\n    defined $pid or croak \"$Me: fork failed: $!\";\n    return $pid;\n}\n\nsub xpipe {\n    pipe $_[0], $_[1] or croak \"$Me: pipe($_[0], $_[1]) failed: $!\";\n}\n\n# I tried using a * prototype character for the filehandle but it still\n# disallows a bearword while compiling under strict subs.\n\nsub xopen {\n    open $_[0], $_[1] or croak \"$Me: open($_[0], $_[1]) failed: $!\";\n}\n\nsub xclose {\n    close $_[0] or croak \"$Me: close($_[0]) failed: $!\";\n}\n\nsub fh_is_fd {\n    return $_[0] =~ /\\A=?(\\d+)\\z/;\n}\n\nsub xfileno {\n    return $1 if $_[0] =~ /\\A=?(\\d+)\\z/;  # deal with fh just being an fd\n    return fileno $_[0];\n}\n\nuse constant DO_SPAWN => $^O eq 'os2' || $^O eq 'MSWin32';\n\nsub _open3 {\n    local $Me = shift;\n    my($package, "..., 4096) = 4096
22042 stat64("/etc/perl/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/constant.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/constant.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/constant.pm", {st_mode=S_IFREG|0444, st_size=13164, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/constant.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package constant;\nuse 5.005;\nuse strict;\nuse warnings::register;\n\nuse vars qw($VERSION %declared);\n$VERSION = '1.20';\n\n#=======================================================================\n\n# Some names are evil choices.\nmy %keywords = map +($_, 1), qw{ BEGIN INIT CHECK END DESTROY AUTOLOAD };\n$keywords{UNITCHECK}++ if $] > 5.009;\n\nmy %forced_into_main = map +($_, 1),\n    qw{ STDIN STDOUT STDERR ARGV ARGVOUT ENV INC SIG };\n\nmy %forbidden = (%keywords, %forced_into_main);\n\nmy $str_end = $] >= 5.006 ? \"\\\\z\" : \"\\\\Z\";\nmy $normal_constant_name = qr/^_?[^\\W_0-9]\\w*$str_end/;\nmy $tolerable = qr/^[A-Za-z_]\\w*$str_end/;\nmy $boolean = qr/^[01]?$str_end/;\n\nBEGIN {\n    # We'd like to do use constant _CAN_PCS => $] > 5.009002\n    # but that's a bit tricky before we load the constant module :-)\n    # By doing this, we save 1 run time check for *every* call to import.\n    no strict 'refs';\n    my $const = $] > 5.009002;\n    *_CAN_PCS = sub () {$const};\n}\n\n#=======================================================================\n# import() - import symbols into user's namespace\n#\n# What we actually do is define a function in the caller's namespace\n# which returns the value. The function we create will normally\n# be inlined as a constant, thereby avoiding further sub calling \n# overhead.\n#=======================================================================\nsub import {\n    my $class = shift;\n    return unless @_;\t\t\t# Ignore 'use constant;'\n    my $constants;\n    my $multiple  = ref $_[0];\n    my $pkg = caller;\n    my $flush_mro;\n    my $symtab;\n\n    if (_CAN_PCS) {\n\tno strict 'refs';\n\t$symtab = \\%{$pkg . '::'};\n    };\n\n    if ( $multiple ) {\n\tif (ref $_[0] ne 'HASH') {\n\t    require Carp;\n\t    Carp::croak(\"Invalid reference type '\".ref(shift).\"' not 'HASH'\");\n\t}\n\t$constants = shift;\n    } else {\n\tunless (defined $_[0]) {\n\t    require Carp;\n\t    Carp::croak(\"Can't use undef as constant name\");\n\t}\n\t$constants->{+shift} = undef;\n    }\n\n    foreach my $name ( keys %$constants ) {\n\t# Normal constant name\n\tif ($name =~ $normal_cons"..., 4096) = 4096
22042 brk(0x8111000)                    = 0x8111000
22042 stat64("/etc/perl/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/vars.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/vars.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/vars.pm", {st_mode=S_IFREG|0444, st_size=2358, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/vars.pm", O_RDONLY|O_LARGEFILE) = 6
22042 ioctl(6, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f48) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(6, 0, [0], SEEK_CUR)      = 0
22042 read(6, "package vars;\n\nuse 5.006;\n\nour $VERSION = '1.01';\n\nuse warnings::register;\nuse strict qw(vars subs);\n\nsub import {\n    my $callpack = caller;\n    my ($pack, @imports) = @_;\n    my ($sym, $ch);\n    foreach (@imports) {\n        if (($ch, $sym) = /^([\\$\\@\\%\\*\\&])(.+)/) {\n\t    if ($sym =~ /\\W/) {\n\t\t# time for a more-detailed check-up\n\t\tif ($sym =~ /^\\w+[[{].*[]}]$/) {\n\t\t    require Carp;\n\t\t    Carp::croak(\"Can't declare individual elements of hash or array\");\n\t\t} elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {\n\t\t    warnings::warn(\"No need to declare built-in vars\");\n\t\t} elsif  (($^H &= strict::bits('vars'))) {\n\t\t    require Carp;\n\t\t    Carp::croak(\"'$_' is not a valid variable name under strict vars\");\n\t\t}\n\t    }\n\t    $sym = \"${callpack}::$sym\" unless $sym =~ /::/;\n\t    *$sym =\n\t\t(  $ch eq \"\\$\" ? \\$$sym\n\t\t : $ch eq \"\\@\" ? \\@$sym\n\t\t : $ch eq \"\\%\" ? \\%$sym\n\t\t : $ch eq \"\\*\" ? \\*$sym\n\t\t : $ch eq \"\\&\" ? \\&$sym \n\t\t : do {\n\t\t     require Carp;\n\t\t     Carp::croak(\"'$_' is not a valid variable name\");\n\t\t });\n\t} else {\n\t    require Carp;\n\t    Carp::croak(\"'$_' is not a valid variable name\");\n\t}\n    }\n};\n\n1;\n__END__\n\n=head1 NAME\n\nvars - Perl pragma to predeclare global variable names (obsolete)\n\n=head1 SYNOPSIS\n\n    use vars qw($frob @mung %seen);\n\n=head1 DESCRIPTION\n\nNOTE: For variables in the current package, the functionality provided\nby this pragma has been superseded by C<our> declarations, available\nin Perl v5.6.0 or later.  See L<perlfunc/our>.\n\nThis will predeclare all the variables whose names are \nin the list, allowing you to use them under \"use strict\", and\ndisabling any typo warnings.\n\nUnlike pragmas that affect the C<$^H> hints variable, the C<use vars> and\nC<use subs> declarations are not BLOCK-scoped.  They are thus effective\nfor the entire file in which they appear.  You may not rescind such\ndeclarations with C<no vars> or C<no subs>.\n\nPackages such as the B<AutoLoader> and B<SelfLoader> that delay\nloading of subroutines within packages can create problems with\npackage lexicals defin"..., 4096) = 2358
22042 _llseek(6, 1148, [1148], SEEK_SET) = 0
22042 _llseek(6, 0, [1148], SEEK_CUR)   = 0
22042 close(6)                          = 0
22042 read(5, " once if we make any direct symbol table changes.\n    mro::method_changed_in($pkg) if _CAN_PCS && $flush_mro;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nconstant - Perl pragma to declare constants\n\n=head1 SYNOPSIS\n\n    use constant PI    => 4 * atan2(1, 1);\n    use constant DEBUG => 0;\n\n    print \"Pi equals \", PI, \"...\\n\" if DEBUG;\n\n    use constant {\n        SEC   => 0,\n        MIN   => 1,\n        HOUR  => 2,\n        MDAY  => 3,\n        MON   => 4,\n        YEAR  => 5,\n        WDAY  => 6,\n        YDAY  => 7,\n        ISDST => 8,\n    };\n\n    use constant WEEKDAYS => qw(\n        Sunday Monday Tuesday Wednesday Thursday Friday Saturday\n    );\n\n    print \"Today is \", (WEEKDAYS)[ (localtime)[WDAY] ], \".\\n\";\n\n=head1 DESCRIPTION\n\nThis pragma allows you to declare constants at compile-time.\n\nWhen you declare a constant such as C<PI> using the method shown\nabove, each machine your script runs upon can have as many digits\nof accuracy as it can use. Also, your program will be easier to\nread, more likely to be maintained (and maintained correctly), and\nfar less likely to send a space probe to the wrong planet because\nnobody noticed the one equation in which you wrote C<3.14195>.\n\nWhen a constant is used in an expression, Perl replaces it with its\nvalue at compile time, and may then optimize the expression further.\nIn particular, any code in an C<if (CONSTANT)> block will be optimized\naway if the constant is false.\n\n=head1 NOTES\n\nAs with all C<use> directives, defining a constant happens at\ncompile time. Thus, it's probably not correct to put a constant\ndeclaration inside of a conditional statement (like C<if ($foo)\n{ use constant ... }>).\n\nConstants defined using this module cannot be interpolated into\nstrings like variables.  However, concatenation works just fine:\n\n    print \"Pi equals PI...\\n\";        # WRONG: does not expand \"PI\"\n    print \"Pi equals \".PI.\"...\\n\";    # right\n\nEven though a reference may be declared as a constant, the reference may\npoint to data which may be changed, as this code shows.\n\n    use constant ARRAY => [ 1,2,"..., 4096) = 4096
22042 _llseek(5, 4221, [4221], SEEK_SET) = 0
22042 _llseek(5, 0, [4221], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 read(4, "pen \\*STDOUT, \">&=\" . fileno $kid_wtr;\n\t}\n\tif ($dad_rdr ne $dad_err) {\n\t    if ($dup_err) {\n\t\t# I have to use a fileno here because in this one case\n\t\t# I'm doing a dup but the filehandle might be a reference\n\t\t# (from the special case above).\n\t\txopen \\*STDERR, \">&\" . xfileno($dad_err)\n\t\t    if fileno(STDERR) != xfileno($dad_err);\n\t    } else {\n\t\txclose $dad_err;\n\t\txopen \\*STDERR, \">&=\" . fileno $kid_err;\n\t    }\n\t} else {\n\t    xopen \\*STDERR, \">&STDOUT\" if fileno(STDERR) != fileno(STDOUT);\n\t}\n\treturn 0 if ($cmd[0] eq '-');\n\tlocal($\")=(\" \");\n\texec @cmd or do {\n\t    carp \"$Me: exec of @cmd failed\";\n\t    eval { require POSIX; POSIX::_exit(255); };\n\t    exit 255;\n\t};\n    } elsif (DO_SPAWN) {\n\t# All the bookkeeping of coincidence between handles is\n\t# handled in spawn_with_handles.\n\n\tmy @close;\n\tif ($dup_wtr) {\n\t  $kid_rdr = \\*{$dad_wtr};\n\t  push @close, $kid_rdr;\n\t} else {\n\t  push @close, \\*{$dad_wtr}, $kid_rdr;\n\t}\n\tif ($dup_rdr) {\n\t  $kid_wtr = \\*{$dad_rdr};\n\t  push @close, $kid_wtr;\n\t} else {\n\t  push @close, \\*{$dad_rdr}, $kid_wtr;\n\t}\n\tif ($dad_rdr ne $dad_err) {\n\t    if ($dup_err) {\n\t      $kid_err = \\*{$dad_err};\n\t      push @close, $kid_err;\n\t    } else {\n\t      push @close, \\*{$dad_err}, $kid_err;\n\t    }\n\t} else {\n\t  $kid_err = $kid_wtr;\n\t}\n\trequire IO::Pipe;\n\t$kidpid = eval {\n\t    spawn_with_handles( [ { mode => 'r',\n\t\t\t\t    open_as => $kid_rdr,\n\t\t\t\t    handle => \\*STDIN },\n\t\t\t\t  { mode => 'w',\n\t\t\t\t    open_as => $kid_wtr,\n\t\t\t\t    handle => \\*STDOUT },\n\t\t\t\t  { mode => 'w',\n\t\t\t\t    open_as => $kid_err,\n\t\t\t\t    handle => \\*STDERR },\n\t\t\t\t], \\@close, @cmd);\n\t};\n\tdie \"$Me: $@\" if $@;\n    }\n\n    xclose $kid_rdr if !$dup_wtr;\n    xclose $kid_wtr if !$dup_rdr;\n    xclose $kid_err if !$dup_err && $dad_rdr ne $dad_err;\n    # If the write handle is a dup give it away entirely, close my copy\n    # of it.\n    xclose $dad_wtr if $dup_wtr;\n\n    select((select($dad_wtr), $| = 1)[0]); # unbuffer pipe\n    $kidpid;\n}\n\nsub open3 {\n    if (@_ < 4) {\n\tlocal $\" = ', ';\n\tcroak \"open3(@_): not enough arguments\";\n    }\n    return _open"..., 4096) = 3373
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/POSIX.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/POSIX.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/POSIX.pm", {st_mode=S_IFREG|0444, st_size=21011, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/POSIX.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package POSIX;\nuse strict;\nuse warnings;\n\nour(@ISA, %EXPORT_TAGS, @EXPORT_OK, @EXPORT, $AUTOLOAD, %SIGRT) = ();\n\nour $VERSION = \"1.19\";\n\nuse AutoLoader;\n\nuse XSLoader ();\n\nuse Fcntl qw(FD_CLOEXEC F_DUPFD F_GETFD F_GETFL F_GETLK F_RDLCK F_SETFD\n\t     F_SETFL F_SETLK F_SETLKW F_UNLCK F_WRLCK O_ACCMODE O_APPEND\n\t     O_CREAT O_EXCL O_NOCTTY O_NONBLOCK O_RDONLY O_RDWR O_TRUNC\n\t     O_WRONLY SEEK_CUR SEEK_END SEEK_SET\n\t     S_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISREG\n\t     S_IRGRP S_IROTH S_IRUSR S_IRWXG S_IRWXO S_IRWXU S_ISGID S_ISUID\n\t     S_IWGRP S_IWOTH S_IWUSR S_IXGRP S_IXOTH S_IXUSR);\n\n# Grandfather old foo_h form to new :foo_h form\nmy $loaded;\n\nsub import {\n    load_imports() unless $loaded++;\n    my $this = shift;\n    my @list = map { m/^\\w+_h$/ ? \":$_\" : $_ } @_;\n    local $Exporter::ExportLevel = 1;\n    Exporter::import($this,@list);\n}\n\nsub croak { require Carp;  goto &Carp::croak }\n# declare usage to assist AutoLoad\nsub usage;\n\nXSLoader::load 'POSIX', $VERSION;\n\nsub AUTOLOAD {\n    no strict;\n    no warnings 'uninitialized';\n    if ($AUTOLOAD =~ /::(_?[a-z])/) {\n\t# require AutoLoader;\n\t$AutoLoader::AUTOLOAD = $AUTOLOAD;\n\tgoto &AutoLoader::AUTOLOAD\n    }\n    local $! = 0;\n    my $constname = $AUTOLOAD;\n    $constname =~ s/.*:://;\n    my ($error, $val) = constant($constname);\n    croak $error if $error;\n    *$AUTOLOAD = sub { $val };\n\n    goto &$AUTOLOAD;\n}\n\npackage POSIX::SigAction;\n\nuse AutoLoader 'AUTOLOAD';\n\npackage POSIX::SigRt;\n\nuse AutoLoader 'AUTOLOAD';\n\nuse Tie::Hash;\n\nuse vars qw($SIGACTION_FLAGS $_SIGRTMIN $_SIGRTMAX $_sigrtn @ISA);\n@POSIX::SigRt::ISA = qw(Tie::StdHash);\n\n$SIGACTION_FLAGS = 0;\n\ntie %POSIX::SIGRT, 'POSIX::SigRt';\n\nsub DESTROY {};\n\npackage POSIX;\n\n1;\n__END__\n\nsub usage {\n    my ($mess) = @_;\n    croak \"Usage: POSIX::$mess\";\n}\n\nsub redef {\n    my ($mess) = @_;\n    croak \"Use method $mess instead\";\n}\n\nsub unimpl {\n    my ($mess) = @_;\n    $mess =~ s/xxx//;\n    croak \"Unimplemented: POSIX::$mess\";\n}\n\nsub assert {\n    usage \"assert(expr)\" if @_ != 1;\n    if (!$_[0]) {\n\tcroak \"Assertion faile"..., 4096) = 4096
22042 stat64("/etc/perl/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/AutoLoader.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/AutoLoader.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/AutoLoader.pm", {st_mode=S_IFREG|0444, st_size=15003, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/AutoLoader.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package AutoLoader;\n\nuse strict;\nuse 5.006_001;\n\nour($VERSION, $AUTOLOAD);\n\nmy $is_dosish;\nmy $is_epoc;\nmy $is_vms;\nmy $is_macos;\n\nBEGIN {\n    $is_dosish = $^O eq 'dos' || $^O eq 'os2' || $^O eq 'MSWin32' || $^O eq 'NetWare';\n    $is_epoc = $^O eq 'epoc';\n    $is_vms = $^O eq 'VMS';\n    $is_macos = $^O eq 'MacOS';\n    $VERSION = '5.70';\n}\n\nAUTOLOAD {\n    my $sub = $AUTOLOAD;\n    my $filename = AutoLoader::find_filename( $sub );\n\n    my $save = $@;\n    local $!; # Do not munge the value. \n    eval { local $SIG{__DIE__}; require $filename };\n    if ($@) {\n\tif (substr($sub,-9) eq '::DESTROY') {\n\t    no strict 'refs';\n\t    *$sub = sub {};\n\t    $@ = undef;\n\t} elsif ($@ =~ /^Can't locate/) {\n\t    # The load might just have failed because the filename was too\n\t    # long for some old SVR3 systems which treat long names as errors.\n\t    # If we can successfully truncate a long name then it's worth a go.\n\t    # There is a slight risk that we could pick up the wrong file here\n\t    # but autosplit should have warned about that when splitting.\n\t    if ($filename =~ s/(\\w{12,})\\.al$/substr($1,0,11).\".al\"/e){\n\t\teval { local $SIG{__DIE__}; require $filename };\n\t    }\n\t}\n\tif ($@){\n\t    $@ =~ s/ at .*\\n//;\n\t    my $error = $@;\n\t    require Carp;\n\t    Carp::croak($error);\n\t}\n    }\n    $@ = $save;\n    goto &$sub;\n}\n\nsub find_filename {\n    my $sub = shift;\n    my $filename;\n    # Braces used to preserve $1 et al.\n    {\n\t# Try to find the autoloaded file from the package-qualified\n\t# name of the sub. e.g., if the sub needed is\n\t# Getopt::Long::GetOptions(), then $INC{Getopt/Long.pm} is\n\t# something like '/usr/lib/perl5/Getopt/Long.pm', and the\n\t# autoload file is '/usr/lib/perl5/auto/Getopt/Long/GetOptions.al'.\n\t#\n\t# However, if @INC is a relative path, this might not work.  If,\n\t# for example, @INC = ('lib'), then $INC{Getopt/Long.pm} is\n\t# 'lib/Getopt/Long.pm', and we want to require\n\t# 'auto/Getopt/Long/GetOptions.al' (without the leading 'lib').\n\t# In this case, we simple prepend the 'auto/' and let the\n\t# C<require> take care of"..., 4096) = 4096
22042 read(5, "owever, if @INC is a relative path, this might not work.  If,\n    # for example, @INC = ('lib'), then\n    # $INC{POSIX.pm} is 'lib/POSIX.pm', and we want to require\n    # 'auto/POSIX/autosplit.ix' (without the leading 'lib').\n    #\n\n    (my $calldir = $callpkg) =~ s#::#/#g;\n    my $path = $INC{$calldir . '.pm'};\n    if (defined($path)) {\n\t# Try absolute path name, but only eval it if the\n        # transformation from module path to autosplit.ix path\n        # succeeded!\n\tmy $replaced_okay;\n\tif ($is_macos) {\n\t    (my $malldir = $calldir) =~ tr#/#:#;\n\t    $replaced_okay = ($path =~ s#^(.*)$malldir\\.pm\\z#$1auto:$malldir:autosplit.ix#s);\n\t} else {\n\t    $replaced_okay = ($path =~ s#^(.*)$calldir\\.pm\\z#$1auto/$calldir/autosplit.ix#);\n\t}\n\n\teval { require $path; } if $replaced_okay;\n\t# If that failed, try relative path with normal @INC searching.\n\tif (!$replaced_okay or $@) {\n\t    $path =\"auto/$calldir/autosplit.ix\";\n\t    eval { require $path; };\n\t}\n\tif ($@) {\n\t    my $error = $@;\n\t    require Carp;\n\t    Carp::carp($error);\n\t}\n    } \n}\n\nsub unimport {\n    my $callpkg = caller;\n\n    no strict 'refs';\n\n    for my $exported (qw( AUTOLOAD )) {\n\tmy $symname = $callpkg . '::' . $exported;\n\tundef *{ $symname } if \\&{ $symname } == \\&{ $exported };\n\t*{ $symname } = \\&{ $symname };\n    }\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nAutoLoader - load subroutines only on demand\n\n=head1 SYNOPSIS\n\n    package Foo;\n    use AutoLoader 'AUTOLOAD';   # import the default AUTOLOAD subroutine\n\n    package Bar;\n    use AutoLoader;              # don't import AUTOLOAD, define our own\n    sub AUTOLOAD {\n        ...\n        $AutoLoader::AUTOLOAD = \"...\";\n        goto &AutoLoader::AUTOLOAD;\n    }\n\n=head1 DESCRIPTION\n\nThe B<AutoLoader> module works with the B<AutoSplit> module and the\nC<__END__> token to defer the loading of some subroutines until they are\nused rather than loading them all at once.\n\nTo use B<AutoLoader>, the author of a module has to place the\ndefinitions of subroutines to be autoloaded after an C<__END__> token.\n(See L<perldata>.)  The B<AutoS"..., 4096) = 4096
22042 _llseek(5, 5403, [5403], SEEK_SET) = 0
22042 _llseek(5, 0, [5403], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/autosplit.ix", {st_mode=S_IFREG|0444, st_size=2463, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/autosplit.ix", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "# Index created by AutoSplit for ../../lib/POSIX.pm\n#    (file acts as timestamp)\npackage POSIX;\nsub usage  ;\nsub redef  ;\nsub unimpl  ;\nsub assert  ;\nsub tolower  ;\nsub toupper  ;\nsub closedir  ;\nsub opendir  ;\nsub readdir  ;\nsub rewinddir  ;\nsub errno  ;\nsub creat  ;\nsub fcntl  ;\nsub getgrgid  ;\nsub getgrnam  ;\nsub atan2  ;\nsub cos  ;\nsub exp  ;\nsub fabs  ;\nsub log  ;\nsub pow  ;\nsub sin  ;\nsub sqrt  ;\nsub getpwnam  ;\nsub getpwuid  ;\nsub longjmp  ;\nsub setjmp  ;\nsub siglongjmp  ;\nsub sigsetjmp  ;\nsub kill  ;\nsub raise  ;\nsub offsetof  ;\nsub clearerr  ;\nsub fclose  ;\nsub fdopen  ;\nsub feof  ;\nsub fgetc  ;\nsub fgets  ;\nsub fileno  ;\nsub fopen  ;\nsub fprintf  ;\nsub fputc  ;\nsub fputs  ;\nsub fread  ;\nsub freopen  ;\nsub fscanf  ;\nsub fseek  ;\nsub fsync  ;\nsub ferror  ;\nsub fflush  ;\nsub fgetpos  ;\nsub fsetpos  ;\nsub ftell  ;\nsub fwrite  ;\nsub getc  ;\nsub getchar  ;\nsub gets  ;\nsub perror  ;\nsub printf  ;\nsub putc  ;\nsub putchar  ;\nsub puts  ;\nsub remove  ;\nsub rename  ;\nsub rewind  ;\nsub scanf  ;\nsub sprintf  ;\nsub sscanf  ;\nsub tmpfile  ;\nsub ungetc  ;\nsub vfprintf  ;\nsub vprintf  ;\nsub vsprintf  ;\nsub abs  ;\nsub atexit  ;\nsub atof  ;\nsub atoi  ;\nsub atol  ;\nsub bsearch  ;\nsub calloc  ;\nsub div  ;\nsub exit  ;\nsub free  ;\nsub getenv  ;\nsub labs  ;\nsub ldiv  ;\nsub malloc  ;\nsub qsort  ;\nsub rand  ;\nsub realloc  ;\nsub srand  ;\nsub system  ;\nsub memchr  ;\nsub memcmp  ;\nsub memcpy  ;\nsub memmove  ;\nsub memset  ;\nsub strcat  ;\nsub strchr  ;\nsub strcmp  ;\nsub strcpy  ;\nsub strcspn  ;\nsub strerror  ;\nsub strlen  ;\nsub strncat  ;\nsub strncmp  ;\nsub strncpy  ;\nsub strpbrk  ;\nsub strrchr  ;\nsub strspn  ;\nsub strstr  ;\nsub strtok  ;\nsub chmod  ;\nsub fstat  ;\nsub mkdir  ;\nsub stat  ;\nsub umask  ;\nsub wait  ;\nsub waitpid  ;\nsub gmtime  ;\nsub localtime  ;\nsub time  ;\nsub alarm  ;\nsub chdir  ;\nsub chown  ;\nsub execl  ;\nsub execle  ;\nsub execlp  ;\nsub execv  ;\nsub execve  ;\nsub execvp  ;\nsub fork  ;\nsub getegid  ;\nsub geteuid  ;\nsub getgid  ;\nsub getgroups  ;\nsub getlogin  ;\nsub getpgrp  ;\nsub getpid  ;\nsub getppid  ;\nsub getuid  ;\n"..., 4096) = 2463
22042 read(5, "", 4096)                 = 0
22042 close(5)                          = 0
22042 stat64("/etc/perl/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Fcntl.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Fcntl.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Fcntl.pm", {st_mode=S_IFREG|0444, st_size=5445, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Fcntl.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 brk(0x8132000)                    = 0x8132000
22042 read(5, "package Fcntl;\n\n=head1 NAME\n\nFcntl - load the C Fcntl.h defines\n\n=head1 SYNOPSIS\n\n    use Fcntl;\n    use Fcntl qw(:DEFAULT :flock);\n\n=head1 DESCRIPTION\n\nThis module is just a translation of the C F<fcntl.h> file.\nUnlike the old mechanism of requiring a translated F<fcntl.ph>\nfile, this uses the B<h2xs> program (see the Perl source distribution)\nand your native C compiler.  This means that it has a \nfar more likely chance of getting the numbers right.\n\n=head1 NOTE\n\nOnly C<#define> symbols get translated; you must still correctly\npack up your own arguments to pass as args for locking functions, etc.\n\n=head1 EXPORTED SYMBOLS\n\nBy default your system's F_* and O_* constants (eg, F_DUPFD and\nO_CREAT) and the FD_CLOEXEC constant are exported into your namespace.\n\nYou can request that the flock() constants (LOCK_SH, LOCK_EX, LOCK_NB\nand LOCK_UN) be provided by using the tag C<:flock>.  See L<Exporter>.\n\nYou can request that the old constants (FAPPEND, FASYNC, FCREAT,\nFDEFER, FEXCL, FNDELAY, FNONBLOCK, FSYNC, FTRUNC) be provided for\ncompatibility reasons by using the tag C<:Fcompat>.  For new\napplications the newer versions of these constants are suggested\n(O_APPEND, O_ASYNC, O_CREAT, O_DEFER, O_EXCL, O_NDELAY, O_NONBLOCK,\nO_SYNC, O_TRUNC).\n\nFor ease of use also the SEEK_* constants (for seek() and sysseek(),\ne.g. SEEK_END) and the S_I* constants (for chmod() and stat()) are\navailable for import.  They can be imported either separately or using\nthe tags C<:seek> and C<:mode>.\n\nPlease refer to your native fcntl(2), open(2), fseek(3), lseek(2)\n(equal to Perl's seek() and sysseek(), respectively), and chmod(2)\ndocumentation to see what constants are implemented in your system.\n\nSee L<perlopentut> to learn about the uses of the O_* constants\nwith sysopen().\n\nSee L<perlfunc/seek> and L<perlfunc/sysseek> about the SEEK_* constants.\n\nSee L<perlfunc/stat> about the S_I* constants.\n\n=cut\n\nuse strict;\nour($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS, $AUTOLOAD);\n\nrequire Exporter;\nuse XSLoader ();\n@ISA = qw(Exporter);\nBEGIN {\n"..., 4096) = 4096
22042 read(5, "T S_ENFMT\n\t\t     S_IRUSR S_IWUSR S_IXUSR S_IRWXU\n\t\t     S_IRGRP S_IWGRP S_IXGRP S_IRWXG\n\t\t     S_IROTH S_IWOTH S_IXOTH S_IRWXO\n\t\t     S_IREAD S_IWRITE S_IEXEC\n\t\t     S_ISREG S_ISDIR S_ISLNK S_ISSOCK\n\t\t     S_ISBLK S_ISCHR S_ISFIFO\n\t\t     S_ISWHT S_ISENFMT\t\t\n\t\t     S_IFMT S_IMODE\n                  )],\n);\n\n# Force the constants to become inlined\nBEGIN {\n  XSLoader::load 'Fcntl', $VERSION;\n}\n\nsub S_IFMT  { @_ ? ( $_[0] & _S_IFMT() ) : _S_IFMT()  }\nsub S_IMODE { $_[0] & 07777 }\n\nsub S_ISREG    { ( $_[0] & _S_IFMT() ) == S_IFREG()   }\nsub S_ISDIR    { ( $_[0] & _S_IFMT() ) == S_IFDIR()   }\nsub S_ISLNK    { ( $_[0] & _S_IFMT() ) == S_IFLNK()   }\nsub S_ISSOCK   { ( $_[0] & _S_IFMT() ) == S_IFSOCK()  }\nsub S_ISBLK    { ( $_[0] & _S_IFMT() ) == S_IFBLK()   }\nsub S_ISCHR    { ( $_[0] & _S_IFMT() ) == S_IFCHR()   }\nsub S_ISFIFO   { ( $_[0] & _S_IFMT() ) == S_IFIFO()   }\nsub S_ISWHT    { ( $_[0] & _S_IFMT() ) == S_IFWHT()   }\nsub S_ISENFMT  { ( $_[0] & _S_IFMT() ) == S_IFENFMT() }\n\nsub AUTOLOAD {\n    (my $constname = $AUTOLOAD) =~ s/.*:://;\n    die \"&Fcntl::constant not defined\" if $constname eq 'constant';\n    my ($error, $val) = constant($constname);\n    if ($error) {\n        my (undef,$file,$line) = caller;\n        die \"$error at $file line $line.\\n\";\n    }\n    no strict 'refs';\n    *$AUTOLOAD = sub { $val };\n    goto &$AUTOLOAD;\n}\n\n1;\n", 4096) = 1349
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Fcntl/Fcntl.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Fcntl/Fcntl.so", {st_mode=S_IFREG|0555, st_size=13748, ...}) = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Fcntl/Fcntl.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/5.12.4/i686-linux/auto/Fcntl/Fcntl.so", O_RDONLY|O_CLOEXEC) = 6
22042 read(6, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\240\17\0\0004\0\0\0|1\0\0\0\0\0\0004\0 \0\6\0(\0\33\0\32\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0x\37\0\0x\37\0\0\5\0\0\0\0\20\0\0\1\0\0\0\0)\0\0\0)\0\0\0)\0\0l\7\0\0t\7\0\0\6\0\0\0\0\20\0\0\2\0\0\0\370.\0\0\370.\0\0\370.\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\0)\0\0\0)\0\0\0)\0\0\0\7\0\0\0\7\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0?\0\0\0*\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\35\0\0\0\34\0\0\0%\0\0\0\"\0\0\0\37\0\0\0\16\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0!\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\0\0\0\0(\0\0\0\3\0\0\0\36\0\0\0'\0\0\0\0\0\0\0\t\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0&\0\0\0)\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\6\0\0\0\0\0\0\0\0\0\0\0#\0\0\0\0\0\0\0\21\0\0\0\24\0\0\0\30\0\0\0\31\0\0\0\27\0\0\0\0\0\0\0\32\0\0\0\26\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\0\0\4\0\0\0\5\0\0\0\7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\33\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0", 512) = 512
22042 fstat64(6, {st_mode=S_IFREG|0555, st_size=13748, ...}) = 0
22042 mmap2(NULL, 12404, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 6, 0) = 0xb778b000
22042 mmap2(0xb778d000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 6, 0x2) = 0xb778d000
22042 close(6)                          = 0
22042 mprotect(0xb778d000, 4096, PROT_READ) = 0
22042 read(5, "", 4096)                 = 0
22042 close(5)                          = 0
22042 stat64("/etc/perl/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Tie/Hash.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Tie/Hash.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Tie/Hash.pm", {st_mode=S_IFREG|0444, st_size=7311, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Tie/Hash.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package Tie::Hash;\n\nour $VERSION = '1.03';\n\n=head1 NAME\n\nTie::Hash, Tie::StdHash, Tie::ExtraHash - base class definitions for tied hashes\n\n=head1 SYNOPSIS\n\n    package NewHash;\n    require Tie::Hash;\n\n    @ISA = qw(Tie::Hash);\n\n    sub DELETE { ... }\t\t# Provides needed method\n    sub CLEAR { ... }\t\t# Overrides inherited method\n\n\n    package NewStdHash;\n    require Tie::Hash;\n\n    @ISA = qw(Tie::StdHash);\n\n    # All methods provided by default, define only those needing overrides\n    # Accessors access the storage in %{$_[0]};\n    # TIEHASH should return a reference to the actual storage\n    sub DELETE { ... }\n\n    package NewExtraHash;\n    require Tie::Hash;\n\n    @ISA = qw(Tie::ExtraHash);\n\n    # All methods provided by default, define only those needing overrides\n    # Accessors access the storage in %{$_[0][0]};\n    # TIEHASH should return an array reference with the first element being\n    # the reference to the actual storage \n    sub DELETE { \n      $_[0][1]->('del', $_[0][0], $_[1]); # Call the report writer\n      delete $_[0][0]->{$_[1]};\t\t  #  $_[0]->SUPER::DELETE($_[1])\n    }\n\n\n    package main;\n\n    tie %new_hash, 'NewHash';\n    tie %new_std_hash, 'NewStdHash';\n    tie %new_extra_hash, 'NewExtraHash',\n\tsub {warn \"Doing \\U$_[1]\\E of $_[2].\\n\"};\n\n=head1 DESCRIPTION\n\nThis module provides some skeletal methods for hash-tying classes. See\nL<perltie> for a list of the functions required in order to tie a hash\nto a package. The basic B<Tie::Hash> package provides a C<new> method, as well\nas methods C<TIEHASH>, C<EXISTS> and C<CLEAR>. The B<Tie::StdHash> and\nB<Tie::ExtraHash> packages\nprovide most methods for hashes described in L<perltie> (the exceptions\nare C<UNTIE> and C<DESTROY>).  They cause tied hashes to behave exactly like standard hashes,\nand allow for selective overwriting of methods.  B<Tie::Hash> grandfathers the\nC<new> method: it is used if C<TIEHASH> is not defined\nin the case a class forgets to include a C<TIEHASH> method.\n\nFor developers wishing to write their own tied hashes, the required metho"..., 4096) = 4096
22042 read(5, " reference, and the remaining methods should operate on the\nhash C<< %{ $_[0]->[0] } >>:\n\n  package ReportHash;\n  our @ISA = 'Tie::ExtraHash';\n\n  sub TIEHASH  {\n    my $class = shift;\n    my $storage = bless [{}, @_], $class;\n    warn \"New ReportHash created, stored in $storage.\\n\";\n    $storage;\n  }\n  sub STORE    {\n    warn \"Storing data with key $_[1] at $_[0].\\n\";\n    $_[0][0]{$_[1]} = $_[2]\n  }\n\nThe default C<TIEHASH> method stores \"extra\" arguments to tie() starting\nfrom offset 1 in the array referenced by C<tied(%tiedhash)>; this is the\nsame storage algorithm as in TIEHASH subroutine above.  Hence, a typical\npackage inheriting from B<Tie::ExtraHash> does not need to overwrite this\nmethod.\n\n=head1 C<SCALAR>, C<UNTIE> and C<DESTROY>\n\nThe methods C<UNTIE> and C<DESTROY> are not defined in B<Tie::Hash>,\nB<Tie::StdHash>, or B<Tie::ExtraHash>.  Tied hashes do not require\npresence of these methods, but if defined, the methods will be called in\nproper time, see L<perltie>.\n\nC<SCALAR> is only defined in B<Tie::StdHash> and B<Tie::ExtraHash>.\n\nIf needed, these methods should be defined by the package inheriting from\nB<Tie::Hash>, B<Tie::StdHash>, or B<Tie::ExtraHash>. See L<perltie/\"SCALAR\">\nto find out what happens when C<SCALAR> does not exist.\n\n=head1 MORE INFORMATION\n\nThe packages relating to various DBM-related implementations (F<DB_File>,\nF<NDBM_File>, etc.) show examples of general tied hashes, as does the\nL<Config> module. While these do not utilize B<Tie::Hash>, they serve as\ngood working examples.\n\n=cut\n\nuse Carp;\nuse warnings::register;\n\nsub new {\n    my $pkg = shift;\n    $pkg->TIEHASH(@_);\n}\n\n# Grandfather \"new\"\n\nsub TIEHASH {\n    my $pkg = shift;\n    if (defined &{\"${pkg}::new\"}) {\n\twarnings::warnif(\"WARNING: calling ${pkg}->new since ${pkg}->TIEHASH is missing\");\n\t$pkg->new(@_);\n    }\n    else {\n\tcroak \"$pkg doesn't define a TIEHASH method\";\n    }\n}\n\nsub EXISTS {\n    my $pkg = ref $_[0];\n    croak \"$pkg doesn't define an EXISTS method\";\n}\n\nsub CLEAR {\n    my $self = shift;\n    my $key = $self->FIRSTKEY"..., 4096) = 3215
22042 read(5, "", 4096)                 = 0
22042 close(5)                          = 0
22042 _llseek(4, 1713, [1713], SEEK_SET) = 0
22042 _llseek(4, 0, [1713], SEEK_CUR)   = 0
22042 close(4)                          = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/POSIX.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/POSIX.so", {st_mode=S_IFREG|0555, st_size=88016, ...}) = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/POSIX.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/POSIX.so", O_RDONLY|O_CLOEXEC) = 4
22042 read(4, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0PV\0\0004\0\0\0\230S\1\0\0\0\0\0004\0 \0\6\0(\0\33\0\32\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3045\1\0\3045\1\0\5\0\0\0\0\20\0\0\1\0\0\0\350=\1\0\350M\1\0\350M\1\0\240\24\0\0\250\24\0\0\6\0\0\0\0\20\0\0\2\0\0\0\10M\1\0\10]\1\0\10]\1\0\320\0\0\0\320\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\350=\1\0\350M\1\0\350M\1\0\30\22\0\0\30\22\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0M\2\0\0-\1\0\0\0\0\0\0\230\0\0\0\0\0\0\0\0\0\0\0\227\0\0\0Y\0\0\0\0\0\0\0\0\0\0\0\34\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\214\0\0\0\0\0\0\0\206\0\0\0\0\0\0\0:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\341\0\0\0\0\0\0\0\0\0\0\0C\0\0\0002\0\0\0\0\0\0\0\0\0\0\0B\0\0\0\0\0\0\0\332\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\253\0\0\0X\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0004\0\0\0\0\0\0\0\344\0\0\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\352\0\0\0(\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 512) = 512
22042 fstat64(4, {st_mode=S_IFREG|0555, st_size=88016, ...}) = 0
22042 mmap2(NULL, 90768, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0xb7774000
22042 mmap2(0xb7788000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x13) = 0xb7788000
22042 close(4)                          = 0
22042 mprotect(0xb7788000, 8192, PROT_READ) = 0
22042 brk(0x8153000)                    = 0x8153000
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/load_imports.al", {st_mode=S_IFREG|0444, st_size=6878, ...}) = 0
22042 getgroups32(0, NULL)              = 12
22042 getgroups32(12, [10, 18, 19, 27, 80, 85, 100, 250, 513, 1005, 1008, 1026]) = 12
22042 open("/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 4
22042 fcntl64(4, F_GETFD)               = 0x1 (flags FD_CLOEXEC)
22042 fstat64(4, {st_mode=S_IFREG|0644, st_size=2570, ...}) = 0
22042 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb724d000
22042 read(4, "# Locale name alias data base.\n# Copyright (C) 1996-2001,2003,2007 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n# The format of this file is the same as for the corresponding file of\n# the X Window System, which normally can be found in\n#\t/usr/lib/X11/locale/locale.alias\n# A single line contains two fields: an alias and a substitution value.\n# All entries are case independent.\n\n# Note: This file is obsolete and is kept around for the time being for\n# backward compatibility.  Nobody should rely on the names defined here.\n# Locales should always be specified by their full name.\n\nbokmal\t\tnb_NO.ISO-8859-1\nbokm\345l\t\tnb_NO.ISO-8859-1\ncatalan\t\tca_ES.ISO-8859-1\ncroatian\thr_HR.ISO-8859-2\nczech\t\tcs_CZ.ISO-8859-2\ndanish          da_DK.ISO-8859-1\ndansk\t\tda_DK.ISO-8859-1\ndeutsch\t\tde_DE.ISO-8859-1\ndutch\t\tnl_NL.ISO-8859-1\neesti\t\tet_EE.ISO-8859-1\nestonian\tet_EE.ISO-8859-1\nfinnish         fi_FI.ISO-8859-1\nfran\347ais\tfr_FR.ISO-8859-1\nfrench\t\tfr_FR.ISO-8859-1\ngalego\t\tgl_ES.ISO-8859-1\ngalician\tgl_ES.ISO-8859-1\ngerman\t\tde_DE.ISO-8859-1\ngreek           el_GR.ISO-8859-7\nhebrew          he_IL.ISO-8859-8\nhrvatski\thr_HR.ISO-8859-2\nhungarian       hu_HU.ISO-8859-2\nicelandic       is_IS.ISO-8859-1\nitalian         it_IT.ISO-8859-1\njapanese\tja_JP.eucJP\njapanese.euc\tja_JP.eucJP\nja_JP\t\tja_JP.eucJP\nja_JP.ujis\tja_JP.eucJP\njapanese.sjis\tja_JP.SJIS\nkorean\t\tko_KR.eucKR\nkorean.euc \tko_KR.eucK"..., 4096) = 2570
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 munmap(0xb724d000, 4096)          = 0
22042 open("/usr/share/locale/es_ES.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
22042 open("/usr/share/locale/es_ES.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
22042 open("/usr/share/locale/es_ES/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
22042 open("/usr/share/locale/es.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
22042 open("/usr/share/locale/es.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)
22042 open("/usr/share/locale/es/LC_MESSAGES/libc.mo", O_RDONLY) = 4
22042 fstat64(4, {st_mode=S_IFREG|0644, st_size=147957, ...}) = 0
22042 mmap2(NULL, 147957, PROT_READ, MAP_PRIVATE, 4, 0) = 0xb7229000
22042 close(4)                          = 0
22042 open("/usr/lib/gconv/gconv-modules.cache", O_RDONLY) = 4
22042 fstat64(4, {st_mode=S_IFREG|0644, st_size=26242, ...}) = 0
22042 mmap2(NULL, 26242, PROT_READ, MAP_SHARED, 4, 0) = 0xb7222000
22042 close(4)                          = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/load_imports.al", {st_mode=S_IFREG|0444, st_size=6878, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/auto/POSIX/load_imports.al", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# NOTE: Derived from ../../lib/POSIX.pm.\n# Changes made here will be lost when autosplit is run again.\n# See AutoSplit.pm.\npackage POSIX;\n\n#line 759 \"../../lib/POSIX.pm (autosplit into ../../lib/auto/POSIX/load_imports.al)\"\nsub load_imports {\n%EXPORT_TAGS = (\n\n    assert_h =>\t[qw(assert NDEBUG)],\n\n    ctype_h =>\t[qw(isalnum isalpha iscntrl isdigit isgraph islower\n\t\tisprint ispunct isspace isupper isxdigit tolower toupper)],\n\n    dirent_h =>\t[],\n\n    errno_h =>\t[qw(E2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT\n\t\tEAGAIN EALREADY EBADF EBUSY ECHILD ECONNABORTED\n\t\tECONNREFUSED ECONNRESET EDEADLK EDESTADDRREQ EDOM EDQUOT\n\t\tEEXIST EFAULT EFBIG EHOSTDOWN EHOSTUNREACH EINPROGRESS\n\t\tEINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK\n\t\tEMSGSIZE ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH\n\t\tENFILE ENOBUFS ENODEV ENOENT ENOEXEC ENOLCK ENOMEM\n\t\tENOPROTOOPT ENOSPC ENOSYS ENOTBLK ENOTCONN ENOTDIR\n\t\tENOTEMPTY ENOTSOCK ENOTTY ENXIO EOPNOTSUPP EPERM\n\t\tEPFNOSUPPORT EPIPE EPROCLIM EPROTONOSUPPORT EPROTOTYPE\n\t\tERANGE EREMOTE ERESTART EROFS ESHUTDOWN ESOCKTNOSUPPORT\n\t\tESPIPE ESRCH ESTALE ETIMEDOUT ETOOMANYREFS ETXTBSY\n\t\tEUSERS EWOULDBLOCK EXDEV errno)],\n\n    fcntl_h =>\t[qw(FD_CLOEXEC F_DUPFD F_GETFD F_GETFL F_GETLK F_RDLCK\n\t\tF_SETFD F_SETFL F_SETLK F_SETLKW F_UNLCK F_WRLCK\n\t\tO_ACCMODE O_APPEND O_CREAT O_EXCL O_NOCTTY O_NONBLOCK\n\t\tO_RDONLY O_RDWR O_TRUNC O_WRONLY\n\t\tcreat\n\t\tSEEK_CUR SEEK_END SEEK_SET\n\t\tS_IRGRP S_IROTH S_IRUSR S_IRWXG S_IRWXO S_IRWXU\n\t\tS_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISGID S_ISREG S_ISUID\n\t\tS_IWGRP S_IWOTH S_IWUSR)],\n\n    float_h =>\t[qw(DBL_DIG DBL_EPSILON DBL_MANT_DIG\n\t\tDBL_MAX DBL_MAX_10_EXP DBL_MAX_EXP\n\t\tDBL_MIN DBL_MIN_10_EXP DBL_MIN_EXP\n\t\tFLT_DIG FLT_EPSILON FLT_MANT_DIG\n\t\tFLT_MAX FLT_MAX_10_EXP FLT_MAX_EXP\n\t\tFLT_MIN FLT_MIN_10_EXP FLT_MIN_EXP\n\t\tFLT_RADIX FLT_ROUNDS\n\t\tLDBL_DIG LDBL_EPSILON LDBL_MANT_DIG\n\t\tLDBL_MAX LDBL_MAX_10_EXP LDBL_MAX_EXP\n\t\tLDBL_MIN LDBL_MIN_10_EXP LDBL_MIN_EXP)],\n\n    grp_h =>\t[],\n\n    limits_h =>\t[qw( ARG_MAX CHAR_BIT CHAR_MAX CHAR_MIN CHILD_MAX\n\t\tINT_MAX INT_MIN LINK_MAX LONG_MAX LON"..., 4096) = 4096
22042 read(4, "trspn strstr\n\t\tstrtok strxfrm)],\n\n    sys_stat_h => [qw(S_IRGRP S_IROTH S_IRUSR S_IRWXG S_IRWXO S_IRWXU\n\t\tS_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISGID S_ISREG\n\t\tS_ISUID S_IWGRP S_IWOTH S_IWUSR S_IXGRP S_IXOTH S_IXUSR\n\t\tfstat mkfifo)],\n\n    sys_times_h => [],\n\n    sys_types_h => [],\n\n    sys_utsname_h => [qw(uname)],\n\n    sys_wait_h => [qw(WEXITSTATUS WIFEXITED WIFSIGNALED WIFSTOPPED\n\t\tWNOHANG WSTOPSIG WTERMSIG WUNTRACED)],\n\n    termios_h => [qw( B0 B110 B1200 B134 B150 B1800 B19200 B200 B2400\n\t\tB300 B38400 B4800 B50 B600 B75 B9600 BRKINT CLOCAL\n\t\tCREAD CS5 CS6 CS7 CS8 CSIZE CSTOPB ECHO ECHOE ECHOK\n\t\tECHONL HUPCL ICANON ICRNL IEXTEN IGNBRK IGNCR IGNPAR\n\t\tINLCR INPCK ISIG ISTRIP IXOFF IXON NCCS NOFLSH OPOST\n\t\tPARENB PARMRK PARODD TCIFLUSH TCIOFF TCIOFLUSH TCION\n\t\tTCOFLUSH TCOOFF TCOON TCSADRAIN TCSAFLUSH TCSANOW\n\t\tTOSTOP VEOF VEOL VERASE VINTR VKILL VMIN VQUIT VSTART\n\t\tVSTOP VSUSP VTIME\n\t\tcfgetispeed cfgetospeed cfsetispeed cfsetospeed tcdrain\n\t\ttcflow tcflush tcgetattr tcsendbreak tcsetattr )],\n\n    time_h =>\t[qw(CLK_TCK CLOCKS_PER_SEC NULL asctime clock ctime\n\t\tdifftime mktime strftime tzset tzname)],\n\n    unistd_h =>\t[qw(F_OK NULL R_OK SEEK_CUR SEEK_END SEEK_SET\n\t\tSTDERR_FILENO STDIN_FILENO STDOUT_FILENO W_OK X_OK\n\t\t_PC_CHOWN_RESTRICTED _PC_LINK_MAX _PC_MAX_CANON\n\t\t_PC_MAX_INPUT _PC_NAME_MAX _PC_NO_TRUNC _PC_PATH_MAX\n\t\t_PC_PIPE_BUF _PC_VDISABLE _POSIX_CHOWN_RESTRICTED\n\t\t_POSIX_JOB_CONTROL _POSIX_NO_TRUNC _POSIX_SAVED_IDS\n\t\t_POSIX_VDISABLE _POSIX_VERSION _SC_ARG_MAX\n\t\t_SC_CHILD_MAX _SC_CLK_TCK _SC_JOB_CONTROL\n\t\t_SC_NGROUPS_MAX _SC_OPEN_MAX _SC_PAGESIZE _SC_SAVED_IDS\n\t\t_SC_STREAM_MAX _SC_TZNAME_MAX _SC_VERSION\n\t\t_exit access ctermid cuserid\n\t\tdup2 dup execl execle execlp execv execve execvp\n\t\tfpathconf fsync getcwd getegid geteuid getgid getgroups\n\t\tgetpid getuid isatty lseek pathconf pause setgid setpgid\n\t\tsetsid setuid sysconf tcgetpgrp tcsetpgrp ttyname)],\n\n    utime_h =>\t[],\n\n);\n\n# Exporter::export_tags();\n{\n  # De-duplicate the export list: \n  my %export;\n  @export{map {@$_} values %EXPORT_TAGS} = ();\n  # Doing t"..., 4096) = 2782
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 brk(0x8174000)                    = 0x8174000
22042 stat64("/etc/perl/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Exporter/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Exporter/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Exporter/Heavy.pm", {st_mode=S_IFREG|0444, st_size=6378, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Exporter/Heavy.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package Exporter::Heavy;\n\nuse strict;\nno strict 'refs';\n\n# On one line so MakeMaker will see it.\nrequire Exporter;  our $VERSION = $Exporter::VERSION;\n\n=head1 NAME\n\nExporter::Heavy - Exporter guts\n\n=head1 SYNOPSIS\n\n(internal use only)\n\n=head1 DESCRIPTION\n\nNo user-serviceable parts inside.\n\n=cut\n\n#\n# We go to a lot of trouble not to 'require Carp' at file scope,\n#  because Carp requires Exporter, and something has to give.\n#\n\nsub _rebuild_cache {\n    my ($pkg, $exports, $cache) = @_;\n    s/^&// foreach @$exports;\n    @{$cache}{@$exports} = (1) x @$exports;\n    my $ok = \\@{\"${pkg}::EXPORT_OK\"};\n    if (@$ok) {\n\ts/^&// foreach @$ok;\n\t@{$cache}{@$ok} = (1) x @$ok;\n    }\n}\n\nsub heavy_export {\n\n    # First make import warnings look like they're coming from the \"use\".\n    local $SIG{__WARN__} = sub {\n\tmy $text = shift;\n\tif ($text =~ s/ at \\S*Exporter\\S*.pm line \\d+.*\\n//) {\n\t    require Carp;\n\t    local $Carp::CarpLevel = 1;\t# ignore package calling us too.\n\t    Carp::carp($text);\n\t}\n\telse {\n\t    warn $text;\n\t}\n    };\n    local $SIG{__DIE__} = sub {\n\trequire Carp;\n\tlocal $Carp::CarpLevel = 1;\t# ignore package calling us too.\n\tCarp::croak(\"$_[0]Illegal null symbol in \\@${1}::EXPORT\")\n\t    if $_[0] =~ /^Unable to create sub named \"(.*?)::\"/;\n    };\n\n    my($pkg, $callpkg, @imports) = @_;\n    my($type, $sym, $cache_is_current, $oops);\n    my($exports, $export_cache) = (\\@{\"${pkg}::EXPORT\"},\n                                   $Exporter::Cache{$pkg} ||= {});\n\n    if (@imports) {\n\tif (!%$export_cache) {\n\t    _rebuild_cache ($pkg, $exports, $export_cache);\n\t    $cache_is_current = 1;\n\t}\n\n\tif (grep m{^[/!:]}, @imports) {\n\t    my $tagsref = \\%{\"${pkg}::EXPORT_TAGS\"};\n\t    my $tagdata;\n\t    my %imports;\n\t    my($remove, $spec, @names, @allexports);\n\t    # negated first item implies starting with default set:\n\t    unshift @imports, ':DEFAULT' if $imports[0] =~ m/^!/;\n\t    foreach $spec (@imports){\n\t\t$remove = $spec =~ s/^!//;\n\n\t\tif ($spec =~ s/^://){\n\t\t    if ($spec eq 'DEFAULT'){\n\t\t\t@names = @$exports;\n\t\t    }\n\t\t    elsif ($tagda"..., 4096) = 4096
22042 read(4, "# barewords twice... both with and without a leading &.\n\t    # (Technique could be applied to $export_cache at cost of memory)\n\t    my @expanded = map { /^\\w/ ? ($_, '&'.$_) : $_ } @$fail;\n\t    warn \"${pkg}::EXPORT_FAIL cached: @expanded\" if $Exporter::Verbose;\n\t    @{$fail_cache}{@expanded} = (1) x @expanded;\n\t}\n\tmy @failed;\n\tforeach $sym (@imports) { push(@failed, $sym) if $fail_cache->{$sym} }\n\tif (@failed) {\n\t    @failed = $pkg->export_fail(@failed);\n\t    foreach $sym (@failed) {\n                require Carp;\n\t\tCarp::carp(qq[\"$sym\" is not implemented by the $pkg module ],\n\t\t\t\"on this architecture\");\n\t    }\n\t    if (@failed) {\n\t\trequire Carp;\n\t\tCarp::croak(\"Can't continue after import errors\");\n\t    }\n\t}\n    }\n\n    warn \"Importing into $callpkg from $pkg: \",\n\t\tjoin(\", \",sort @imports) if $Exporter::Verbose;\n\n    foreach $sym (@imports) {\n\t# shortcut for the common case of no type character\n\t(*{\"${callpkg}::$sym\"} = \\&{\"${pkg}::$sym\"}, next)\n\t    unless $sym =~ s/^(\\W)//;\n\t$type = $1;\n\tno warnings 'once';\n\t*{\"${callpkg}::$sym\"} =\n\t    $type eq '&' ? \\&{\"${pkg}::$sym\"} :\n\t    $type eq '$' ? \\${\"${pkg}::$sym\"} :\n\t    $type eq '@' ? \\@{\"${pkg}::$sym\"} :\n\t    $type eq '%' ? \\%{\"${pkg}::$sym\"} :\n\t    $type eq '*' ?  *{\"${pkg}::$sym\"} :\n\t    do { require Carp; Carp::croak(\"Can't export symbol: $type$sym\") };\n    }\n}\n\nsub heavy_export_to_level\n{\n      my $pkg = shift;\n      my $level = shift;\n      (undef) = shift;\t\t\t# XXX redundant arg\n      my $callpkg = caller($level);\n      $pkg->export($callpkg, @_);\n}\n\n# Utility functions\n\nsub _push_tags {\n    my($pkg, $var, $syms) = @_;\n    my @nontag = ();\n    my $export_tags = \\%{\"${pkg}::EXPORT_TAGS\"};\n    push(@{\"${pkg}::$var\"},\n\tmap { $export_tags->{$_} ? @{$export_tags->{$_}} \n                                 : scalar(push(@nontag,$_),$_) }\n\t\t(@$syms) ? @$syms : keys %$export_tags);\n    if (@nontag and $^W) {\n\t# This may change to a die one day\n\trequire Carp;\n\tCarp::carp(join(\", \", @nontag).\" are not tags of $pkg\");\n    }\n}\n\nsub heavy_require_version {\n    my($self, $want"..., 4096) = 2282
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Find.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Find.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Find.pm", {st_mode=S_IFREG|0444, st_size=39156, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/File/Find.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package File::Find;\nuse 5.006;\nuse strict;\nuse warnings;\nuse warnings::register;\nour $VERSION = '1.15';\nrequire Exporter;\nrequire Cwd;\n\n#\n# Modified to ensure sub-directory traversal order is not inverded by stack\n# push and pops.  That is remains in the same order as in the directory file,\n# or user pre-processing (EG:sorted).\n#\n\n=head1 NAME\n\nFile::Find - Traverse a directory tree.\n\n=head1 SYNOPSIS\n\n    use File::Find;\n    find(\\&wanted, @directories_to_search);\n    sub wanted { ... }\n\n    use File::Find;\n    finddepth(\\&wanted, @directories_to_search);\n    sub wanted { ... }\n\n    use File::Find;\n    find({ wanted => \\&process, follow => 1 }, '.');\n\n=head1 DESCRIPTION\n\nThese are functions for searching through directory trees doing work\non each file found similar to the Unix I<find> command.  File::Find\nexports two functions, C<find> and C<finddepth>.  They work similarly\nbut have subtle differences.\n\n=over 4\n\n=item B<find>\n\n  find(\\&wanted,  @directories);\n  find(\\%options, @directories);\n\nC<find()> does a depth-first search over the given C<@directories> in\nthe order they are given.  For each file or directory found, it calls\nthe C<&wanted> subroutine.  (See below for details on how to use the\nC<&wanted> function).  Additionally, for each directory found, it will\nC<chdir()> into that directory and continue the search, invoking the\nC<&wanted> function on each file or subdirectory in the directory.\n\n=item B<finddepth>\n\n  finddepth(\\&wanted,  @directories);\n  finddepth(\\%options, @directories);\n\nC<finddepth()> works just like C<find()> except that it invokes the\nC<&wanted> function for a directory I<after> invoking it for the\ndirectory's contents.  It does a postorder traversal instead of a\npreorder traversal, working from the bottom of the directory tree up\nwhere C<find()> works from the top of the tree down.\n\n=back\n\n=head2 %options\n\nThe first argument to C<find()> is either a code reference to your\nC<&wanted> function, or a hash reference describing the operations\nto be performed for each file.  The\ncode refere"..., 4096) = 4096
22042 read(4, " fast file checks involving S<_>.\nNote that this guarantee no longer holds if I<follow> or I<follow_fast>\nare not set.\n\n=item *\n\nThere is a variable C<$File::Find::fullname> which holds the absolute\npathname of the file with all symbolic links resolved.  If the link is\na dangling symbolic link, then fullname will be set to C<undef>.\n\n=back\n\nThis is a no-op on Win32.\n\n=item C<follow_fast>\n\nThis is similar to I<follow> except that it may report some files more\nthan once.  It does detect cycles, however.  Since only symbolic links\nhave to be hashed, this is much cheaper both in space and time.  If\nprocessing a file more than once (by the user's C<wanted()> function)\nis worse than just taking time, the option I<follow> should be used.\n\nThis is also a no-op on Win32.\n\n=item C<follow_skip>\n\nC<follow_skip==1>, which is the default, causes all files which are\nneither directories nor symbolic links to be ignored if they are about\nto be processed a second time. If a directory or a symbolic link\nare about to be processed a second time, File::Find dies.\n\nC<follow_skip==0> causes File::Find to die if any file is about to be\nprocessed a second time.\n\nC<follow_skip==2> causes File::Find to ignore any duplicate files and\ndirectories but to proceed normally otherwise.\n\n=item C<dangling_symlinks>\n\nIf true and a code reference, will be called with the symbolic link\nname and the directory it lives in as arguments.  Otherwise, if true\nand warnings are on, warning \"symbolic_link_name is a dangling\nsymbolic link\\n\" will be issued.  If false, the dangling symbolic link\nwill be silently ignored.\n\n=item C<no_chdir>\n\nDoes not C<chdir()> to each directory as it recurses. The C<wanted()>\nfunction will need to be aware of this, of course. In this case,\nC<$_> will be the same as C<$File::Find::name>.\n\n=item C<untaint>\n\nIf find is used in taint-mode (-T command line switch or if EUID != UID\nor if EGID != GID) then internally directory names have to be untainted\nbefore they can be chdir'ed to. Therefore they are checked against a regular\nexpress"..., 4096) = 4096
22042 read(4, "       /                 /\n              /etc               /                 /etc\n              /etc/x             /etc              /etc/x\n\n\nWhen C<follow> or C<follow_fast> are in effect, there is\nalso a C<$File::Find::fullname>.  The function may set\nC<$File::Find::prune> to prune the tree unless C<bydepth> was\nspecified.  Unless C<follow> or C<follow_fast> is specified, for\ncompatibility reasons (find.pl, find2perl) there are in addition the\nfollowing globals available: C<$File::Find::topdir>,\nC<$File::Find::topdev>, C<$File::Find::topino>,\nC<$File::Find::topmode> and C<$File::Find::topnlink>.\n\nThis library is useful for the C<find2perl> tool, which when fed,\n\n    find2perl / -name .nfs\\* -mtime +7 \\\n        -exec rm -f {} \\; -o -fstype nfs -prune\n\nproduces something like:\n\n    sub wanted {\n        /^\\.nfs.*\\z/s &&\n        (($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_)) &&\n        int(-M _) > 7 &&\n        unlink($_)\n        ||\n        ($nlink || (($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_))) &&\n        $dev < 0 &&\n        ($File::Find::prune = 1);\n    }\n\nNotice the C<_> in the above C<int(-M _)>: the C<_> is a magical\nfilehandle that caches the information from the preceding\nC<stat()>, C<lstat()>, or filetest.\n\nHere's another interesting wanted function.  It will find all symbolic\nlinks that don't resolve:\n\n    sub wanted {\n         -l && !-e && print \"bogus link: $File::Find::name\\n\";\n    }\n\nSee also the script C<pfind> on CPAN for a nice application of this\nmodule.\n\n=head1 WARNINGS\n\nIf you run your program with the C<-w> switch, or if you use the\nC<warnings> pragma, File::Find will report warnings for several weird\nsituations. You can disable these warnings by putting the statement\n\n    no warnings 'File::Find';\n\nin the appropriate scope. See L<perllexwarn> for more info about lexical\nwarnings.\n\n=head1 CAVEAT\n\n=over 2\n\n=item $dont_use_nlink\n\nYou can set the variable C<$File::Find::dont_use_nlink> to 1, if you want to\nforce File::Find to always stat directories. This was used for file systems\n"..., 4096) = 4096
22042 read(4, " the volume root level (i.e.\n\"MacintoshHD:\"). These system files are B<not> excluded automatically.\nYour filter may use the following code to recognize invisible files or\ndirectories (requires Mac::Files):\n\n use Mac::Files;\n\n # invisible() --  returns 1 if file/directory is invisible,\n # 0 if it's visible or undef if an error occurred\n\n sub invisible($) {\n   my $file = shift;\n   my ($fileCat, $fileInfo);\n   my $invisible_flag =  1 << 14;\n\n   if ( $fileCat = FSpGetCatInfo($file) ) {\n     if ($fileInfo = $fileCat->ioFlFndrInfo() ) {\n       return (($fileInfo->fdFlags & $invisible_flag) && 1);\n     }\n   }\n   return undef;\n }\n\nGenerally, invisible files are system files, unless an odd application\ndecides to use invisible files for its own purposes. To distinguish\nsuch files from system files, you have to look at the B<type> and B<creator>\nfile attributes. The MacPerl built-in functions C<GetFileInfo(FILE)> and\nC<SetFileInfo(CREATOR, TYPE, FILES)> offer access to these attributes\n(see MacPerl.pm for details).\n\nFiles that appear on the desktop actually reside in an (hidden) directory\nnamed \"Desktop Folder\" on the particular disk volume. Note that, although\nall desktop files appear to be on the same \"virtual\" desktop, each disk\nvolume actually maintains its own \"Desktop Folder\" directory.\n\n=back\n\n=back\n\n=head1 BUGS AND CAVEATS\n\nDespite the name of the C<finddepth()> function, both C<find()> and\nC<finddepth()> perform a depth-first search of the directory\nhierarchy.\n\n=head1 HISTORY\n\nFile::Find used to produce incorrect results if called recursively.\nDuring the development of perl 5.8 this bug was fixed.\nThe first fixed version of File::Find was 1.01.\n\n=head1 SEE ALSO\n\nfind, find2perl.\n\n=cut\n\nour @ISA = qw(Exporter);\nour @EXPORT = qw(find finddepth);\n\n\nuse strict;\nmy $Is_VMS;\nmy $Is_MacOS;\n\nrequire File::Basename;\nrequire File::Spec;\n\n# Should ideally be my() not our() but local() currently\n# refuses to operate on lexicals\n\nour %SLnkSeen;\nour ($wanted_callback, $avoid_nlink, $bydepth, $no_chdir, $follow,\n    $follow_skip,"..., 4096) = 4096
22042 read(4, "$newlen == length($Base) || substr($Base,$newlen,1) eq '/')\n\t\t&& $AbsName eq substr($Base,0,$newlen))\n\t    {\n\t\treturn undef;\n\t    }\n\t}\n    }\n    return $AbsName;\n}\n\nsub Follow_SymLink($) {\n    my ($AbsName) = @_;\n\n    my ($NewName,$DEV, $INO);\n    ($DEV, $INO)= lstat $AbsName;\n\n    while (-l _) {\n\tif ($SLnkSeen{$DEV, $INO}++) {\n\t    if ($follow_skip < 2) {\n\t\tdie \"$AbsName is encountered a second time\";\n\t    }\n\t    else {\n\t\treturn undef;\n\t    }\n\t}\n\t$NewName= PathCombine($AbsName, readlink($AbsName));\n\tunless(defined $NewName) {\n\t    if ($follow_skip < 2) {\n\t\tdie \"$AbsName is a recursive symbolic link\";\n\t    }\n\t    else {\n\t\treturn undef;\n\t    }\n\t}\n\telse {\n\t    $AbsName= $NewName;\n\t}\n\t($DEV, $INO) = lstat($AbsName);\n\treturn undef unless defined $DEV;  #  dangling symbolic link\n    }\n\n    if ($full_check && defined $DEV && $SLnkSeen{$DEV, $INO}++) {\n\tif ( ($follow_skip < 1) || ((-d _) && ($follow_skip < 2)) ) {\n\t    die \"$AbsName encountered a second time\";\n\t}\n\telse {\n\t    return undef;\n\t}\n    }\n\n    return $AbsName;\n}\n\nour($dir, $name, $fullname, $prune);\nsub _find_dir_symlnk($$$);\nsub _find_dir($$$);\n\n# check whether or not a scalar variable is tainted\n# (code straight from the Camel, 3rd ed., page 561)\nsub is_tainted_pp {\n    my $arg = shift;\n    my $nada = substr($arg, 0, 0); # zero-length\n    local $@;\n    eval { eval \"# $nada\" };\n    return length($@) != 0;\n}\n\nsub _find_opt {\n    my $wanted = shift;\n    die \"invalid top directory\" unless defined $_[0];\n\n    # This function must local()ize everything because callbacks may\n    # call find() or finddepth()\n\n    local %SLnkSeen;\n    local ($wanted_callback, $avoid_nlink, $bydepth, $no_chdir, $follow,\n\t$follow_skip, $full_check, $untaint, $untaint_skip, $untaint_pat,\n\t$pre_process, $post_process, $dangling_symlinks);\n    local($dir, $name, $fullname, $prune);\n    local *_ = \\my $a;\n\n    my $cwd            = $wanted->{bydepth} ? Cwd::fastcwd() : Cwd::getcwd();\n    if ($Is_VMS) {\n\t# VMS returns this by default in VMS format which just doesn't\n\t# work for the rest of t"..., 4096) = 4096
22042 brk(0x8195000)                    = 0x8195000
22042 read(4, "{\n\t\t    $abs_dir = contract_name_Mac($cwd, $top_item);\n\t\t    unless (defined $abs_dir) {\n\t\t\twarnings::warnif \"Can't determine absolute path for $top_item (No such file or directory)\\n\";\n\t\t\tnext Proc_Top_Item;\n\t\t    }\n\t\t}\n\n\t    }\n\t    else {\n\t\tif (substr($top_item,0,1) eq '/') {\n\t\t    $abs_dir = $top_item;\n\t\t}\n\t\telsif ($top_item eq $File::Find::current_dir) {\n\t\t    $abs_dir = $cwd;\n\t\t}\n\t\telse {  # care about any  ../\n\t\t    $top_item =~ s/\\.dir\\z//i if $Is_VMS;\n\t\t    $abs_dir = contract_name(\"$cwd/\",$top_item);\n\t\t}\n\t    }\n\t    $abs_dir= Follow_SymLink($abs_dir);\n\t    unless (defined $abs_dir) {\n\t\tif ($dangling_symlinks) {\n\t\t    if (ref $dangling_symlinks eq 'CODE') {\n\t\t\t$dangling_symlinks->($top_item, $cwd);\n\t\t    } else {\n\t\t\twarnings::warnif \"$top_item is a dangling symbolic link\\n\";\n\t\t    }\n\t\t}\n\t\tnext Proc_Top_Item;\n\t    }\n\n\t    if (-d _) {\n\t\t$top_item =~ s/\\.dir\\z//i if $Is_VMS;\n\t\t_find_dir_symlnk($wanted, $abs_dir, $top_item);\n\t\t$Is_Dir= 1;\n\t    }\n\t}\n\telse { # no follow\n\t    $topdir = $top_item;\n\t    unless (defined $topnlink) {\n\t\twarnings::warnif \"Can't stat $top_item: $!\\n\";\n\t\tnext Proc_Top_Item;\n\t    }\n\t    if (-d _) {\n\t\t$top_item =~ s/\\.dir\\z//i if $Is_VMS;\n\t\t_find_dir($wanted, $top_item, $topnlink);\n\t\t$Is_Dir= 1;\n\t    }\n\t    else {\n\t\t$abs_dir= $top_item;\n\t    }\n\t}\n\n\tunless ($Is_Dir) {\n\t    unless (($_,$dir) = File::Basename::fileparse($abs_dir)) {\n\t\tif ($Is_MacOS) {\n\t\t    ($dir,$_) = (':', $top_item); # $File::Find::dir, $_\n\t\t}\n\t\telse {\n\t\t    ($dir,$_) = ('./', $top_item);\n\t\t}\n\t    }\n\n\t    $abs_dir = $dir;\n\t    if (( $untaint ) && (is_tainted($dir) )) {\n\t\t( $abs_dir ) = $dir =~ m|$untaint_pat|;\n\t\tunless (defined $abs_dir) {\n\t\t    if ($untaint_skip == 0) {\n\t\t\tdie \"directory $dir is still tainted\";\n\t\t    }\n\t\t    else {\n\t\t\tnext Proc_Top_Item;\n\t\t    }\n\t\t}\n\t    }\n\n\t    unless ($no_chdir || chdir $abs_dir) {\n\t\twarnings::warnif \"Couldn't chdir $abs_dir: $!\\n\";\n\t\tnext Proc_Top_Item;\n\t    }\n\n\t    $name = $abs_dir . $_; # $File::Find::name\n\t    $_ = $name if $no_chdir;\n\n\t    { $wanted_callback->() }; # protect again"..., 4096) = 4096
22042 read(4, ":Find::dir\n\t    $name= $dir_name; # $File::Find::name\n\t    $_= ($no_chdir ? $dir_name : $dir_rel ); # $_\n\t    # prune may happen here\n\t    $prune= 0;\n\t    { $wanted_callback->() };\t# protect against wild \"next\"\n\t    next if $prune;\n\t}\n\n\t# change to that directory\n\tunless ($no_chdir || ($dir_rel eq $File::Find::current_dir)) {\n\t    my $udir= $dir_rel;\n\t    if ( ($untaint) && (($tainted) || ($tainted = is_tainted($dir_rel) )) ) {\n\t\t( $udir ) = $dir_rel =~ m|$untaint_pat|;\n\t\tunless (defined $udir) {\n\t\t    if ($untaint_skip == 0) {\n\t\t\tif ($Is_MacOS) {\n\t\t\t    die \"directory ($p_dir) $dir_rel is still tainted\";\n\t\t\t}\n\t\t\telse {\n\t\t\t    die \"directory (\" . ($p_dir ne '/' ? $p_dir : '') . \"/) $dir_rel is still tainted\";\n\t\t\t}\n\t\t    } else { # $untaint_skip == 1\n\t\t\tnext;\n\t\t    }\n\t\t}\n\t    }\n\t    unless (chdir ($Is_VMS && $udir !~ /[\\/\\[<]+/ ? \"./$udir\" : $udir)) {\n\t\tif ($Is_MacOS) {\n\t\t    warnings::warnif \"Can't cd to ($p_dir) $udir: $!\\n\";\n\t\t}\n\t\telse {\n\t\t    warnings::warnif \"Can't cd to (\" .\n\t\t\t($p_dir ne '/' ? $p_dir : '') . \"/) $udir: $!\\n\";\n\t\t}\n\t\tnext;\n\t    }\n\t    $CdLvl++;\n\t}\n\n\tif ($Is_MacOS) {\n\t    $dir_name = \"$dir_name:\" unless ($dir_name =~ /:$/);\n\t}\n\n\t$dir= $dir_name; # $File::Find::dir\n\n\t# Get the list of files in the current directory.\n\tunless (opendir DIR, ($no_chdir ? $dir_name : $File::Find::current_dir)) {\n\t    warnings::warnif \"Can't opendir($dir_name): $!\\n\";\n\t    next;\n\t}\n\t@filenames = readdir DIR;\n\tclosedir(DIR);\n\t@filenames = $pre_process->(@filenames) if $pre_process;\n\tpush @Stack,[$CdLvl,$dir_name,\"\",-2]   if $post_process;\n\n\t# default: use whatever was specifid\n        # (if $nlink >= 2, and $avoid_nlink == 0, this will switch back)\n        $no_nlink = $avoid_nlink;\n        # if dir has wrong nlink count, force switch to slower stat method\n        $no_nlink = 1 if ($nlink < 2);\n\n\tif ($nlink == 2 && !$no_nlink) {\n\t    # This dir has no subdirectories.\n\t    for my $FN (@filenames) {\n\t\tif ($Is_VMS) {\n\t\t# Big hammer here - Compensate for VMS trailing . and .dir\n\t\t# No win situation until this is changed, b"..., 4096) = 4096
22042 read(4, "ir always has a trailing ':', except for the starting dir,\n\t\t# where $dir_rel eq ':'\n\t\t$dir_name = \"$p_dir$dir_rel\";\n\t\t$dir_pref = \"$dir_name:\";\n\t    }\n\t    elsif ($^O eq 'MSWin32') {\n\t\t$dir_name = ($p_dir =~ m|\\w:/?$| ? \"$p_dir$dir_rel\" : \"$p_dir/$dir_rel\");\n\t\t$dir_pref = \"$dir_name/\";\n\t    }\n\t    elsif ($^O eq 'VMS') {\n                if ($p_dir =~ m/[\\]>]+$/) {\n                    $dir_name = $p_dir;\n                    $dir_name =~ s/([\\]>]+)$/.$dir_rel$1/;\n                    $dir_pref = $dir_name;\n                }\n                else {\n                    $dir_name = \"$p_dir/$dir_rel\";\n                    $dir_pref = \"$dir_name/\";\n                }\n\t    }\n\t    else {\n\t\t$dir_name = ($p_dir eq '/' ? \"/$dir_rel\" : \"$p_dir/$dir_rel\");\n\t\t$dir_pref = \"$dir_name/\";\n\t    }\n\n\t    if ( $nlink == -2 ) {\n\t\t$name = $dir = $p_dir; # $File::Find::name / dir\n                $_ = $File::Find::current_dir;\n\t\t$post_process->();\t\t# End-of-directory processing\n\t    }\n\t    elsif ( $nlink < 0 ) {  # must be finddepth, report dirname now\n\t\t$name = $dir_name;\n\t\tif ($Is_MacOS) {\n\t\t    if ($dir_rel eq ':') { # must be the top dir, where we started\n\t\t\t$name =~ s|:$||; # $File::Find::name\n\t\t\t$p_dir = \"$p_dir:\" unless ($p_dir =~ /:$/);\n\t\t    }\n\t\t    $dir = $p_dir; # $File::Find::dir\n\t\t    $_ = ($no_chdir ? $name : $dir_rel); # $_\n\t\t}\n\t\telse {\n\t\t    if ( substr($name,-2) eq '/.' ) {\n\t\t\tsubstr($name, length($name) == 2 ? -1 : -2) = '';\n\t\t    }\n\t\t    $dir = $p_dir;\n\t\t    $_ = ($no_chdir ? $dir_name : $dir_rel );\n\t\t    if ( substr($_,-2) eq '/.' ) {\n\t\t\tsubstr($_, length($_) == 2 ? -1 : -2) = '';\n\t\t    }\n\t\t}\n\t\t{ $wanted_callback->() }; # protect against wild \"next\"\n\t     }\n\t     else {\n\t\tpush @Stack,[$CdLvl,$p_dir,$dir_rel,-1]  if  $bydepth;\n\t\tlast;\n\t    }\n\t}\n    }\n}\n\n\n# API:\n#  $wanted\n#  $dir_loc : absolute location of a dir\n#  $p_dir   : \"parent directory\"\n# preconditions:\n#  chdir (if not no_chdir) to dir\n\nsub _find_dir_symlnk($$$) {\n    my ($wanted, $dir_loc, $p_dir) = @_; # $dir_loc is the absolute directory\n    my @Stack;\n    my @fi"..., 4096) = 4096
22042 read(4, "ange to that directory\n\tunless ($no_chdir || ($dir_rel eq $File::Find::current_dir)) {\n\t    $updir_loc = $dir_loc;\n\t    if ( ($untaint) && (($tainted) || ($tainted = is_tainted($dir_loc) )) ) {\n\t\t# untaint $dir_loc, what will be pushed on the stack as (untainted) parent dir\n\t\t( $updir_loc ) = $dir_loc =~ m|$untaint_pat|;\n\t\tunless (defined $updir_loc) {\n\t\t    if ($untaint_skip == 0) {\n\t\t\tdie \"directory $dir_loc is still tainted\";\n\t\t    }\n\t\t    else {\n\t\t\tnext;\n\t\t    }\n\t\t}\n\t    }\n\t    unless (chdir $updir_loc) {\n\t\twarnings::warnif \"Can't cd to $updir_loc: $!\\n\";\n\t\tnext;\n\t    }\n\t}\n\n\tif ($Is_MacOS) {\n\t    $dir_name = \"$dir_name:\" unless ($dir_name =~ /:$/);\n\t}\n\n\t$dir = $dir_name; # $File::Find::dir\n\n\t# Get the list of files in the current directory.\n\tunless (opendir DIR, ($no_chdir ? $dir_loc : $File::Find::current_dir)) {\n\t    warnings::warnif \"Can't opendir($dir_loc): $!\\n\";\n\t    next;\n\t}\n\t@filenames = readdir DIR;\n\tclosedir(DIR);\n\n\tfor my $FN (@filenames) {\n\t    if ($Is_VMS) {\n\t    # Big hammer here - Compensate for VMS trailing . and .dir\n\t    # No win situation until this is changed, but this\n\t    # will handle the majority of the cases with breaking the fewest.\n\n\t\t$FN =~ s/\\.dir\\z//i;\n\t\t$FN =~ s#\\.$## if ($FN ne '.');\n\t    }\n\t    next if $FN =~ $File::Find::skip_pattern;\n\n\t    # follow symbolic links / do an lstat\n\t    $new_loc = Follow_SymLink($loc_pref.$FN);\n\n\t    # ignore if invalid symlink\n\t    unless (defined $new_loc) {\n\t        if (!defined -l _ && $dangling_symlinks) {\n\t            if (ref $dangling_symlinks eq 'CODE') {\n\t                $dangling_symlinks->($FN, $dir_pref);\n\t            } else {\n\t                warnings::warnif \"$dir_pref$FN is a dangling symbolic link\\n\";\n\t            }\n\t        }\n\n\t        $fullname = undef;\n\t        $name = $dir_pref . $FN;\n\t        $_ = ($no_chdir ? $name : $FN);\n\t        { $wanted_callback->() };\n\t        next;\n\t    }\n\n\t    if (-d _) {\n\t\tif ($Is_VMS) {\n\t\t    $FN =~ s/\\.dir\\z//i;\n\t\t    $FN =~ s#\\.$## if ($FN ne '.');\n\t\t    $new_loc =~ s/\\.dir\\z//i;\n\t\t    $new_loc ="..., 4096) = 4096
22042 brk(0x81b6000)                    = 0x81b6000
22042 read(4, "shift;\n    if ( ref($wanted) eq 'HASH' ) {\n        unless( exists $wanted->{wanted} and ref( $wanted->{wanted} ) eq 'CODE' ) {\n            die 'no &wanted subroutine given';\n        }\n\tif ( $wanted->{follow} || $wanted->{follow_fast}) {\n\t    $wanted->{follow_skip} = 1 unless defined $wanted->{follow_skip};\n\t}\n\tif ( $wanted->{untaint} ) {\n\t    $wanted->{untaint_pattern} = $File::Find::untaint_pattern\n\t\tunless defined $wanted->{untaint_pattern};\n\t    $wanted->{untaint_skip} = 0 unless defined $wanted->{untaint_skip};\n\t}\n\treturn $wanted;\n    }\n    elsif( ref( $wanted ) eq 'CODE' ) {\n\treturn { wanted => $wanted };\n    }\n    else {\n       die 'no &wanted subroutine given';\n    }\n}\n\nsub find {\n    my $wanted = shift;\n    _find_opt(wrap_wanted($wanted), @_);\n}\n\nsub finddepth {\n    my $wanted = wrap_wanted(shift);\n    $wanted->{bydepth} = 1;\n    _find_opt($wanted, @_);\n}\n\n# default\n$File::Find::skip_pattern    = qr/^\\.{1,2}\\z/;\n$File::Find::untaint_pattern = qr|^([-+@\\w./]+)$|;\n\n# These are hard-coded for now, but may move to hint files.\nif ($^O eq 'VMS') {\n    $Is_VMS = 1;\n    $File::Find::dont_use_nlink  = 1;\n}\nelsif ($^O eq 'MacOS') {\n    $Is_MacOS = 1;\n    $File::Find::dont_use_nlink  = 1;\n    $File::Find::skip_pattern    = qr/^Icon\\015\\z/;\n    $File::Find::untaint_pattern = qr|^(.+)$|;\n}\n\n# this _should_ work properly on all platforms\n# where File::Find can be expected to work\n$File::Find::current_dir = File::Spec->curdir || '.';\n\n$File::Find::dont_use_nlink = 1\n    if $^O eq 'os2' || $^O eq 'dos' || $^O eq 'amigaos' || $^O eq 'MSWin32' ||\n       $^O eq 'interix' || $^O eq 'cygwin' || $^O eq 'epoc' || $^O eq 'qnx' ||\n\t   $^O eq 'nto';\n\n# Set dont_use_nlink in your hint file if your system's stat doesn't\n# report the number of links in a directory as an indication\n# of the number of files.\n# See, e.g. hints/machten.sh for MachTen 2.2.\nunless ($File::Find::dont_use_nlink) {\n    require Config;\n    $File::Find::dont_use_nlink = 1 if ($Config::Config{'dont_use_nlink'});\n}\n\n# We need a function that checks if a scalar is"..., 4096) = 2292
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Cwd.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Cwd.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Cwd.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Cwd.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Cwd.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Cwd.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Cwd.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Cwd.pm", {st_mode=S_IFREG|0444, st_size=21761, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Cwd.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package Cwd;\n\n=head1 NAME\n\nCwd - get pathname of current working directory\n\n=head1 SYNOPSIS\n\n    use Cwd;\n    my $dir = getcwd;\n\n    use Cwd 'abs_path';\n    my $abs_path = abs_path($file);\n\n=head1 DESCRIPTION\n\nThis module provides functions for determining the pathname of the\ncurrent working directory.  It is recommended that getcwd (or another\n*cwd() function) be used in I<all> code to ensure portability.\n\nBy default, it exports the functions cwd(), getcwd(), fastcwd(), and\nfastgetcwd() (and, on Win32, getdcwd()) into the caller's namespace.  \n\n\n=head2 getcwd and friends\n\nEach of these functions are called without arguments and return the\nabsolute path of the current working directory.\n\n=over 4\n\n=item getcwd\n\n    my $cwd = getcwd();\n\nReturns the current working directory.\n\nExposes the POSIX function getcwd(3) or re-implements it if it's not\navailable.\n\n=item cwd\n\n    my $cwd = cwd();\n\nThe cwd() is the most natural form for the current architecture.  For\nmost systems it is identical to `pwd` (but without the trailing line\nterminator).\n\n=item fastcwd\n\n    my $cwd = fastcwd();\n\nA more dangerous version of getcwd(), but potentially faster.\n\nIt might conceivably chdir() you out of a directory that it can't\nchdir() you back into.  If fastcwd encounters a problem it will return\nundef but will probably leave you in a different directory.  For a\nmeasure of extra security, if everything appears to have worked, the\nfastcwd() function will check that it leaves you in the same directory\nthat it started in.  If it has changed it will C<die> with the message\n\"Unstable directory path, current directory changed\nunexpectedly\".  That should never happen.\n\n=item fastgetcwd\n\n  my $cwd = fastgetcwd();\n\nThe fastgetcwd() function is provided as a synonym for cwd().\n\n=item getdcwd\n\n    my $cwd = getdcwd();\n    my $cwd = getdcwd('C:');\n\nThe getdcwd() function is also provided on Win32 to get the current working\ndirectory on the specified drive, since Windows maintains a separate current\nworking directory for each drive.  If no drive is s"..., 4096) = 4096
22042 read(4, "d.xs> for the\ndetails.\n\n=head1 SEE ALSO\n\nL<File::chdir>\n\n=cut\n\nuse strict;\nuse Exporter;\nuse vars qw(@ISA @EXPORT @EXPORT_OK $VERSION);\n\n$VERSION = '3.40';\nmy $xs_version = $VERSION;\n$VERSION =~ tr/_//;\n\n@ISA = qw/ Exporter /;\n@EXPORT = qw(cwd getcwd fastcwd fastgetcwd);\npush @EXPORT, qw(getdcwd) if $^O eq 'MSWin32';\n@EXPORT_OK = qw(chdir abs_path fast_abs_path realpath fast_realpath);\n\n# sys_cwd may keep the builtin command\n\n# All the functionality of this module may provided by builtins,\n# there is no sense to process the rest of the file.\n# The best choice may be to have this in BEGIN, but how to return from BEGIN?\n\nif ($^O eq 'os2') {\n    local $^W = 0;\n\n    *cwd                = defined &sys_cwd ? \\&sys_cwd : \\&_os2_cwd;\n    *getcwd             = \\&cwd;\n    *fastgetcwd         = \\&cwd;\n    *fastcwd            = \\&cwd;\n\n    *fast_abs_path      = \\&sys_abspath if defined &sys_abspath;\n    *abs_path           = \\&fast_abs_path;\n    *realpath           = \\&fast_abs_path;\n    *fast_realpath      = \\&fast_abs_path;\n\n    return 1;\n}\n\n# Need to look up the feature settings on VMS.  The preferred way is to use the\n# VMS::Feature module, but that may not be available to dual life modules.\n\nmy $use_vms_feature;\nBEGIN {\n    if ($^O eq 'VMS') {\n        if (eval { local $SIG{__DIE__}; require VMS::Feature; }) {\n            $use_vms_feature = 1;\n        }\n    }\n}\n\n# Need to look up the UNIX report mode.  This may become a dynamic mode\n# in the future.\nsub _vms_unix_rpt {\n    my $unix_rpt;\n    if ($use_vms_feature) {\n        $unix_rpt = VMS::Feature::current(\"filename_unix_report\");\n    } else {\n        my $env_unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';\n        $unix_rpt = $env_unix_rpt =~ /^[ET1]/i; \n    }\n    return $unix_rpt;\n}\n\n# Need to look up the EFS character set mode.  This may become a dynamic\n# mode in the future.\nsub _vms_efs {\n    my $efs;\n    if ($use_vms_feature) {\n        $efs = VMS::Feature::current(\"efs_charset\");\n    } else {\n        my $env_efs = $ENV{'DECC$EFS_CHARSET'} || '';\n        $efs = $e"..., 4096) = 4096
22042 read(4, "d', # OS/400 PASE.\n\t\t) {\n\n    if( -x $try ) {\n        $pwd_cmd = $try;\n        last;\n    }\n}\nmy $found_pwd_cmd = defined($pwd_cmd);\nunless ($pwd_cmd) {\n    # Isn't this wrong?  _backtick_pwd() will fail if somenone has\n    # pwd in their path but it is not /bin/pwd or /usr/bin/pwd?\n    # See [perl #16774]. --jhi\n    $pwd_cmd = 'pwd';\n}\n\n# Lazy-load Carp\nsub _carp  { require Carp; Carp::carp(@_)  }\nsub _croak { require Carp; Carp::croak(@_) }\n\n# The 'natural and safe form' for UNIX (pwd may be setuid root)\nsub _backtick_pwd {\n    # Localize %ENV entries in a way that won't create new hash keys\n    my @localize = grep exists $ENV{$_}, qw(PATH IFS CDPATH ENV BASH_ENV);\n    local @ENV{@localize};\n    \n    my $cwd = `$pwd_cmd`;\n    # Belt-and-suspenders in case someone said \"undef $/\".\n    local $/ = \"\\n\";\n    # `pwd` may fail e.g. if the disk is full\n    chomp($cwd) if defined $cwd;\n    $cwd;\n}\n\n# Since some ports may predefine cwd internally (e.g., NT)\n# we take care not to override an existing definition for cwd().\n\nunless ($METHOD_MAP{$^O}{cwd} or defined &cwd) {\n    # The pwd command is not available in some chroot(2)'ed environments\n    my $sep = $Config::Config{path_sep} || ':';\n    my $os = $^O;  # Protect $^O from tainting\n\n\n    # Try again to find a pwd, this time searching the whole PATH.\n    if (defined $ENV{PATH} and $os ne 'MSWin32') {  # no pwd on Windows\n\tmy @candidates = split($sep, $ENV{PATH});\n\twhile (!$found_pwd_cmd and @candidates) {\n\t    my $candidate = shift @candidates;\n\t    $found_pwd_cmd = 1 if -x \"$candidate/pwd\";\n\t}\n    }\n\n    # MacOS has some special magic to make `pwd` work.\n    if( $os eq 'MacOS' || $found_pwd_cmd )\n    {\n\t*cwd = \\&_backtick_pwd;\n    }\n    else {\n\t*cwd = \\&getcwd;\n    }\n}\n\nif ($^O eq 'cygwin') {\n  # We need to make sure cwd() is called with no args, because it's\n  # got an arg-less prototype and will die if args are present.\n  local $^W = 0;\n  my $orig_cwd = \\&cwd;\n  *cwd = sub { &$orig_cwd() }\n}\n\n\n# set a reasonable (and very safe) default for fastgetcwd, in case it\n# i"..., 4096) = 4096
22042 read(4, "\n\t    $ENV{'PWD'} = cwd();\n\t}\n    }\n    else {\n\tmy $wd = cwd();\n\t$wd = Win32::GetFullPathName($wd) if $^O eq 'MSWin32';\n\t$ENV{'PWD'} = $wd;\n    }\n    # Strip an automounter prefix (where /tmp_mnt/foo/bar == /foo/bar)\n    if ($^O ne 'MSWin32' and $ENV{'PWD'} =~ m|(/[^/]+(/[^/]+/[^/]+))(.*)|s) {\n\tmy($pd,$pi) = stat($2);\n\tmy($dd,$di) = stat($1);\n\tif (defined $pd and defined $dd and $di == $pi and $dd == $pd) {\n\t    $ENV{'PWD'}=\"$2$3\";\n\t}\n    }\n    $chdir_init = 1;\n}\n\nsub chdir {\n    my $newdir = @_ ? shift : '';\t# allow for no arg (chdir to HOME dir)\n    $newdir =~ s|///*|/|g unless $^O eq 'MSWin32';\n    chdir_init() unless $chdir_init;\n    my $newpwd;\n    if ($^O eq 'MSWin32') {\n\t# get the full path name *before* the chdir()\n\t$newpwd = Win32::GetFullPathName($newdir);\n    }\n\n    return 0 unless CORE::chdir $newdir;\n\n    if ($^O eq 'VMS') {\n\treturn $ENV{'PWD'} = $ENV{'DEFAULT'}\n    }\n    elsif ($^O eq 'MacOS') {\n\treturn $ENV{'PWD'} = cwd();\n    }\n    elsif ($^O eq 'MSWin32') {\n\t$ENV{'PWD'} = $newpwd;\n\treturn 1;\n    }\n\n    if (ref $newdir eq 'GLOB') { # in case a file/dir handle is passed in\n\t$ENV{'PWD'} = cwd();\n    } elsif ($newdir =~ m#^/#s) {\n\t$ENV{'PWD'} = $newdir;\n    } else {\n\tmy @curdir = split(m#/#,$ENV{'PWD'});\n\t@curdir = ('') unless @curdir;\n\tmy $component;\n\tforeach $component (split(m#/#, $newdir)) {\n\t    next if $component eq '.';\n\t    pop(@curdir),next if $component eq '..';\n\t    push(@curdir,$component);\n\t}\n\t$ENV{'PWD'} = join('/',@curdir) || '/';\n    }\n    1;\n}\n\n\nsub _perl_abs_path\n{\n    my $start = @_ ? shift : '.';\n    my($dotdots, $cwd, @pst, @cst, $dir, @tst);\n\n    unless (@cst = stat( $start ))\n    {\n\t_carp(\"stat($start): $!\");\n\treturn '';\n    }\n\n    unless (-d _) {\n        # Make sure we can be invoked on plain files, not just directories.\n        # NOTE that this routine assumes that '/' is the only directory separator.\n\t\n        my ($dir, $file) = $start =~ m{^(.*)/(.+)$}\n\t    or return cwd() . '/' . $start;\n\t\n\t# Can't use \"-l _\" here, because the previous stat was a stat(), not an lstat().\n\ti"..., 4096) = 4096
22042 brk(0x81d7000)                    = 0x81d7000
22042 brk(0x81d6000)                    = 0x81d6000
22042 read(4, "l $path) {\n\t    my $link_target = readlink($path);\n\t    die \"Can't resolve link $path: $!\" unless defined $link_target;\n\t    \n\t    $link_target = File::Spec->catpath($vol, $dir, $link_target)\n                unless File::Spec->file_name_is_absolute($link_target);\n\t    \n\t    return fast_abs_path($link_target);\n\t}\n\t\n\treturn $dir eq File::Spec->rootdir\n\t  ? File::Spec->catpath($vol, $dir, $file)\n\t  : fast_abs_path(File::Spec->catpath($vol, $dir, '')) . '/' . $file;\n    }\n\n    if (!CORE::chdir($path)) {\n \t_croak(\"Cannot chdir to $path: $!\");\n    }\n    my $realpath = getcwd();\n    if (! ((-d $cwd) && (CORE::chdir($cwd)))) {\n \t_croak(\"Cannot chdir back to $cwd: $!\");\n    }\n    $realpath;\n}\n\n# added function alias to follow principle of least surprise\n# based on previous aliasing.  --tchrist 27-Jan-00\n*fast_realpath = \\&fast_abs_path;\n\n\n# --- PORTING SECTION ---\n\n# VMS: $ENV{'DEFAULT'} points to default directory at all times\n# 06-Mar-1996  Charles Bailey  bailey@newman.upenn.edu\n# Note: Use of Cwd::chdir() causes the logical name PWD to be defined\n#   in the process logical name table as the default device and directory\n#   seen by Perl. This may not be the same as the default device\n#   and directory seen by DCL after Perl exits, since the effects\n#   the CRTL chdir() function persist only until Perl exits.\n\nsub _vms_cwd {\n    return $ENV{'DEFAULT'};\n}\n\nsub _vms_abs_path {\n    return $ENV{'DEFAULT'} unless @_;\n    my $path = shift;\n\n    my $efs = _vms_efs;\n    my $unix_rpt = _vms_unix_rpt;\n\n    if (defined &VMS::Filespec::vmsrealpath) {\n        my $path_unix = 0;\n        my $path_vms = 0;\n\n        $path_unix = 1 if ($path =~ m#(?<=\\^)/#);\n        $path_unix = 1 if ($path =~ /^\\.\\.?$/);\n        $path_vms = 1 if ($path =~ m#[\\[<\\]]#);\n        $path_vms = 1 if ($path =~ /^--?$/);\n\n        my $unix_mode = $path_unix;\n        if ($efs) {\n            # In case of a tie, the Unix report mode decides.\n            if ($path_vms == $path_unix) {\n                $unix_mode = $unix_rpt;\n            } else {\n                $unix_"..., 4096) = 4096
22042 read(4, " Dos::GetCwd();\n    }\n    return $ENV{'PWD'};\n}\n\nsub _qnx_cwd {\n\tlocal $ENV{PATH} = '';\n\tlocal $ENV{CDPATH} = '';\n\tlocal $ENV{ENV} = '';\n    $ENV{'PWD'} = `/usr/bin/fullpath -t`;\n    chomp $ENV{'PWD'};\n    return $ENV{'PWD'};\n}\n\nsub _qnx_abs_path {\n\tlocal $ENV{PATH} = '';\n\tlocal $ENV{CDPATH} = '';\n\tlocal $ENV{ENV} = '';\n    my $path = @_ ? shift : '.';\n    local *REALPATH;\n\n    defined( open(REALPATH, '-|') || exec '/usr/bin/fullpath', '-t', $path ) or\n      die \"Can't open /usr/bin/fullpath: $!\";\n    my $realpath = <REALPATH>;\n    close REALPATH;\n    chomp $realpath;\n    return $realpath;\n}\n\nsub _epoc_cwd {\n    $ENV{'PWD'} = EPOC::getcwd();\n    return $ENV{'PWD'};\n}\n\n\n# Now that all the base-level functions are set up, alias the\n# user-level functions to the right places\n\nif (exists $METHOD_MAP{$^O}) {\n  my $map = $METHOD_MAP{$^O};\n  foreach my $name (keys %$map) {\n    local $^W = 0;  # assignments trigger 'subroutine redefined' warning\n    no strict 'refs';\n    *{$name} = \\&{$map->{$name}};\n  }\n}\n\n# In case the XS version doesn't load.\n*abs_path = \\&_perl_abs_path unless defined &abs_path;\n*getcwd = \\&_perl_getcwd unless defined &getcwd;\n\n# added function alias for those of us more\n# used to the libc function.  --tchrist 27-Jan-00\n*realpath = \\&abs_path;\n\n1;\n", 4096) = 1281
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/Cwd/Cwd.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/Cwd/Cwd.so", {st_mode=S_IFREG|0555, st_size=9616, ...}) = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/Cwd/Cwd.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/Cwd/Cwd.so", O_RDONLY|O_CLOEXEC) = 4
22042 read(4, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\0\17\0\0004\0\0\0\200!\0\0\0\0\0\0004\0 \0\7\0(\0\32\0\31\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\35\0\0$\35\0\0\5\0\0\0\0\20\0\0\1\0\0\0\334\36\0\0\334.\0\0\334.\0\0\264\1\0\0\274\1\0\0\6\0\0\0\0\20\0\0\2\0\0\0\360\36\0\0\360.\0\0\360.\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0P\345td\320\34\0\0\320\34\0\0\320\34\0\0\24\0\0\0\24\0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\334\36\0\0\334.\0\0\334.\0\0$\1\0\0$\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0a\0\0\0007\0\0\0\34\0\0\0\37\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\26\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0006\0\0\0\0\0\0\0\24\0\0\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0\0\0000\0\0\0001\0\0\0\0\0\0\0\36\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0005\0\0\0,\0\0\0\25\0\0\0\0\0\0\0\0\0\0\0&\0\0\0\0\0\0\0!\0\0\0\0\0\0\0\0\0\0\0003\0\0\0\6\0\0\0\v\0\0\0\0\0\0\0\0\0\0\0\5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0-\0\0\0\0\0\0\0\f\0\0\0\t\0\0\0\32\0\0\0\23\0\0\0(\0\0\0\0\0\0\0\0\0\0\0\r\0\0\0\21\0\0\0", 512) = 512
22042 fstat64(4, {st_mode=S_IFREG|0555, st_size=9616, ...}) = 0
22042 mmap2(NULL, 12440, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0xb721e000
22042 mmap2(0xb7220000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x1) = 0xb7220000
22042 close(4)                          = 0
22042 mprotect(0xb7220000, 4096, PROT_READ) = 0
22042 stat64("/bin/pwd", {st_mode=S_IFREG|0755, st_size=26308, ...}) = 0
22042 getgroups32(0, NULL)              = 12
22042 getgroups32(12, [10, 18, 19, 27, 80, 85, 100, 250, 513, 1005, 1008, 1026]) = 12
22042 stat64("/etc/perl/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Basename.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Basename.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Basename.pm", {st_mode=S_IFREG|0444, st_size=11250, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/File/Basename.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "=head1 NAME\n\nFile::Basename - Parse file paths into directory, filename and suffix.\n\n=head1 SYNOPSIS\n\n    use File::Basename;\n\n    ($name,$path,$suffix) = fileparse($fullname,@suffixlist);\n    $name = fileparse($fullname,@suffixlist);\n\n    $basename = basename($fullname,@suffixlist);\n    $dirname  = dirname($fullname);\n\n\n=head1 DESCRIPTION\n\nThese routines allow you to parse file paths into their directory, filename\nand suffix.\n\nB<NOTE>: C<dirname()> and C<basename()> emulate the behaviours, and\nquirks, of the shell and C functions of the same name.  See each\nfunction's documentation for details.  If your concern is just parsing\npaths it is safer to use L<File::Spec>'s C<splitpath()> and\nC<splitdir()> methods.\n\nIt is guaranteed that\n\n    # Where $path_separator is / for Unix, \\ for Windows, etc...\n    dirname($path) . $path_separator . basename($path);\n\nis equivalent to the original path for all systems but VMS.\n\n\n=cut\n\n\npackage File::Basename;\n\n# File::Basename is used during the Perl build, when the re extension may\n# not be available, but we only actually need it if running under tainting.\nBEGIN {\n  if (${^TAINT}) {\n    require re;\n    re->import('taint');\n  }\n}\n\n\nuse strict;\nuse 5.006;\nuse warnings;\nour(@ISA, @EXPORT, $VERSION, $Fileparse_fstype, $Fileparse_igncase);\nrequire Exporter;\n@ISA = qw(Exporter);\n@EXPORT = qw(fileparse fileparse_set_fstype basename dirname);\n$VERSION = \"2.78\";\n\nfileparse_set_fstype($^O);\n\n\n=over 4\n\n=item C<fileparse>\nX<fileparse>\n\n    my($filename, $directories, $suffix) = fileparse($path);\n    my($filename, $directories, $suffix) = fileparse($path, @suffixes);\n    my $filename                         = fileparse($path, @suffixes);\n\nThe C<fileparse()> routine divides a file path into its $directories, $filename\nand (optionally) the filename $suffix.\n\n$directories contains everything up to and including the last\ndirectory separator in the $path including the volume (if applicable).\nThe remainder of the $path is the $filename.\n\n     # On Unix returns (\"baz\", \"/foo/bar/\", \"\")\n     filepa"..., 4096) = 4096
22042 read(4, "fined\n  }\n  else { # Default to Unix semantics.\n    ($dirpath,$basename) = ($fullname =~ m{^(.*/)?(.*)}s);\n    if ($orig_type eq 'VMS' and $fullname =~ m{^(/[^/]+/000000(/|$))(.*)}) {\n      # dev:[000000] is top of VMS tree, similar to Unix '/'\n      # so strip it off and treat the rest as \"normal\"\n      my $devspec  = $1;\n      my $remainder = $3;\n      ($dirpath,$basename) = ($remainder =~ m{^(.*/)?(.*)}s);\n      $dirpath ||= '';  # should always be defined\n      $dirpath = $devspec.$dirpath;\n    }\n    $dirpath = './' unless $dirpath;\n  }\n      \n\n  my $tail   = '';\n  my $suffix = '';\n  if (@suffices) {\n    foreach $suffix (@suffices) {\n      my $pat = ($igncase ? '(?i)' : '') . \"($suffix)\\$\";\n      if ($basename =~ s/$pat//s) {\n        $taint .= substr($suffix,0,0);\n        $tail = $1 . $tail;\n      }\n    }\n  }\n\n  # Ensure taint is propgated from the path to its pieces.\n  $tail .= $taint;\n  wantarray ? ($basename .= $taint, $dirpath .= $taint, $tail)\n            : ($basename .= $taint);\n}\n\n\n\n=item C<basename>\nX<basename> X<filename>\n\n    my $filename = basename($path);\n    my $filename = basename($path, @suffixes);\n\nThis function is provided for compatibility with the Unix shell command\nC<basename(1)>.  It does B<NOT> always return the file name portion of a\npath as you might expect.  To be safe, if you want the file name portion of\na path use C<fileparse()>.\n\nC<basename()> returns the last level of a filepath even if the last\nlevel is clearly directory.  In effect, it is acting like C<pop()> for\npaths.  This differs from C<fileparse()>'s behaviour.\n\n    # Both return \"bar\"\n    basename(\"/foo/bar\");\n    basename(\"/foo/bar/\");\n\n@suffixes work as in C<fileparse()> except all regex metacharacters are\nquoted.\n\n    # These two function calls are equivalent.\n    my $filename = basename(\"/foo/bar/baz.txt\",  \".txt\");\n    my $filename = fileparse(\"/foo/bar/baz.txt\", qr/\\Q.txt\\E/);\n\nAlso note that in order to be compatible with the shell command,\nC<basename()> does not strip off a suffix if it is identical to the\nremaini"..., 4096) = 4096
22042 read(4, "urn 'foo/'\n    dirname(\"foo/\");\n\nUnder VMS, if there is no directory information in the $path, then the\ncurrent default device and directory is used.\n\n=cut\n\n\nsub dirname {\n    my $path = shift;\n\n    my($type) = $Fileparse_fstype;\n\n    if( $type eq 'VMS' and $path =~ m{/} ) {\n        # Parse as Unix\n        local($File::Basename::Fileparse_fstype) = '';\n        return dirname($path);\n    }\n\n    my($basename, $dirname) = fileparse($path);\n\n    if ($type eq 'VMS') { \n        $dirname ||= $ENV{DEFAULT};\n    }\n    elsif ($type eq 'MacOS') {\n\tif( !length($basename) && $dirname !~ /^[^:]+:\\z/) {\n            _strip_trailing_sep($dirname);\n\t    ($basename,$dirname) = fileparse $dirname;\n\t}\n\t$dirname .= \":\" unless $dirname =~ /:\\z/;\n    }\n    elsif (grep { $type eq $_ } qw(MSDOS DOS MSWin32 OS2)) { \n        _strip_trailing_sep($dirname);\n        unless( length($basename) ) {\n\t    ($basename,$dirname) = fileparse $dirname;\n\t    _strip_trailing_sep($dirname);\n\t}\n    }\n    elsif ($type eq 'AmigaOS') {\n        if ( $dirname =~ /:\\z/) { return $dirname }\n        chop $dirname;\n        $dirname =~ s{[^:/]+\\z}{} unless length($basename);\n    }\n    else {\n        _strip_trailing_sep($dirname);\n        unless( length($basename) ) {\n\t    ($basename,$dirname) = fileparse $dirname;\n\t    _strip_trailing_sep($dirname);\n\t}\n    }\n\n    $dirname;\n}\n\n\n# Strip the trailing path separator.\nsub _strip_trailing_sep  {\n    my $type = $Fileparse_fstype;\n\n    if ($type eq 'MacOS') {\n        $_[0] =~ s/([^:]):\\z/$1/s;\n    }\n    elsif (grep { $type eq $_ } qw(MSDOS DOS MSWin32 OS2)) { \n        $_[0] =~ s/([^:])[\\\\\\/]*\\z/$1/;\n    }\n    else {\n        $_[0] =~ s{(.)/*\\z}{$1}s;\n    }\n}\n\n\n=item C<fileparse_set_fstype>\nX<filesystem>\n\n  my $type = fileparse_set_fstype();\n  my $previous_type = fileparse_set_fstype($type);\n\nNormally File::Basename will assume a file path type native to your current\noperating system (ie. /foo/bar style on Unix, \\foo\\bar on Windows, etc...).\nWith this function you can override that assumption.\n\nValid $types are \"MacOS\", \"VMS\","..., 4096) = 3058
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/File/Spec.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/File/Spec.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Spec.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Spec.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Spec.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Spec.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Spec.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Spec.pm", {st_mode=S_IFREG|0444, st_size=10490, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Spec.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package File::Spec;\n\nuse strict;\nuse vars qw(@ISA $VERSION);\n\n$VERSION = '3.40';\n$VERSION =~ tr/_//;\n\nmy %module = (MacOS   => 'Mac',\n\t      MSWin32 => 'Win32',\n\t      os2     => 'OS2',\n\t      VMS     => 'VMS',\n\t      epoc    => 'Epoc',\n\t      NetWare => 'Win32', # Yes, File::Spec::Win32 works on NetWare.\n\t      symbian => 'Win32', # Yes, File::Spec::Win32 works on symbian.\n\t      dos     => 'OS2',   # Yes, File::Spec::OS2 works on DJGPP.\n\t      cygwin  => 'Cygwin');\n\n\nmy $module = $module{$^O} || 'Unix';\n\nrequire \"File/Spec/$module.pm\";\n@ISA = (\"File::Spec::$module\");\n\n1;\n\n__END__\n\n=head1 NAME\n\nFile::Spec - portably perform operations on file names\n\n=head1 SYNOPSIS\n\n\tuse File::Spec;\n\n\t$x=File::Spec->catfile('a', 'b', 'c');\n\nwhich returns 'a/b/c' under Unix. Or:\n\n\tuse File::Spec::Functions;\n\n\t$x = catfile('a', 'b', 'c');\n\n=head1 DESCRIPTION\n\nThis module is designed to support operations commonly performed on file\nspecifications (usually called \"file names\", but not to be confused with the\ncontents of a file, or Perl's file handles), such as concatenating several\ndirectory and file names into a single path, or determining whether a path\nis rooted. It is based on code directly taken from MakeMaker 5.17, code\nwritten by Andreas KE<ouml>nig, Andy Dougherty, Charles Bailey, Ilya\nZakharevich, Paul Schinder, and others.\n\nSince these functions are different for most operating systems, each set of\nOS specific routines is available in a separate module, including:\n\n\tFile::Spec::Unix\n\tFile::Spec::Mac\n\tFile::Spec::OS2\n\tFile::Spec::Win32\n\tFile::Spec::VMS\n\nThe module appropriate for the current OS is automatically loaded by\nFile::Spec. Since some modules (like VMS) make use of facilities available\nonly under that OS, it may not be possible to load all modules under all\noperating systems.\n\nSince File::Spec is object oriented, subroutines should not be called directly,\nas in:\n\n\tFile::Spec::catfile('a','b');\n\nbut rather as class methods:\n\n\tFile::Spec->catfile('a','b');\n\nFor simple uses, L<File::Spec::Functions> provides convenien"..., 4096) = 4096
22042 _llseek(4, 589, [589], SEEK_SET)  = 0
22042 _llseek(4, 0, [589], SEEK_CUR)    = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/File/Spec/Unix.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/File/Spec/Unix.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Spec/Unix.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Spec/Unix.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Spec/Unix.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Spec/Unix.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Spec/Unix.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Spec/Unix.pm", {st_mode=S_IFREG|0444, st_size=14880, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Spec/Unix.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package File::Spec::Unix;\n\nuse strict;\nuse vars qw($VERSION);\n\n$VERSION = '3.40';\n$VERSION =~ tr/_//;\n\n=head1 NAME\n\nFile::Spec::Unix - File::Spec for Unix, base for other File::Spec modules\n\n=head1 SYNOPSIS\n\n require File::Spec::Unix; # Done automatically by File::Spec\n\n=head1 DESCRIPTION\n\nMethods for manipulating file specifications.  Other File::Spec\nmodules, such as File::Spec::Mac, inherit from File::Spec::Unix and\noverride specific methods.\n\n=head1 METHODS\n\n=over 2\n\n=item canonpath()\n\nNo physical check on the filesystem, but a logical cleanup of a\npath. On UNIX eliminates successive slashes and successive \"/.\".\n\n    $cpath = File::Spec->canonpath( $path ) ;\n\nNote that this does *not* collapse F<x/../y> sections into F<y>.  This\nis by design.  If F</foo> on your system is a symlink to F</bar/baz>,\nthen F</foo/../quux> is actually F</bar/quux>, not F</quux> as a naive\nF<../>-removal would give you.  If you want to do this kind of\nprocessing, you probably want C<Cwd>'s C<realpath()> function to\nactually traverse the filesystem cleaning up paths like this.\n\n=cut\n\nsub canonpath {\n    my ($self,$path) = @_;\n    return unless defined $path;\n    \n    # Handle POSIX-style node names beginning with double slash (qnx, nto)\n    # (POSIX says: \"a pathname that begins with two successive slashes\n    # may be interpreted in an implementation-defined manner, although\n    # more than two leading slashes shall be treated as a single slash.\")\n    my $node = '';\n    my $double_slashes_special = $^O eq 'qnx' || $^O eq 'nto';\n\n\n    if ( $double_slashes_special\n         && ( $path =~ s{^(//[^/]+)/?\\z}{}s || $path =~ s{^(//[^/]+)/}{/}s ) ) {\n      $node = $1;\n    }\n    # This used to be\n    # $path =~ s|/+|/|g unless ($^O eq 'cygwin');\n    # but that made tests 29, 30, 35, 46, and 213 (as of #13272) to fail\n    # (Mainly because trailing \"\" directories didn't get stripped).\n    # Why would cygwin avoid collapsing multiple slashes into one? --jhi\n    $path =~ s|/{2,}|/|g;                            # xx////xx  -> xx/xx\n    $path =~ "..., 4096) = 4096
22042 read(4, "elsif ($] < 5.007) { # No ${^TAINT} before 5.8\n\t    @dirlist = grep { eval { eval('1'.substr $_,0,0) } } @dirlist;\n\t}\n    }\n    foreach (@dirlist) {\n\tnext unless defined && -d && -w _;\n\t$tmpdir = $_;\n\tlast;\n    }\n    $tmpdir = $self->curdir unless defined $tmpdir;\n    $tmpdir = defined $tmpdir && $self->canonpath($tmpdir);\n    return $tmpdir;\n}\n\nsub tmpdir {\n    return $tmpdir if defined $tmpdir;\n    $tmpdir = $_[0]->_tmpdir( $ENV{TMPDIR}, \"/tmp\" );\n}\n\n=item updir\n\nReturns a string representation of the parent directory.  \"..\" on UNIX.\n\n=cut\n\nsub updir { '..' }\n\n=item no_upwards\n\nGiven a list of file names, strip out those that refer to a parent\ndirectory. (Does not strip symlinks, only '.', '..', and equivalents.)\n\n=cut\n\nsub no_upwards {\n    my $self = shift;\n    return grep(!/^\\.{1,2}\\z/s, @_);\n}\n\n=item case_tolerant\n\nReturns a true or false value indicating, respectively, that alphabetic\nis not or is significant when comparing file specifications.\n\n=cut\n\nsub case_tolerant { 0 }\n\n=item file_name_is_absolute\n\nTakes as argument a path and returns true if it is an absolute path.\n\nThis does not consult the local filesystem on Unix, Win32, OS/2 or Mac \nOS (Classic).  It does consult the working environment for VMS (see\nL<File::Spec::VMS/file_name_is_absolute>).\n\n=cut\n\nsub file_name_is_absolute {\n    my ($self,$file) = @_;\n    return scalar($file =~ m:^/:s);\n}\n\n=item path\n\nTakes no argument, returns the environment variable PATH as an array.\n\n=cut\n\nsub path {\n    return () unless exists $ENV{PATH};\n    my @path = split(':', $ENV{PATH});\n    foreach (@path) { $_ = '.' if $_ eq '' }\n    return @path;\n}\n\n=item join\n\njoin is the same as catfile.\n\n=cut\n\nsub join {\n    my $self = shift;\n    return $self->catfile(@_);\n}\n\n=item splitpath\n\n    ($volume,$directories,$file) = File::Spec->splitpath( $path );\n    ($volume,$directories,$file) = File::Spec->splitpath( $path,\n                                                          $no_file );\n\nSplits a path into volume, directory, and filename portions. On systems\nwith no concept "..., 4096) = 4096
22042 brk(0x81f7000)                    = 0x81f7000
22042 brk(0x81f6000)                    = 0x81f6000
22042 read(4, ".= $file ;\n    }\n\n    return $directory ;\n}\n\n=item abs2rel\n\nTakes a destination path and an optional base path returns a relative path\nfrom the base path to the destination path:\n\n    $rel_path = File::Spec->abs2rel( $path ) ;\n    $rel_path = File::Spec->abs2rel( $path, $base ) ;\n\nIf $base is not present or '', then L<cwd()|Cwd> is used. If $base is\nrelative, then it is converted to absolute form using\nL</rel2abs()>. This means that it is taken to be relative to\nL<cwd()|Cwd>.\n\nOn systems that have a grammar that indicates filenames, this ignores the \n$base filename. Otherwise all path components are assumed to be\ndirectories.\n\nIf $path is relative, it is converted to absolute form using L</rel2abs()>.\nThis means that it is taken to be relative to L<cwd()|Cwd>.\n\nNo checks against the filesystem are made, so the result may not be correct if\nC<$base> contains symbolic links.  (Apply\nL<Cwd::abs_path()|Cwd/abs_path> beforehand if that\nis a concern.)  On VMS, there is interaction with the working environment, as\nlogicals and macros are expanded.\n\nBased on code written by Shigio Yamaguchi.\n\n=cut\n\nsub abs2rel {\n    my($self,$path,$base) = @_;\n    $base = $self->_cwd() unless defined $base and length $base;\n\n    ($path, $base) = map $self->canonpath($_), $path, $base;\n\n    my $path_directories;\n    my $base_directories;\n\n    if (grep $self->file_name_is_absolute($_), $path, $base) {\n\t($path, $base) = map $self->rel2abs($_), $path, $base;\n\n    my ($path_volume) = $self->splitpath($path, 1);\n    my ($base_volume) = $self->splitpath($base, 1);\n\n    # Can't relativize across volumes\n    return $path unless $path_volume eq $base_volume;\n\n\t$path_directories = ($self->splitpath($path, 1))[1];\n\t$base_directories = ($self->splitpath($base, 1))[1];\n\n    # For UNC paths, the user might give a volume like //foo/bar that\n    # strictly speaking has no directory portion.  Treat it as if it\n    # had the root directory for that volume.\n    if (!length($base_directories) and $self->file_name_is_absolute($base)) {\n      $base_directories "..., 4096) = 4096
22042 read(4, "t have a grammar that indicates filenames, this ignores\nthe $base filename. Otherwise all path components are assumed to be\ndirectories.\n\nIf $path is absolute, it is cleaned up and returned using L</canonpath()>.\n\nNo checks against the filesystem are made.  On VMS, there is\ninteraction with the working environment, as logicals and\nmacros are expanded.\n\nBased on code written by Shigio Yamaguchi.\n\n=cut\n\nsub rel2abs {\n    my ($self,$path,$base ) = @_;\n\n    # Clean up $path\n    if ( ! $self->file_name_is_absolute( $path ) ) {\n        # Figure out the effective $base and clean it up.\n        if ( !defined( $base ) || $base eq '' ) {\n\t    $base = $self->_cwd();\n        }\n        elsif ( ! $self->file_name_is_absolute( $base ) ) {\n            $base = $self->rel2abs( $base ) ;\n        }\n        else {\n            $base = $self->canonpath( $base ) ;\n        }\n\n        # Glom them together\n        $path = $self->catdir( $base, $path ) ;\n    }\n\n    return $self->canonpath( $path ) ;\n}\n\n=back\n\n=head1 COPYRIGHT\n\nCopyright (c) 2004 by the Perl 5 Porters.  All rights reserved.\n\nThis program is free software; you can redistribute it and/or modify\nit under the same terms as Perl itself.\n\nPlease submit bug reports and patches to perlbug@perl.org.\n\n=head1 SEE ALSO\n\nL<File::Spec>\n\n=cut\n\n# Internal routine to File::Spec, no point in making this public since\n# it is the standard Cwd interface.  Most of the platform-specific\n# File::Spec subclasses use this.\nsub _cwd {\n    require Cwd;\n    Cwd::getcwd();\n}\n\n\n# Internal method to reduce xx\\..\\yy -> yy\nsub _collapse {\n    my($fs, $path) = @_;\n\n    my $updir  = $fs->updir;\n    my $curdir = $fs->curdir;\n\n    my($vol, $dirs, $file) = $fs->splitpath($path);\n    my @dirs = $fs->splitdir($dirs);\n    pop @dirs if @dirs && $dirs[-1] eq '';\n\n    my @collapsed;\n    foreach my $dir (@dirs) {\n        if( $dir eq $updir              and   # if we have an updir\n            @collapsed                  and   # and something to collapse\n            length $collapsed[-1]       and   # and its not the root"..., 4096) = 2592
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Config.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Config.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Config.pm", {st_mode=S_IFREG|0444, st_size=2861, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Config.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# This file was created by configpm when Perl was built. Any changes\n# made to this file will be lost the next time perl is built.\n\n# for a description of the variables, please have a look at the\n# Glossary file, as written in the Porting folder, or use the url:\n# http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/Glossary\n\npackage Config;\nuse strict;\n# use warnings; Pulls in Carp\n# use vars pulls in Carp\n@Config::EXPORT = qw(%Config);\n@Config::EXPORT_OK = qw(myconfig config_sh config_vars config_re);\n\n# Need to stub all the functions to make code such as print Config::config_sh\n# keep working\n\nsub myconfig;\nsub config_sh;\nsub config_vars;\nsub config_re;\n\nmy %Export_Cache = map {($_ => 1)} (@Config::EXPORT, @Config::EXPORT_OK);\n\nour %Config;\n\n# Define our own import method to avoid pulling in the full Exporter:\nsub import {\n    my $pkg = shift;\n    @_ = @Config::EXPORT unless @_;\n\n    my @funcs = grep $_ ne '%Config', @_;\n    my $export_Config = @funcs < @_ ? 1 : 0;\n\n    no strict 'refs';\n    my $callpkg = caller(0);\n    foreach my $func (@funcs) {\n\tdie sprintf qq{\"%s\" is not exported by the %s module\\n},\n\t    $func, __PACKAGE__ unless $Export_Cache{$func};\n\t*{$callpkg.'::'.$func} = \\&{$func};\n    }\n\n    *{\"$callpkg\\::Config\"} = \\%Config if $export_Config;\n    return;\n}\n\ndie \"Perl lib version (5.12.4) doesn't match executable version ($])\"\n    unless $^V;\n\n$^V eq 5.12.4\n    or die \"Perl lib version (5.12.4) doesn't match executable version (\" .\n\tsprintf(\"v%vd\",$^V) . \")\";\n\n\nsub FETCH {\n    my($self, $key) = @_;\n\n    # check for cached value (which may be undef so we use exists not defined)\n    return $self->{$key} if exists $self->{$key};\n\n    return $self->fetch_string($key);\n}\nsub TIEHASH {\n    bless $_[1], $_[0];\n}\n\nsub DESTROY { }\n\nsub AUTOLOAD {\n    require 'Config_heavy.pl';\n    goto \\&launcher unless $Config::AUTOLOAD =~ /launcher$/;\n    die \"&Config::AUTOLOAD failed on $Config::AUTOLOAD\";\n}\n\n# tie returns the object, so the value returned to require will be true.\ntie %Config, 'Config', {\n    archlibexp"..., 4096) = 2861
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Scalar/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Scalar/Util.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Scalar/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Scalar/Util.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Scalar/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Scalar/Util.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Scalar/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Scalar/Util.pm", {st_mode=S_IFREG|0444, st_size=8300, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Scalar/Util.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# Scalar::Util.pm\n#\n# Copyright (c) 1997-2007 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n\npackage Scalar::Util;\n\nuse strict;\nrequire Exporter;\nrequire List::Util; # List::Util loads the XS\n\nour @ISA       = qw(Exporter);\nour @EXPORT_OK = qw(\n  blessed\n  dualvar\n  isdual\n  isvstring\n  isweak\n  looks_like_number\n  openhandle\n  readonly\n  refaddr\n  reftype\n  set_prototype\n  tainted\n  weaken\n);\nour $VERSION    = \"1.27\";\n$VERSION   = eval $VERSION;\n\nour @EXPORT_FAIL;\n\nunless (defined &weaken) {\n  push @EXPORT_FAIL, qw(weaken);\n}\nunless (defined &isweak) {\n  push @EXPORT_FAIL, qw(isweak isvstring);\n}\nunless (defined &isvstring) {\n  push @EXPORT_FAIL, qw(isvstring);\n}\n\nsub export_fail {\n  if (grep { /^(?:weaken|isweak)$/ } @_ ) {\n    require Carp;\n    Carp::croak(\"Weak references are not implemented in the version of perl\");\n  }\n\n  if (grep { /^isvstring$/ } @_ ) {\n    require Carp;\n    Carp::croak(\"Vstrings are not implemented in the version of perl\");\n  }\n\n  @_;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nScalar::Util - A selection of general-utility scalar subroutines\n\n=head1 SYNOPSIS\n\n    use Scalar::Util qw(blessed dualvar isdual readonly refaddr reftype\n                        tainted weaken isweak isvstring looks_like_number\n                        set_prototype);\n                        # and other useful utils appearing below\n\n=head1 DESCRIPTION\n\nC<Scalar::Util> contains a selection of subroutines that people have\nexpressed would be nice to have in the perl core, but the usage would\nnot really be high enough to warrant the use of a keyword, and the size\nso small such that being individual extensions would be wasteful.\n\nBy default C<Scalar::Util> does not export any subroutines. The\nsubroutines defined are\n\n=over 4\n\n=item blessed EXPR\n\nIf EXPR evaluates to a blessed reference the name of the package\nthat it is blessed into is returned. Otherwise C<undef> is returned.\n\n   $scalar = \"foo\";\n   $class  = blesse"..., 4096) = 4096
22042 _llseek(4, 1109, [1109], SEEK_SET) = 0
22042 _llseek(4, 0, [1109], SEEK_CUR)   = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/List/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/List/Util.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/List/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/List/Util.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/List/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/List/Util.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/List/Util.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/List/Util.pm", {st_mode=S_IFREG|0444, st_size=6391, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/List/Util.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# List::Util.pm\n#\n# Copyright (c) 1997-2009 Graham Barr <gbarr@pobox.com>. All rights reserved.\n# This program is free software; you can redistribute it and/or\n# modify it under the same terms as Perl itself.\n#\n# This module is normally only loaded if the XS module is not available\n\npackage List::Util;\n\nuse strict;\nrequire Exporter;\n\nour @ISA        = qw(Exporter);\nour @EXPORT_OK  = qw(first min max minstr maxstr reduce sum sum0 shuffle);\nour $VERSION    = \"1.27\";\nour $XS_VERSION = $VERSION;\n$VERSION    = eval $VERSION;\n\nrequire XSLoader;\nXSLoader::load('List::Util', $XS_VERSION);\n\nsub sum0\n{\n   return 0 unless @_;\n   goto &sum;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nList::Util - A selection of general-utility list subroutines\n\n=head1 SYNOPSIS\n\n    use List::Util qw(first max maxstr min minstr reduce shuffle sum);\n\n=head1 DESCRIPTION\n\nC<List::Util> contains a selection of subroutines that people have\nexpressed would be nice to have in the perl core, but the usage would\nnot really be high enough to warrant the use of a keyword, and the size\nso small such that being individual extensions would be wasteful.\n\nBy default C<List::Util> does not export any subroutines. The\nsubroutines defined are\n\n=over 4\n\n=item first BLOCK LIST\n\nSimilar to C<grep> in that it evaluates BLOCK setting C<$_> to each element\nof LIST in turn. C<first> returns the first element where the result from\nBLOCK is a true value. If BLOCK never returns true or LIST was empty then\nC<undef> is returned.\n\n    $foo = first { defined($_) } @list    # first defined value in @list\n    $foo = first { $_ > $value } @list    # first value in @list which\n                                          # is greater than $value\n\nThis function could be implemented using C<reduce> like this\n\n    $foo = reduce { defined($a) ? $a : wanted($b) ? $b : undef } undef, @list\n\nfor example wanted() could be defined() which would return the first\ndefined value in @list\n\n=item max LIST\n\nReturns the entry in the list with the highest numerical value. If the\nlist is empty then C<undef> is retu"..., 4096) = 4096
22042 _llseek(4, 652, [652], SEEK_SET)  = 0
22042 _llseek(4, 0, [652], SEEK_CUR)    = 0
22042 close(4)                          = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/List/Util/Util.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/List/Util/Util.so", {st_mode=S_IFREG|0555, st_size=26116, ...}) = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/List/Util/Util.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/List/Util/Util.so", O_RDONLY|O_CLOEXEC) = 4
22042 read(4, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0000\36\0\0004\0\0\0\364a\0\0\0\0\0\0004\0 \0\7\0(\0\32\0\31\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\264U\0\0\264U\0\0\5\0\0\0\0\20\0\0\1\0\0\0X^\0\0Xn\0\0Xn\0\0\254\2\0\0\264\2\0\0\6\0\0\0\0\20\0\0\2\0\0\0l^\0\0ln\0\0ln\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0P\345td`U\0\0`U\0\0`U\0\0\24\0\0\0\24\0\0\0\4\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345tdX^\0\0Xn\0\0Xn\0\0\250\1\0\0\250\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\251\0\0\0u\0\0\0D\0\0\0B\0\0\0\0\0\0\0\0\0\0\0Z\0\0\0;\0\0\0e\0\0\0j\0\0\0\0\0\0\0\2\0\0\0I\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\35\0\0\0P\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0n\0\0\0\0\0\0\0O\0\0\0\0\0\0\0&\0\0\0:\0\0\0]\0\0\0\0\0\0\0\0\0\0\0^\0\0\0\0\0\0\0\0\0\0\0F\0\0\0H\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\37\0\0\0\0\0\0\0\0\0\0\0p\0\0\0J\0\0\0\0\0\0\0(\0\0\0\31\0\0\0G\0\0\0+\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\3\0\0\0001\0\0\0\0\0\0\0\0\0\0\0>\0\0\0\33\0\0\0E\0\0\0", 512) = 512
22042 fstat64(4, {st_mode=S_IFREG|0555, st_size=26116, ...}) = 0
22042 mmap2(NULL, 28940, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0xb7216000
22042 mmap2(0xb721c000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x5) = 0xb721c000
22042 close(4)                          = 0
22042 mprotect(0xb721c000, 4096, PROT_READ) = 0
22042 stat64("/etc/perl/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Temp.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Temp.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Temp.pm", {st_mode=S_IFREG|0444, st_size=74502, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/File/Temp.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package File::Temp;\n\n=head1 NAME\n\nFile::Temp - return name and handle of a temporary file safely\n\n=begin __INTERNALS\n\n=head1 PORTABILITY\n\nThis section is at the top in order to provide easier access to\nporters.  It is not expected to be rendered by a standard pod\nformatting tool. Please skip straight to the SYNOPSIS section if you\nare not trying to port this module to a new platform.\n\nThis module is designed to be portable across operating systems and it\ncurrently supports Unix, VMS, DOS, OS/2, Windows and Mac OS\n(Classic). When porting to a new OS there are generally three main\nissues that have to be solved:\n\n=over 4\n\n=item *\n\nCan the OS unlink an open file? If it can not then the\nC<_can_unlink_opened_file> method should be modified.\n\n=item *\n\nAre the return values from C<stat> reliable? By default all the\nreturn values from C<stat> are compared when unlinking a temporary\nfile using the filename and the handle. Operating systems other than\nunix do not always have valid entries in all fields. If C<unlink0> fails\nthen the C<stat> comparison should be modified accordingly.\n\n=item *\n\nSecurity. Systems that can not support a test for the sticky bit\non a directory can not use the MEDIUM and HIGH security tests.\nThe C<_can_do_level> method should be modified accordingly.\n\n=back\n\n=end __INTERNALS\n\n=head1 SYNOPSIS\n\n  use File::Temp qw/ tempfile tempdir /;\n\n  $fh = tempfile();\n  ($fh, $filename) = tempfile();\n\n  ($fh, $filename) = tempfile( $template, DIR => $dir);\n  ($fh, $filename) = tempfile( $template, SUFFIX => '.dat');\n  ($fh, $filename) = tempfile( $template, TMPDIR => 1 );\n\n  binmode( $fh, \":utf8\" );\n\n  $dir = tempdir( CLEANUP => 1 );\n  ($fh, $filename) = tempfile( DIR => $dir );\n\nObject interface:\n\n  require File::Temp;\n  use File::Temp ();\n  use File::Temp qw/ :seekable /;\n\n  $fh = File::Temp->new();\n  $fname = $fh->filename;\n\n  $fh = File::Temp->new(TEMPLATE => $template);\n  $fname = $fh->filename;\n\n  $tmp = File::Temp->new( UNLINK => 0, SUFFIX => '.dat' );\n  print $tmp \"Some data\\n\";\n  print \"Filename is $tmp\\"..., 4096) = 4096
22042 read(4, "\n\n# 5.6.0 gives us S_IWOTH, S_IWGRP, our and auto-vivifying filehandls\n# People would like a version on 5.004 so give them what they want :-)\nuse 5.004;\nuse strict;\nuse Carp;\nuse File::Spec 0.8;\nuse File::Path qw/ rmtree /;\nuse Fcntl 1.03;\nuse IO::Seekable;               # For SEEK_*\nuse Errno;\nrequire VMS::Stdio if $^O eq 'VMS';\n\n# pre-emptively load Carp::Heavy. If we don't when we run out of file\n# handles and attempt to call croak() we get an error message telling\n# us that Carp::Heavy won't load rather than an error telling us we\n# have run out of file handles. We either preload croak() or we\n# switch the calls to croak from _gettemp() to use die.\neval { require Carp::Heavy; };\n\n# Need the Symbol package if we are running older perl\nrequire Symbol if $] < 5.006;\n\n### For the OO interface\nuse base qw/ IO::Handle IO::Seekable /;\nuse overload '\"\"' => \"STRINGIFY\", fallback => 1;\n\n# use 'our' on v5.6.0\nuse vars qw($VERSION @EXPORT_OK %EXPORT_TAGS $DEBUG $KEEP_ALL);\n\n$DEBUG = 0;\n$KEEP_ALL = 0;\n\n# We are exporting functions\n\nuse base qw/Exporter/;\n\n# Export list - to allow fine tuning of export table\n\n@EXPORT_OK = qw{\n                 tempfile\n                 tempdir\n                 tmpnam\n                 tmpfile\n                 mktemp\n                 mkstemp\n                 mkstemps\n                 mkdtemp\n                 unlink0\n                 cleanup\n                 SEEK_SET\n                 SEEK_CUR\n                 SEEK_END\n             };\n\n# Groups of functions for export\n\n%EXPORT_TAGS = (\n                'POSIX' => [qw/ tmpnam tmpfile /],\n                'mktemp' => [qw/ mktemp mkstemp mkstemps mkdtemp/],\n                'seekable' => [qw/ SEEK_SET SEEK_CUR SEEK_END /],\n               );\n\n# add contents of these tags to @EXPORT\nExporter::export_tags('POSIX','mktemp','seekable');\n\n# Version number\n\n$VERSION = '0.22';\n\n# This is a list of characters that can be used in random filenames\n\nmy @CHARS = (qw/ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n                 a b c d e f g h i j k l m n "..., 4096) = 4096
22042 stat64("/etc/perl/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/File/Path.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Path.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/File/Path.pm", {st_mode=S_IFREG|0444, st_size=33092, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/File/Path.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package File::Path;\n\nuse 5.005_04;\nuse strict;\n\nuse Cwd 'getcwd';\nuse File::Basename ();\nuse File::Spec     ();\n\nBEGIN {\n    if ($] < 5.006) {\n        # can't say 'opendir my $dh, $dirname'\n        # need to initialise $dh\n        eval \"use Symbol\";\n    }\n}\n\nuse Exporter ();\nuse vars qw($VERSION @ISA @EXPORT @EXPORT_OK);\n$VERSION   = '2.08_01';\n@ISA       = qw(Exporter);\n@EXPORT    = qw(mkpath rmtree);\n@EXPORT_OK = qw(make_path remove_tree);\n\nmy $Is_VMS     = $^O eq 'VMS';\nmy $Is_MacOS   = $^O eq 'MacOS';\n\n# These OSes complain if you want to remove a file that you have no\n# write permission to:\nmy $Force_Writeable = grep {$^O eq $_} qw(amigaos dos epoc MSWin32 MacOS os2);\n\n# Unix-like systems need to stat each directory in order to detect\n# race condition. MS-Windows is immune to this particular attack.\nmy $Need_Stat_Check = !($^O eq 'MSWin32');\n\nsub _carp {\n    require Carp;\n    goto &Carp::carp;\n}\n\nsub _croak {\n    require Carp;\n    goto &Carp::croak;\n}\n\nsub _error {\n    my $arg     = shift;\n    my $message = shift;\n    my $object  = shift;\n\n    if ($arg->{error}) {\n        $object = '' unless defined $object;\n        $message .= \": $!\" if $!;\n        push @{${$arg->{error}}}, {$object => $message};\n    }\n    else {\n        _carp(defined($object) ? \"$message for $object: $!\" : \"$message: $!\");\n    }\n}\n\nsub make_path {\n    push @_, {} unless @_ and UNIVERSAL::isa($_[-1],'HASH');\n    goto &mkpath;\n}\n\nsub mkpath {\n    my $old_style = !(@_ and UNIVERSAL::isa($_[-1],'HASH'));\n\n    my $arg;\n    my $paths;\n\n    if ($old_style) {\n        my ($verbose, $mode);\n        ($paths, $verbose, $mode) = @_;\n        $paths = [$paths] unless UNIVERSAL::isa($paths,'ARRAY');\n        $arg->{verbose} = $verbose;\n        $arg->{mode}    = defined $mode ? $mode : 0777;\n    }\n    else {\n        $arg = pop @_;\n        $arg->{mode}      = delete $arg->{mask} if exists $arg->{mask};\n        $arg->{mode}      = 0777 unless exists $arg->{mode};\n        ${$arg->{error}}  = [] if exists $arg->{error};\n        $arg->{owner}     = delete $arg->"..., 4096) = 4096
22042 read(5, "              if (!chown $arg->{owner}, $arg->{group}, $path) {\n                    _error($arg, \"Cannot change ownership of $path to $arg->{owner}:$arg->{group}\");\n                }\n            }\n        }\n        else {\n            my $save_bang = $!;\n            my ($e, $e1) = ($save_bang, $^E);\n            $e .= \"; $e1\" if $e ne $e1;\n            # allow for another process to have created it meanwhile\n            if (!-d $path) {\n                $! = $save_bang;\n                if ($arg->{error}) {\n                    push @{${$arg->{error}}}, {$path => $e};\n                }\n                else {\n                    _croak(\"mkdir $path: $e\");\n                }\n            }\n        }\n    }\n    return @created;\n}\n\nsub remove_tree {\n    push @_, {} unless @_ and UNIVERSAL::isa($_[-1],'HASH');\n    goto &rmtree;\n}\n\nsub _is_subdir {\n    my($dir, $test) = @_;\n\n    my($dv, $dd) = File::Spec->splitpath($dir, 1);\n    my($tv, $td) = File::Spec->splitpath($test, 1);\n\n    # not on same volume\n    return 0 if $dv ne $tv;\n\n    my @d = File::Spec->splitdir($dd);\n    my @t = File::Spec->splitdir($td);\n\n    # @t can't be a subdir if it's shorter than @d\n    return 0 if @t < @d;\n\n    return join('/', @d) eq join('/', splice @t, 0, +@d);\n}\n\nsub rmtree {\n    my $old_style = !(@_ and UNIVERSAL::isa($_[-1],'HASH'));\n\n    my $arg;\n    my $paths;\n\n    if ($old_style) {\n        my ($verbose, $safe);\n        ($paths, $verbose, $safe) = @_;\n        $arg->{verbose} = $verbose;\n        $arg->{safe}    = defined $safe    ? $safe    : 0;\n\n        if (defined($paths) and length($paths)) {\n            $paths = [$paths] unless UNIVERSAL::isa($paths,'ARRAY');\n        }\n        else {\n            _carp (\"No root path(s) specified\\n\");\n            return 0;\n        }\n    }\n    else {\n        $arg = pop @_;\n        ${$arg->{error}}  = [] if exists $arg->{error};\n        ${$arg->{result}} = [] if exists $arg->{result};\n        $paths = [@_];\n    }\n\n    $arg->{prefix} = '';\n    $arg->{depth}  = 0;\n\n    my @clean_path;\n    $arg->{cwd} = getcwd() o"..., 4096) = 4096
22042 read(5, "path(VMS::Filespec::pathify($root)) if $Is_VMS;\n\n            if (!chdir($root)) {\n                # see if we can escalate privileges to get in\n                # (e.g. funny protection mask such as -w- instead of rwx)\n                $perm &= 07777;\n                my $nperm = $perm | 0700;\n                if (!($arg->{safe} or $nperm == $perm or chmod($nperm, $root))) {\n                    _error($arg, \"cannot make child directory read-write-exec\", $canon);\n                    next ROOT_DIR;\n                }\n                elsif (!chdir($root)) {\n                    _error($arg, \"cannot chdir to child\", $canon);\n                    next ROOT_DIR;\n                }\n            }\n\n            my ($cur_dev, $cur_inode, $perm) = (stat $curdir)[0,1,2] or do {\n                _error($arg, \"cannot stat current working directory\", $canon);\n                next ROOT_DIR;\n            };\n\n            if ($Need_Stat_Check) {\n                ($ldev eq $cur_dev and $lino eq $cur_inode)\n                    or _croak(\"directory $canon changed before chdir, expected dev=$ldev ino=$lino, actual dev=$cur_dev ino=$cur_inode, aborting.\");\n            }\n\n            $perm &= 07777; # don't forget setuid, setgid, sticky bits\n            my $nperm = $perm | 0700;\n\n            # notabene: 0700 is for making readable in the first place,\n            # it's also intended to change it to writable in case we have\n            # to recurse in which case we are better than rm -rf for \n            # subtrees with strange permissions\n\n            if (!($arg->{safe} or $nperm == $perm or chmod($nperm, $curdir))) {\n                _error($arg, \"cannot make directory read+writeable\", $canon);\n                $nperm = $perm;\n            }\n\n            my $d;\n            $d = gensym() if $] < 5.006;\n            if (!opendir $d, $curdir) {\n                _error($arg, \"cannot opendir\", $canon);\n                @files = ();\n            }\n            else {\n                no strict 'refs';\n                if (!defined ${\"\\cTAINT\"} or ${\"\\cTAINT\"}) {\n "..., 4096) = 4096
22042 brk(0x8217000)                    = 0x8217000
22042 read(5, "non, expected dev=$ldev ino=$lino, actual dev=$cur_dev ino=$cur_inode, aborting.\");\n            }\n\n            if ($arg->{depth} or !$arg->{keep_root}) {\n                if ($arg->{safe} &&\n                    ($Is_VMS ? !&VMS::Filespec::candelete($root) : !-w $root)) {\n                    print \"skipped $root\\n\" if $arg->{verbose};\n                    next ROOT_DIR;\n                }\n                if ($Force_Writeable and !chmod $perm | 0700, $root) {\n                    _error($arg, \"cannot make directory writeable\", $canon);\n                }\n                print \"rmdir $root\\n\" if $arg->{verbose};\n                if (rmdir $root) {\n                    push @{${$arg->{result}}}, $root if $arg->{result};\n                    ++$count;\n                }\n                else {\n                    _error($arg, \"cannot remove directory\", $canon);\n                    if ($Force_Writeable && !chmod($perm, ($Is_VMS ? VMS::Filespec::fileify($root) : $root))\n                    ) {\n                        _error($arg, sprintf(\"cannot restore permissions to 0%o\",$perm), $canon);\n                    }\n                }\n            }\n        }\n        else {\n            # not a directory\n            $root = VMS::Filespec::vmsify(\"./$root\")\n                if $Is_VMS\n                   && !File::Spec->file_name_is_absolute($root)\n                   && ($root !~ m/(?<!\\^)[\\]>]+/);  # not already in VMS syntax\n\n            if ($arg->{safe} &&\n                ($Is_VMS ? !&VMS::Filespec::candelete($root)\n                         : !(-l $root || -w $root)))\n            {\n                print \"skipped $root\\n\" if $arg->{verbose};\n                next ROOT_DIR;\n            }\n\n            my $nperm = $perm & 07777 | 0600;\n            if ($Force_Writeable and $nperm != $perm and not chmod $nperm, $root) {\n                _error($arg, \"cannot make file writeable\", $canon);\n            }\n            print \"unlink $canon\\n\" if $arg->{verbose};\n            # delete all versions under VMS\n            for (;;) {\n                if (unl"..., 4096) = 4096
22042 _llseek(5, 15077, [15077], SEEK_SET) = 0
22042 _llseek(5, 0, [15077], SEEK_CUR)  = 0
22042 close(5)                          = 0
22042 stat64("/etc/perl/IO/Seekable.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/IO/Seekable.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IO/Seekable.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IO/Seekable.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IO/Seekable.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IO/Seekable.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO/Seekable.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO/Seekable.pm", {st_mode=S_IFREG|0444, st_size=2935, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO/Seekable.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "#\n\npackage IO::Seekable;\n\n=head1 NAME\n\nIO::Seekable - supply seek based methods for I/O objects\n\n=head1 SYNOPSIS\n\n    use IO::Seekable;\n    package IO::Something;\n    @ISA = qw(IO::Seekable);\n\n=head1 DESCRIPTION\n\nC<IO::Seekable> does not have a constructor of its own as it is intended to\nbe inherited by other C<IO::Handle> based objects. It provides methods\nwhich allow seeking of the file descriptors.\n\n=over 4\n\n=item $io->getpos\n\nReturns an opaque value that represents the current position of the\nIO::File, or C<undef> if this is not possible (eg an unseekable stream such\nas a terminal, pipe or socket). If the fgetpos() function is available in\nyour C library it is used to implements getpos, else perl emulates getpos\nusing C's ftell() function.\n\n=item $io->setpos\n\nUses the value of a previous getpos call to return to a previously visited\nposition. Returns \"0 but true\" on success, C<undef> on failure.\n\n=back\n\nSee L<perlfunc> for complete descriptions of each of the following\nsupported C<IO::Seekable> methods, which are just front ends for the\ncorresponding built-in functions:\n\n=over 4\n\n=item $io->seek ( POS, WHENCE )\n\nSeek the IO::File to position POS, relative to WHENCE:\n\n=over 8\n\n=item WHENCE=0 (SEEK_SET)\n\nPOS is absolute position. (Seek relative to the start of the file)\n\n=item WHENCE=1 (SEEK_CUR)\n\nPOS is an offset from the current position. (Seek relative to current)\n\n=item WHENCE=2 (SEEK_END)\n\nPOS is an offset from the end of the file. (Seek relative to end)\n\n=back\n\nThe SEEK_* constants can be imported from the C<Fcntl> module if you\ndon't wish to use the numbers C<0> C<1> or C<2> in your code.\n\nReturns C<1> upon success, C<0> otherwise.\n\n=item $io->sysseek( POS, WHENCE )\n\nSimilar to $io->seek, but sets the IO::File's position using the system\ncall lseek(2) directly, so will confuse most perl IO operators except\nsysread and syswrite (see L<perlfunc> for full details)\n\nReturns the new position, or C<undef> on failure.  A position\nof zero is returned as the string C<\"0 but true\">\n\n=item $io->tell\n\nReturns the IO"..., 4096) = 2935
22042 stat64("/etc/perl/IO/Handle.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/IO/Handle.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IO/Handle.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IO/Handle.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IO/Handle.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IO/Handle.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO/Handle.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO/Handle.pm", {st_mode=S_IFREG|0444, st_size=16421, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO/Handle.pm", O_RDONLY|O_LARGEFILE) = 6
22042 ioctl(6, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f48) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(6, 0, [0], SEEK_CUR)      = 0
22042 read(6, "package IO::Handle;\n\n=head1 NAME\n\nIO::Handle - supply object methods for I/O handles\n\n=head1 SYNOPSIS\n\n    use IO::Handle;\n\n    $io = new IO::Handle;\n    if ($io->fdopen(fileno(STDIN),\"r\")) {\n        print $io->getline;\n        $io->close;\n    }\n\n    $io = new IO::Handle;\n    if ($io->fdopen(fileno(STDOUT),\"w\")) {\n        $io->print(\"Some text\\n\");\n    }\n\n    # setvbuf is not available by default on Perls 5.8.0 and later.\n    use IO::Handle '_IOLBF';\n    $io->setvbuf($buffer_var, _IOLBF, 1024);\n\n    undef $io;       # automatically closes the file if it's open\n\n    autoflush STDOUT 1;\n\n=head1 DESCRIPTION\n\nC<IO::Handle> is the base class for all other IO handle classes. It is\nnot intended that objects of C<IO::Handle> would be created directly,\nbut instead C<IO::Handle> is inherited from by several other classes\nin the IO hierarchy.\n\nIf you are reading this documentation, looking for a replacement for\nthe C<FileHandle> package, then I suggest you read the documentation\nfor C<IO::File> too.\n\n=head1 CONSTRUCTOR\n\n=over 4\n\n=item new ()\n\nCreates a new C<IO::Handle> object.\n\n=item new_from_fd ( FD, MODE )\n\nCreates an C<IO::Handle> like C<new> does.\nIt requires two parameters, which are passed to the method C<fdopen>;\nif the fdopen fails, the object is destroyed. Otherwise, it is returned\nto the caller.\n\n=back\n\n=head1 METHODS\n\nSee L<perlfunc> for complete descriptions of each of the following\nsupported C<IO::Handle> methods, which are just front ends for the\ncorresponding built-in functions:\n\n    $io->close\n    $io->eof\n    $io->fcntl( FUNCTION, SCALAR )\n    $io->fileno\n    $io->format_write( [FORMAT_NAME] )\n    $io->getc\n    $io->ioctl( FUNCTION, SCALAR )\n    $io->read ( BUF, LEN, [OFFSET] )\n    $io->print ( ARGS )\n    $io->printf ( FMT, [ARGS] )\n    $io->say ( ARGS )\n    $io->stat\n    $io->sysread ( BUF, LEN, [OFFSET] )\n    $io->syswrite ( BUF, [LEN, [OFFSET]] )\n    $io->truncate ( LEN )\n\nSee L<perlvar> for complete descriptions of each of the following\nsupported C<IO::Handle> methods.  All of them return the previous\n"..., 4096) = 4096
22042 read(6, "e given ordinal value back onto the given\nhandle's input stream.  Only one character of pushback per handle is\nguaranteed.\n\n=item $io->write ( BUF, LEN [, OFFSET ] )\n\nThis C<write> is like C<write> found in C, that is it is the\nopposite of read. The wrapper for the perl C<write> function is\ncalled C<format_write>.\n\n=item $io->error\n\nReturns a true value if the given handle has experienced any errors\nsince it was opened or since the last call to C<clearerr>, or if the\nhandle is invalid. It only returns false for a valid handle with no\noutstanding errors.\n\n=item $io->clearerr\n\nClear the given handle's error indicator. Returns -1 if the handle is\ninvalid, 0 otherwise.\n\n=item $io->sync\n\nC<sync> synchronizes a file's in-memory state  with  that  on the\nphysical medium. C<sync> does not operate at the perlio api level, but\noperates on the file descriptor (similar to sysread, sysseek and\nsystell). This means that any data held at the perlio api level will not\nbe synchronized. To synchronize data that is buffered at the perlio api\nlevel you must use the flush method. C<sync> is not implemented on all\nplatforms. Returns \"0 but true\" on success, C<undef> on error, C<undef>\nfor an invalid handle. See L<fsync(3c)>.\n\n=item $io->flush\n\nC<flush> causes perl to flush any buffered data at the perlio api level.\nAny unread data in the buffer will be discarded, and any unwritten data\nwill be written to the underlying file descriptor. Returns \"0 but true\"\non success, C<undef> on error.\n\n=item $io->printflush ( ARGS )\n\nTurns on autoflush, print ARGS and then restores the autoflush status of the\nC<IO::Handle> object. Returns the return value from print.\n\n=item $io->blocking ( [ BOOL ] )\n\nIf called with an argument C<blocking> will turn on non-blocking IO if\nC<BOOL> is false, and turn it off if C<BOOL> is true.\n\nC<blocking> will return the value of the previous setting, or the\ncurrent setting if C<BOOL> is not given. \n\nIf an error occurs C<blocking> will return undef and C<$!> will be set.\n\n=back\n\n\nIf the C functions setbuf() and/or set"..., 4096) = 4096
22042 read(6, "es with its own name separated by _'s. For example the IO::Socket\nmodule keeps a C<timeout> variable in 'io_socket_timeout'.\n\n=head1 SEE ALSO\n\nL<perlfunc>, \nL<perlop/\"I/O Operators\">,\nL<IO::File>\n\n=head1 BUGS\n\nDue to backwards compatibility, all filehandles resemble objects\nof class C<IO::Handle>, or actually classes derived from that class.\nThey actually aren't.  Which means you can't derive your own \nclass from C<IO::Handle> and inherit those methods.\n\n=head1 HISTORY\n\nDerived from FileHandle.pm by Graham Barr E<lt>F<gbarr@pobox.com>E<gt>\n\n=cut\n\nuse 5.006_001;\nuse strict;\nour($VERSION, @EXPORT_OK, @ISA);\nuse Carp;\nuse Symbol;\nuse SelectSaver;\nuse IO ();\t# Load the XS module\n\nrequire Exporter;\n@ISA = qw(Exporter);\n\n$VERSION = \"1.28\";\n$VERSION = eval $VERSION;\n\n@EXPORT_OK = qw(\n    autoflush\n    output_field_separator\n    output_record_separator\n    input_record_separator\n    input_line_number\n    format_page_number\n    format_lines_per_page\n    format_lines_left\n    format_name\n    format_top_name\n    format_line_break_characters\n    format_formfeed\n    format_write\n\n    print\n    printf\n    say\n    getline\n    getlines\n\n    printflush\n    flush\n\n    SEEK_SET\n    SEEK_CUR\n    SEEK_END\n    _IOFBF\n    _IOLBF\n    _IONBF\n);\n\n################################################\n## Constructors, destructors.\n##\n\nsub new {\n    my $class = ref($_[0]) || $_[0] || \"IO::Handle\";\n    @_ == 1 or croak \"usage: new $class\";\n    my $io = gensym;\n    bless $io, $class;\n}\n\nsub new_from_fd {\n    my $class = ref($_[0]) || $_[0] || \"IO::Handle\";\n    @_ == 3 or croak \"usage: new_from_fd $class FD, MODE\";\n    my $io = gensym;\n    shift;\n    IO::Handle::fdopen($io, @_)\n\tor return undef;\n    bless $io, $class;\n}\n\n#\n# There is no need for DESTROY to do anything, because when the\n# last reference to an IO object is gone, Perl automatically\n# closes its associated files (if any).  However, to avoid any\n# attempts to autoload DESTROY, we here define it to do nothing.\n#\nsub DESTROY {}\n\n\n################################################\n## Open and"..., 4096) = 4096
22042 stat64("/etc/perl/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/SelectSaver.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/SelectSaver.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/SelectSaver.pm", {st_mode=S_IFREG|0444, st_size=1076, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/SelectSaver.pm", O_RDONLY|O_LARGEFILE) = 7
22042 ioctl(7, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08a48) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(7, 0, [0], SEEK_CUR)      = 0
22042 read(7, "package SelectSaver;\n\nour $VERSION = '1.02';\n\n=head1 NAME\n\nSelectSaver - save and restore selected file handle\n\n=head1 SYNOPSIS\n\n    use SelectSaver;\n\n    {\n       my $saver = SelectSaver->new(FILEHANDLE);\n       # FILEHANDLE is selected\n    }\n    # previous handle is selected\n\n    {\n       my $saver = SelectSaver->new;\n       # new handle may be selected, or not\n    }\n    # previous handle is selected\n\n=head1 DESCRIPTION\n\nA C<SelectSaver> object contains a reference to the file handle that\nwas selected when it was created.  If its C<new> method gets an extra\nparameter, then that parameter is selected; otherwise, the selected\nfile handle remains unchanged.\n\nWhen a C<SelectSaver> is destroyed, it re-selects the file handle\nthat was selected when it was created.\n\n=cut\n\nrequire 5.000;\nuse Carp;\nuse Symbol;\n\nsub new {\n    @_ >= 1 && @_ <= 2 or croak 'usage: SelectSaver->new( [FILEHANDLE] )';\n    my $fh = select;\n    my $self = bless \\$fh, $_[0];\n    select qualify($_[1], caller) if @_ > 1;\n    $self;\n}\n\nsub DESTROY {\n    my $self = $_[0];\n    select $$self;\n}\n\n1;\n", 4096) = 1076
22042 read(7, "", 4096)                 = 0
22042 close(7)                          = 0
22042 stat64("/etc/perl/IO.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/IO.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IO.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/IO.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IO.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/IO.pm", 0xbff08c70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO.pmc", 0xbff08d00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO.pm", {st_mode=S_IFREG|0444, st_size=1401, ...}) = 0
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/IO.pm", O_RDONLY|O_LARGEFILE) = 7
22042 ioctl(7, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08a48) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(7, 0, [0], SEEK_CUR)      = 0
22042 read(7, "#\n\npackage IO;\n\nuse XSLoader ();\nuse Carp;\nuse strict;\nuse warnings;\n\nour $VERSION = \"1.25\";\nXSLoader::load 'IO', $VERSION;\n\nsub import {\n    shift;\n\n    warnings::warnif('deprecated', qq{Parameterless \"use IO\" deprecated})\n        if @_ == 0 ;\n    \n    my @l = @_ ? @_ : qw(Handle Seekable File Pipe Socket Dir);\n\n    eval join(\"\", map { \"require IO::\" . (/(\\w+)/)[0] . \";\\n\" } @l)\n\tor croak $@;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nIO - load various IO modules\n\n=head1 SYNOPSIS\n\n    use IO qw(Handle File);  # loads IO modules, here IO::Handle, IO::File\n    use IO;                  # DEPRECATED\n\n=head1 DESCRIPTION\n\nC<IO> provides a simple mechanism to load several of the IO modules\nin one go.  The IO modules belonging to the core are:\n\n      IO::Handle\n      IO::Seekable\n      IO::File\n      IO::Pipe\n      IO::Socket\n      IO::Dir\n      IO::Select\n      IO::Poll\n\nSome other IO modules don't belong to the perl core but can be loaded\nas well if they have been installed from CPAN.  You can discover which\nones exist by searching for \"^IO::\" on http://search.cpan.org.\n\nFor more information on any of these modules, please see its respective\ndocumentation.\n\n=head1 DEPRECATED\n\n    use IO;                # loads all the modules listed below\n\nThe loaded modules are IO::Handle, IO::Seekable, IO::File, IO::Pipe,\nIO::Socket, IO::Dir.  You should instead explicitly import the IO\nmodules you want.\n\n=cut\n\n", 4096) = 1401
22042 _llseek(7, 412, [412], SEEK_SET)  = 0
22042 _llseek(7, 0, [412], SEEK_CUR)    = 0
22042 close(7)                          = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/IO/IO.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/IO/IO.so", {st_mode=S_IFREG|0555, st_size=17852, ...}) = 0
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/IO/IO.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/auto/IO/IO.so", O_RDONLY|O_CLOEXEC) = 7
22042 read(7, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\260\25\0\0004\0\0\0\324A\0\0\0\0\0\0004\0 \0\6\0(\0\31\0\30\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0244\0\0\0244\0\0\5\0\0\0\0\20\0\0\1\0\0\0\260>\0\0\260N\0\0\260N\0\0\30\2\0\0 \2\0\0\6\0\0\0\0\20\0\0\2\0\0\0\304>\0\0\304N\0\0\304N\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\260>\0\0\260N\0\0\260N\0\0P\1\0\0P\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\232\0\0\0P\0\0\0I\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\17\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0000\0\0\0\0\0\0\0\7\0\0\0\3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\t\0\0\0\0\0\0\0+\0\0\0008\0\0\0\r\0\0\0(\0\0\0\0\0\0\0\21\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0N\0\0\0<\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0%\0\0\0\0\0\0\0\24\0\0\0\0\0\0\0\2\0\0\0\0\0\0\0\32\0\0\0/\0\0\0\0\0\0\0D\0\0\0E\0\0\0", 512) = 512
22042 fstat64(7, {st_mode=S_IFREG|0555, st_size=17852, ...}) = 0
22042 mmap2(NULL, 20688, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 7, 0) = 0xb7210000
22042 mmap2(0xb7214000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 7, 0x3) = 0xb7214000
22042 close(7)                          = 0
22042 mprotect(0xb7214000, 4096, PROT_READ) = 0
22042 read(6, ", OFFSET])';\n    read($_[0], $_[1], $_[2], $_[3] || 0);\n}\n\nsub sysread {\n    @_ == 3 || @_ == 4 or croak 'usage: $io->sysread(BUF, LEN [, OFFSET])';\n    sysread($_[0], $_[1], $_[2], $_[3] || 0);\n}\n\nsub write {\n    @_ >= 2 && @_ <= 4 or croak 'usage: $io->write(BUF [, LEN [, OFFSET]])';\n    local($\\) = \"\";\n    $_[2] = length($_[1]) unless defined $_[2];\n    print { $_[0] } substr($_[1], $_[3] || 0, $_[2]);\n}\n\nsub syswrite {\n    @_ >= 2 && @_ <= 4 or croak 'usage: $io->syswrite(BUF [, LEN [, OFFSET]])';\n    if (defined($_[2])) {\n\tsyswrite($_[0], $_[1], $_[2], $_[3] || 0);\n    } else {\n\tsyswrite($_[0], $_[1]);\n    }\n}\n\nsub stat {\n    @_ == 1 or croak 'usage: $io->stat()';\n    stat($_[0]);\n}\n\n################################################\n## State modification functions.\n##\n\nsub autoflush {\n    my $old = new SelectSaver qualify($_[0], caller);\n    my $prev = $|;\n    $| = @_ > 1 ? $_[1] : 1;\n    $prev;\n}\n\nsub output_field_separator {\n    carp \"output_field_separator is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $,;\n    $, = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub output_record_separator {\n    carp \"output_record_separator is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $\\;\n    $\\ = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub input_record_separator {\n    carp \"input_record_separator is not supported on a per-handle basis\"\n\tif ref($_[0]);\n    my $prev = $/;\n    $/ = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub input_line_number {\n    local $.;\n    () = tell qualify($_[0], caller) if ref($_[0]);\n    my $prev = $.;\n    $. = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_page_number {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $%;\n    $% = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_lines_per_page {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $=;\n    $= = $_[1] if @_ > 1;\n    $prev;\n}\n\nsub format_lines_left {\n    my $old;\n    $old = new SelectSaver qualify($_[0], caller) if ref($_[0]);\n    my $prev = $-;\n  "..., 4096) = 4096
22042 brk(0x8238000)                    = 0x8238000
22042 read(6, " }\n    else {\n\tprint @_;\n    }\n}\n\n1;\n", 4096) = 37
22042 read(6, "", 4096)                 = 0
22042 close(6)                          = 0
22042 read(5, "", 4096)                 = 0
22042 close(5)                          = 0
22042 stat64("/etc/perl/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Errno.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Errno.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Errno.pm", {st_mode=S_IFREG|0444, st_size=7582, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Errno.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "#\n# This file is auto-generated. ***ANY*** changes here will be lost\n#\n\npackage Errno;\nour (@EXPORT_OK,%EXPORT_TAGS,@ISA,$VERSION,%errno,$AUTOLOAD);\nuse Exporter ();\nuse Config;\nuse strict;\n\n\"$Config{'archname'}-$Config{'osvers'}\" eq\n\"i686-linux-2.6.39-gentoo-r3-edu43\" or\n\tdie \"Errno architecture (i686-linux-2.6.39-gentoo-r3-edu43) does not match executable architecture ($Config{'archname'}-$Config{'osvers'})\";\n\n$VERSION = \"1.11\";\n$VERSION = eval $VERSION;\n@ISA = qw(Exporter);\n\n@EXPORT_OK = qw(EBADR ENOMSG ENOTSUP ESTRPIPE EADDRINUSE EL3HLT EBADF\n\tENOTBLK ENAVAIL ECHRNG ENOTNAM ELNRNG ENOKEY EXDEV EBADE EBADSLT\n\tECONNREFUSED ENOSTR ENONET EOVERFLOW EISCONN EFBIG EKEYREVOKED\n\tECONNRESET EWOULDBLOCK ELIBMAX EREMOTEIO ERFKILL ENOPKG ELIBSCN\n\tEDESTADDRREQ ENOTSOCK EIO EMEDIUMTYPE EINPROGRESS ERANGE EAFNOSUPPORT\n\tEADDRNOTAVAIL EINTR EREMOTE EILSEQ ENOMEM EPIPE ENETUNREACH ENODATA\n\tEUSERS EOPNOTSUPP EPROTO EISNAM ESPIPE EALREADY ENAMETOOLONG ENOEXEC\n\tEISDIR EBADRQC EEXIST EDOTDOT ELIBBAD EOWNERDEAD ESRCH EFAULT EXFULL\n\tEDEADLOCK EAGAIN ENOPROTOOPT ENETDOWN EPROTOTYPE EL2NSYNC ENETRESET\n\tEUCLEAN EADV EROFS ESHUTDOWN EMULTIHOP EPROTONOSUPPORT ENFILE ENOLCK\n\tECONNABORTED ECANCELED EDEADLK ESRMNT ENOLINK ETIME ENOTDIR EINVAL\n\tENOTTY ENOANO ELOOP ENOENT EPFNOSUPPORT EBADMSG ENOMEDIUM EL2HLT EDOM\n\tEBFONT EKEYEXPIRED EMSGSIZE ENOCSI EL3RST ENOSPC EIDRM ENOBUFS ENOSYS\n\tEHOSTDOWN EBADFD ENOSR ENOTCONN ESTALE EDQUOT EKEYREJECTED EMFILE\n\tENOTRECOVERABLE EACCES EBUSY E2BIG EPERM ELIBEXEC ETOOMANYREFS ELIBACC\n\tENOTUNIQ ECOMM ERESTART ESOCKTNOSUPPORT EUNATCH ETIMEDOUT ENXIO ENODEV\n\tETXTBSY EMLINK ECHILD EHOSTUNREACH EREMCHG ENOTEMPTY);\n\t\n%EXPORT_TAGS = (\n    POSIX => [qw(\n\tE2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT EAGAIN EALREADY\n\tEBADF EBUSY ECHILD ECONNABORTED ECONNREFUSED ECONNRESET EDEADLK\n\tEDESTADDRREQ EDOM EDQUOT EEXIST EFAULT EFBIG EHOSTDOWN EHOSTUNREACH\n\tEINPROGRESS EINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK\n\tEMSGSIZE ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS\n\tENODEV ENOENT ENOEXEC ENOLCK E"..., 4096) = 4096
22042 read(5, "{ 83 }\nsub EILSEQ () { 84 }\nsub ERESTART () { 85 }\nsub ESTRPIPE () { 86 }\nsub EUSERS () { 87 }\nsub ENOTSOCK () { 88 }\nsub EDESTADDRREQ () { 89 }\nsub EMSGSIZE () { 90 }\nsub EPROTOTYPE () { 91 }\nsub ENOPROTOOPT () { 92 }\nsub EPROTONOSUPPORT () { 93 }\nsub ESOCKTNOSUPPORT () { 94 }\nsub ENOTSUP () { 95 }\nsub EOPNOTSUPP () { 95 }\nsub EPFNOSUPPORT () { 96 }\nsub EAFNOSUPPORT () { 97 }\nsub EADDRINUSE () { 98 }\nsub EADDRNOTAVAIL () { 99 }\nsub ENETDOWN () { 100 }\nsub ENETUNREACH () { 101 }\nsub ENETRESET () { 102 }\nsub ECONNABORTED () { 103 }\nsub ECONNRESET () { 104 }\nsub ENOBUFS () { 105 }\nsub EISCONN () { 106 }\nsub ENOTCONN () { 107 }\nsub ESHUTDOWN () { 108 }\nsub ETOOMANYREFS () { 109 }\nsub ETIMEDOUT () { 110 }\nsub ECONNREFUSED () { 111 }\nsub EHOSTDOWN () { 112 }\nsub EHOSTUNREACH () { 113 }\nsub EALREADY () { 114 }\nsub EINPROGRESS () { 115 }\nsub ESTALE () { 116 }\nsub EUCLEAN () { 117 }\nsub ENOTNAM () { 118 }\nsub ENAVAIL () { 119 }\nsub EISNAM () { 120 }\nsub EREMOTEIO () { 121 }\nsub EDQUOT () { 122 }\nsub ENOMEDIUM () { 123 }\nsub EMEDIUMTYPE () { 124 }\nsub ECANCELED () { 125 }\nsub ENOKEY () { 126 }\nsub EKEYEXPIRED () { 127 }\nsub EKEYREVOKED () { 128 }\nsub EKEYREJECTED () { 129 }\nsub EOWNERDEAD () { 130 }\nsub ENOTRECOVERABLE () { 131 }\nsub ERFKILL () { 132 }\n\nsub TIEHASH { bless [] }\n\nsub FETCH {\n    my ($self, $errname) = @_;\n    my $proto = prototype(\"Errno::$errname\");\n    my $errno = \"\";\n    if (defined($proto) && $proto eq \"\") {\n\tno strict 'refs';\n\t$errno = &$errname;\n        $errno = 0 unless $! == $errno;\n    }\n    return $errno;\n}\n\nsub STORE {\n    require Carp;\n    Carp::confess(\"ERRNO hash is read only!\");\n}\n\n*CLEAR = \\&STORE;\n*DELETE = \\&STORE;\n\nsub NEXTKEY {\n    my($k,$v);\n    while(($k,$v) = each %Errno::) {\n\tmy $proto = prototype(\"Errno::$k\");\n\tlast if (defined($proto) && $proto eq \"\");\n    }\n    $k\n}\n\nsub FIRSTKEY {\n    my $s = scalar keys %Errno::;\t# initialize iterator\n    goto &NEXTKEY;\n}\n\nsub EXISTS {\n    my ($self, $errname) = @_;\n    my $r = ref $errname;\n    my $proto = !$r || $r eq 'CODE' ? prototype($errn"..., 4096) = 3486
22042 _llseek(5, 6231, [6231], SEEK_SET) = 0
22042 _llseek(5, 0, [6231], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 stat64("/etc/perl/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/base.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/base.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/base.pm", {st_mode=S_IFREG|0444, st_size=6986, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/base.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package base;\n\nuse strict 'vars';\nuse vars qw($VERSION);\n$VERSION = '2.15';\n$VERSION = eval $VERSION;\n\n# constant.pm is slow\nsub SUCCESS () { 1 }\n\nsub PUBLIC     () { 2**0  }\nsub PRIVATE    () { 2**1  }\nsub INHERITED  () { 2**2  }\nsub PROTECTED  () { 2**3  }\n\n\nmy $Fattr = \\%fields::attr;\n\nsub has_fields {\n    my($base) = shift;\n    my $fglob = ${\"$base\\::\"}{FIELDS};\n    return( ($fglob && 'GLOB' eq ref($fglob) && *$fglob{HASH}) ? 1 : 0 );\n}\n\nsub has_version {\n    my($base) = shift;\n    my $vglob = ${$base.'::'}{VERSION};\n    return( ($vglob && *$vglob{SCALAR}) ? 1 : 0 );\n}\n\nsub has_attr {\n    my($proto) = shift;\n    my($class) = ref $proto || $proto;\n    return exists $Fattr->{$class};\n}\n\nsub get_attr {\n    $Fattr->{$_[0]} = [1] unless $Fattr->{$_[0]};\n    return $Fattr->{$_[0]};\n}\n\nif ($] < 5.009) {\n    *get_fields = sub {\n        # Shut up a possible typo warning.\n        () = \\%{$_[0].'::FIELDS'};\n        my $f = \\%{$_[0].'::FIELDS'};\n\n        # should be centralized in fields? perhaps\n        # fields::mk_FIELDS_be_OK. Peh. As long as %{ $package . '::FIELDS' }\n        # is used here anyway, it doesn't matter.\n        bless $f, 'pseudohash' if (ref($f) ne 'pseudohash');\n\n        return $f;\n    }\n}\nelse {\n    *get_fields = sub {\n        # Shut up a possible typo warning.\n        () = \\%{$_[0].'::FIELDS'};\n        return \\%{$_[0].'::FIELDS'};\n    }\n}\n\nsub import {\n    my $class = shift;\n\n    return SUCCESS unless @_;\n\n    # List of base classes from which we will inherit %FIELDS.\n    my $fields_base;\n\n    my $inheritor = caller(0);\n    my @isa_classes;\n\n    my @bases;\n    foreach my $base (@_) {\n        if ( $inheritor eq $base ) {\n            warn \"Class '$inheritor' tried to inherit from itself\\n\";\n        }\n\n        next if grep $_->isa($base), ($inheritor, @bases);\n\n        if (has_version($base)) {\n            ${$base.'::VERSION'} = '-1, set by base.pm' \n              unless defined ${$base.'::VERSION'};\n        }\n        else {\n            my $sigdie;\n            {\n                local $SIG{__DIE__};\n   "..., 4096) = 4096
22042 brk(0x8259000)                    = 0x8259000
22042 read(5, "private\n    # ones to the derived class.  Hang on to the original attribute\n    # (Public, Private, etc...) and add Inherited.\n    # This is all too complicated to do efficiently with add_fields().\n    while (my($k,$v) = each %$bfields) {\n        my $fno;\n        if ($fno = $dfields->{$k} and $fno != $v) {\n            require Carp;\n            Carp::croak (\"Inherited fields can't override existing fields\");\n        }\n\n        if( $battr->[$v] & PRIVATE ) {\n            $dattr->[$v] = PRIVATE | INHERITED;\n        }\n        else {\n            $dattr->[$v] = INHERITED | $battr->[$v];\n            $dfields->{$k} = $v;\n        }\n    }\n\n    foreach my $idx (1..$#{$battr}) {\n        next if defined $dattr->[$idx];\n        $dattr->[$idx] = $battr->[$idx] & INHERITED;\n    }\n}\n\n\n1;\n\n__END__\n\n=head1 NAME\n\nbase - Establish an ISA relationship with base classes at compile time\n\n=head1 SYNOPSIS\n\n    package Baz;\n    use base qw(Foo Bar);\n\n=head1 DESCRIPTION\n\nUnless you are using the C<fields> pragma, consider this module discouraged\nin favor of the lighter-weight C<parent>.\n\nAllows you to both load one or more modules, while setting up inheritance from\nthose modules at the same time.  Roughly similar in effect to\n\n    package Baz;\n    BEGIN {\n        require Foo;\n        require Bar;\n        push @ISA, qw(Foo Bar);\n    }\n\nC<base> employs some heuristics to determine if a module has already been\nloaded, if it has it doesn't try again. If C<base> tries to C<require> the\nmodule it will not die if it cannot find the module's file, but will die on any\nother error. After all this, should your base class be empty, containing no\nsymbols, it will die. This is useful for inheriting from classes in the same\nfile as yourself, like so:\n\n        package Foo;\n        sub exclaim { \"I can have such a thing?!\" }\n        \n        package Bar;\n        use base \"Foo\";\n\nIf $VERSION is not detected even after loading it, <base> will define $VERSION\nin the base package, setting it to the string C<-1, set by base.pm>.\n\nC<base> will also initialize the "..., 4096) = 2890
22042 _llseek(5, 4886, [4886], SEEK_SET) = 0
22042 _llseek(5, 0, [4886], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 read(4, "les have been created by each process id via the OO interface\nmy %FILES_CREATED_BY_OBJECT;\n\n# INTERNAL ROUTINES - not to be used outside of package\n\n# Generic routine for getting a temporary filename\n# modelled on OpenBSD _gettemp() in mktemp.c\n\n# The template must contain X's that are to be replaced\n# with the random values\n\n#  Arguments:\n\n#  TEMPLATE   - string containing the XXXXX's that is converted\n#           to a random filename and opened if required\n\n# Optionally, a hash can also be supplied containing specific options\n#   \"open\" => if true open the temp file, else just return the name\n#             default is 0\n#   \"mkdir\"=> if true, we are creating a temp directory rather than tempfile\n#             default is 0\n#   \"suffixlen\" => number of characters at end of PATH to be ignored.\n#                  default is 0.\n#   \"unlink_on_close\" => indicates that, if possible,  the OS should remove\n#                        the file as soon as it is closed. Usually indicates\n#                        use of the O_TEMPORARY flag to sysopen.\n#                        Usually irrelevant on unix\n#   \"use_exlock\" => Indicates that O_EXLOCK should be used. Default is true.\n\n# Optionally a reference to a scalar can be passed into the function\n# On error this will be used to store the reason for the error\n#   \"ErrStr\"  => \\$errstr\n\n# \"open\" and \"mkdir\" can not both be true\n# \"unlink_on_close\" is not used when \"mkdir\" is true.\n\n# The default options are equivalent to mktemp().\n\n# Returns:\n#   filehandle - open file handle (if called with doopen=1, else undef)\n#   temp name  - name of the temp file or directory\n\n# For example:\n#   ($fh, $name) = _gettemp($template, \"open\" => 1);\n\n# for the current version, failures are associated with\n# stored in an error string and returned to give the reason whilst debugging\n# This routine is not called by any external function\nsub _gettemp {\n\n  croak 'Usage: ($fh, $name) = _gettemp($template, OPTIONS);'\n    unless scalar(@_) >= 1;\n\n  # the internal error string - expect it to be overridden"..., 4096) = 4096
22042 read(4, "he substr directly\n  # and generate a full path from the template\n\n  my $path = _replace_XX($template, $options{\"suffixlen\"});\n\n\n  # Split the path into constituent parts - eventually we need to check\n  # whether the directory exists\n  # We need to know whether we are making a temp directory\n  # or a tempfile\n\n  my ($volume, $directories, $file);\n  my $parent;                   # parent directory\n  if ($options{\"mkdir\"}) {\n    # There is no filename at the end\n    ($volume, $directories, $file) = File::Spec->splitpath( $path, 1);\n\n    # The parent is then $directories without the last directory\n    # Split the directory and put it back together again\n    my @dirs = File::Spec->splitdir($directories);\n\n    # If @dirs only has one entry (i.e. the directory template) that means\n    # we are in the current directory\n    if ($#dirs == 0) {\n      $parent = File::Spec->curdir;\n    } else {\n\n      if ($^O eq 'VMS') {     # need volume to avoid relative dir spec\n        $parent = File::Spec->catdir($volume, @dirs[0..$#dirs-1]);\n        $parent = 'sys$disk:[]' if $parent eq '';\n      } else {\n\n        # Put it back together without the last one\n        $parent = File::Spec->catdir(@dirs[0..$#dirs-1]);\n\n        # ...and attach the volume (no filename)\n        $parent = File::Spec->catpath($volume, $parent, '');\n      }\n\n    }\n\n  } else {\n\n    # Get rid of the last filename (use File::Basename for this?)\n    ($volume, $directories, $file) = File::Spec->splitpath( $path );\n\n    # Join up without the file part\n    $parent = File::Spec->catpath($volume,$directories,'');\n\n    # If $parent is empty replace with curdir\n    $parent = File::Spec->curdir\n      unless $directories ne '';\n\n  }\n\n  # Check that the parent directories exist\n  # Do this even for the case where we are simply returning a name\n  # not a file -- no point returning a name that includes a directory\n  # that does not exist or is not writable\n\n  unless (-e $parent) {\n    ${$options{ErrStr}} = \"Parent directory ($parent) does not exist\";\n    return ();\n  }\n  unless"..., 4096) = 4096
22042 read(4, "h error\n        # if the reason was anything but EEXIST\n        unless ($!{EEXIST}) {\n          ${$options{ErrStr}} = \"Could not create temp file $path: $!\";\n          return ();\n        }\n\n        # Loop round for another try\n\n      }\n    } elsif ($options{\"mkdir\"}) {\n\n      # Open the temp directory\n      if (mkdir( $path, 0700)) {\n        # in case of odd umask\n        chmod(0700, $path);\n\n        return undef, $path;\n      } else {\n\n        # Abort with error if the reason for failure was anything\n        # except EEXIST\n        unless ($!{EEXIST}) {\n          ${$options{ErrStr}} = \"Could not create directory $path: $!\";\n          return ();\n        }\n\n        # Loop round for another try\n\n      }\n\n    } else {\n\n      # Return true if the file can not be found\n      # Directory has been checked previously\n\n      return (undef, $path) unless -e $path;\n\n      # Try again until MAX_TRIES\n\n    }\n\n    # Did not successfully open the tempfile/dir\n    # so try again with a different set of random letters\n    # No point in trying to increment unless we have only\n    # 1 X say and the randomness could come up with the same\n    # file MAX_TRIES in a row.\n\n    # Store current attempt - in principal this implies that the\n    # 3rd time around the open attempt that the first temp file\n    # name could be generated again. Probably should store each\n    # attempt and make sure that none are repeated\n\n    my $original = $path;\n    my $counter = 0;            # Stop infinite loop\n    my $MAX_GUESS = 50;\n\n    do {\n\n      # Generate new name from original template\n      $path = _replace_XX($template, $options{\"suffixlen\"});\n\n      $counter++;\n\n    } until ($path ne $original || $counter > $MAX_GUESS);\n\n    # Check for out of control looping\n    if ($counter > $MAX_GUESS) {\n      ${$options{ErrStr}} = \"Tried to get a new temp name different to the previous value $MAX_GUESS times.\\nSomething wrong with template?? ($template)\";\n      return ();\n    }\n\n  }\n\n  # If we get here, we have run out of tries\n  ${ $options{ErrStr} } = \"Hav"..., 4096) = 4096
22042 read(4, "e directly after the open.\n\nsub _is_safe {\n\n  my $path = shift;\n  my $err_ref = shift;\n\n  # Stat path\n  my @info = stat($path);\n  unless (scalar(@info)) {\n    $$err_ref = \"stat(path) returned no values\";\n    return 0;\n  }\n  ;\n  return 1 if $^O eq 'VMS';     # owner delete control at file level\n\n  # Check to see whether owner is neither superuser (or a system uid) nor me\n  # Use the effective uid from the $> variable\n  # UID is in [4]\n  if ($info[4] > File::Temp->top_system_uid() && $info[4] != $>) {\n\n    Carp::cluck(sprintf \"uid=$info[4] topuid=%s euid=$> path='$path'\",\n                File::Temp->top_system_uid());\n\n    $$err_ref = \"Directory owned neither by root nor the current user\"\n      if ref($err_ref);\n    return 0;\n  }\n\n  # check whether group or other can write file\n  # use 066 to detect either reading or writing\n  # use 022 to check writability\n  # Do it with S_IWOTH and S_IWGRP for portability (maybe)\n  # mode is in info[2]\n  if (($info[2] & &Fcntl::S_IWGRP) ||  # Is group writable?\n      ($info[2] & &Fcntl::S_IWOTH) ) { # Is world writable?\n    # Must be a directory\n    unless (-d $path) {\n      $$err_ref = \"Path ($path) is not a directory\"\n        if ref($err_ref);\n      return 0;\n    }\n    # Must have sticky bit set\n    unless (-k $path) {\n      $$err_ref = \"Sticky bit not set on $path when dir is group|world writable\"\n        if ref($err_ref);\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\n# Internal routine to check whether a directory is safe\n# for temp files. Safer than _is_safe since it checks for\n# the possibility of chown giveaway and if that is a possibility\n# checks each directory in the path to see if it is safe (with _is_safe)\n\n# If _PC_CHOWN_RESTRICTED is not set, does the full test of each\n# directory anyway.\n\n# Takes optional second arg as scalar ref to error reason\n\nsub _is_verysafe {\n\n  # Need POSIX - but only want to bother if really necessary due to overhead\n  require POSIX;\n\n  my $path = shift;\n  print \"_is_verysafe testing $path\\n\" if $DEBUG;\n  return 1 if $^O eq 'VMS';     # owner d"..., 4096) = 4096
22042 read(4, "the O_EXCL flag is used to open the\n# temporary file. Currently I do not know enough about the issues\n# on VMS to decide whether O_EXCL is a requirement.\n\nsub _can_unlink_opened_file {\n\n  if ($^O eq 'MSWin32' || $^O eq 'os2' || $^O eq 'VMS' || $^O eq 'dos' || $^O eq 'MacOS') {\n    return 0;\n  } else {\n    return 1;\n  }\n\n}\n\n# internal routine to decide which security levels are allowed\n# see safe_level() for more information on this\n\n# Controls whether the supplied security level is allowed\n\n#   $cando = _can_do_level( $level )\n\nsub _can_do_level {\n\n  # Get security level\n  my $level = shift;\n\n  # Always have to be able to do STANDARD\n  return 1 if $level == STANDARD;\n\n  # Currently, the systems that can do HIGH or MEDIUM are identical\n  if ( $^O eq 'MSWin32' || $^O eq 'os2' || $^O eq 'cygwin' || $^O eq 'dos' || $^O eq 'MacOS' || $^O eq 'mpeix') {\n    return 0;\n  } else {\n    return 1;\n  }\n\n}\n\n# This routine sets up a deferred unlinking of a specified\n# filename and filehandle. It is used in the following cases:\n#  - Called by unlink0 if an opened file can not be unlinked\n#  - Called by tempfile() if files are to be removed on shutdown\n#  - Called by tempdir() if directories are to be removed on shutdown\n\n# Arguments:\n#   _deferred_unlink( $fh, $fname, $isdir );\n#\n#   - filehandle (so that it can be expclicitly closed if open\n#   - filename   (the thing we want to remove)\n#   - isdir      (flag to indicate that we are being given a directory)\n#                 [and hence no filehandle]\n\n# Status is not referred to since all the magic is done with an END block\n\n{\n  # Will set up two lexical variables to contain all the files to be\n  # removed. One array for files, another for directories They will\n  # only exist in this block.\n\n  #  This means we only have to set up a single END block to remove\n  #  all files. \n\n  # in order to prevent child processes inadvertently deleting the parent\n  # temp files we use a hash to store the temp files and directories\n  # created by a particular process id.\n\n  # %files_to_unlink c"..., 4096) = 4096
22042 read(4, "een called with the correct arguments.\n  sub _deferred_unlink {\n\n    croak 'Usage:  _deferred_unlink($fh, $fname, $isdir)'\n      unless scalar(@_) == 3;\n\n    my ($fh, $fname, $isdir) = @_;\n\n    warn \"Setting up deferred removal of $fname\\n\"\n      if $DEBUG;\n\n    # If we have a directory, check that it is a directory\n    if ($isdir) {\n\n      if (-d $fname) {\n\n        # Directory exists so store it\n        # first on VMS turn []foo into [.foo] for rmtree\n        $fname = VMS::Filespec::vmspath($fname) if $^O eq 'VMS';\n        $dirs_to_unlink{$$} = [] \n          unless exists $dirs_to_unlink{$$};\n        push (@{ $dirs_to_unlink{$$} }, $fname);\n\n      } else {\n        carp \"Request to remove directory $fname could not be completed since it does not exist!\\n\" if $^W;\n      }\n\n    } else {\n\n      if (-f $fname) {\n\n        # file exists so store handle and name for later removal\n        $files_to_unlink{$$} = []\n          unless exists $files_to_unlink{$$};\n        push(@{ $files_to_unlink{$$} }, [$fh, $fname]);\n\n      } else {\n        carp \"Request to remove file $fname could not be completed since it is not there!\\n\" if $^W;\n      }\n\n    }\n\n  }\n\n\n}\n\n=head1 OBJECT-ORIENTED INTERFACE\n\nThis is the primary interface for interacting with\nC<File::Temp>. Using the OO interface a temporary file can be created\nwhen the object is constructed and the file can be removed when the\nobject is no longer required.\n\nNote that there is no method to obtain the filehandle from the\nC<File::Temp> object. The object itself acts as a filehandle. Also,\nthe object is configured such that it stringifies to the name of the\ntemporary file, and can be compared to a filename directly. The object\nisa C<IO::Handle> and isa C<IO::Seekable> so all those methods are\navailable.\n\n=over 4\n\n=item B<new>\n\nCreate a temporary file object.\n\n  my $tmp = File::Temp->new();\n\nby default the object is constructed as if C<tempfile>\nwas called without options, but with the additional behaviour\nthat the temporary file is removed by the object destructor\nif UNLINK is se"..., 4096) = 4096
22042 read(4, "use we have to force CLEANUP\n  # default without passing CLEANUP to tempdir\n  my $template = (scalar(@_) % 2 == 1 ? shift(@_) : undef );\n  my %options = @_;\n  my $cleanup = (exists $options{CLEANUP} ? $options{CLEANUP} : 1 );\n\n  delete $options{CLEANUP};\n\n  my $tempdir;\n  if (defined $template) {\n    $tempdir = tempdir( $template, %options );\n  } else {\n    $tempdir = tempdir( %options );\n  }\n  return bless { DIRNAME => $tempdir,\n                 CLEANUP => $cleanup,\n                 LAUNCHPID => $$,\n               }, \"File::Temp::Dir\";\n}\n\n=item B<filename>\n\nReturn the name of the temporary file associated with this object\n(if the object was created using the \"new\" constructor).\n\n  $filename = $tmp->filename;\n\nThis method is called automatically when the object is used as\na string.\n\n=cut\n\nsub filename {\n  my $self = shift;\n  return ${*$self};\n}\n\nsub STRINGIFY {\n  my $self = shift;\n  return $self->filename;\n}\n\n=item B<dirname>\n\nReturn the name of the temporary directory associated with this\nobject (if the object was created using the \"newdir\" constructor).\n\n  $dirname = $tmpdir->dirname;\n\nThis method is called automatically when the object is used in string context.\n\n=item B<unlink_on_destroy>\n\nControl whether the file is unlinked when the object goes out of scope.\nThe file is removed if this value is true and $KEEP_ALL is not.\n\n $fh->unlink_on_destroy( 1 );\n\nDefault is for the file to be removed.\n\n=cut\n\nsub unlink_on_destroy {\n  my $self = shift;\n  if (@_) {\n    ${*$self}{UNLINK} = shift;\n  }\n  return ${*$self}{UNLINK};\n}\n\n=item B<DESTROY>\n\nWhen the object goes out of scope, the destructor is called. This\ndestructor will attempt to unlink the file (using C<unlink1>)\nif the constructor was called with UNLINK set to 1 (the default state\nif UNLINK is not specified).\n\nNo error is given if the unlink fails.\n\nIf the object has been passed to a child process during a fork, the\nfile will be deleted when the object goes out of scope in the parent.\n\nFor a temporary directory object the directory will be removed\nunless the "..., 4096) = 4096
22042 brk(0x827a000)                    = 0x827a000
22042 read(4, "eviously, except that a suffix is added to the template\nafter the `X' translation.  Useful for ensuring that a temporary\nfilename has a particular extension when needed by other applications.\nBut see the WARNING at the end.\n\n  ($fh, $filename) = tempfile($template, DIR => $dir);\n\nTranslates the template as before except that a directory name\nis specified.\n\n  ($fh, $filename) = tempfile($template, TMPDIR => 1);\n\nEquivalent to specifying a DIR of \"File::Spec->tmpdir\", writing the file\ninto the same temporary directory as would be used if no template was\nspecified at all.\n\n  ($fh, $filename) = tempfile($template, UNLINK => 1);\n\nReturn the filename and filehandle as before except that the file is\nautomatically removed when the program exits (dependent on\n$KEEP_ALL). Default is for the file to be removed if a file handle is\nrequested and to be kept if the filename is requested. In a scalar\ncontext (where no filename is returned) the file is always deleted\neither (depending on the operating system) on exit or when it is\nclosed (unless $KEEP_ALL is true when the temp file is created).\n\nUse the object-oriented interface if fine-grained control of when\na file is removed is required.\n\nIf the template is not specified, a template is always\nautomatically generated. This temporary file is placed in tmpdir()\n(L<File::Spec>) unless a directory is specified explicitly with the\nDIR option.\n\n  $fh = tempfile( DIR => $dir );\n\nIf called in scalar context, only the filehandle is returned and the\nfile will automatically be deleted when closed on operating systems\nthat support this (see the description of tmpfile() elsewhere in this\ndocument).  This is the preferred mode of operation, as if you only\nhave a filehandle, you can never create a race condition by fumbling\nwith the filename. On systems that can not unlink an open file or can\nnot mark a file as temporary when it is opened (for example, Windows\nNT uses the C<O_TEMPORARY> flag) the file is marked for deletion when\nthe program ends (equivalent to setting UNLINK to 1). The C<UNLI"..., 4096) = 4096
22042 read(4, "h OPEN set to true\\n\"\n      if $^W;\n\n  }\n\n  if ($options{\"DIR\"} and $^O eq 'VMS') {\n\n    # on VMS turn []foo into [.foo] for concatenation\n    $options{\"DIR\"} = VMS::Filespec::vmspath($options{\"DIR\"});\n  }\n\n  # Construct the template\n\n  # Have a choice of trying to work around the mkstemp/mktemp/tmpnam etc\n  # functions or simply constructing a template and using _gettemp()\n  # explicitly. Go for the latter\n\n  # First generate a template if not defined and prefix the directory\n  # If no template must prefix the temp directory\n  if (defined $template) {\n    # End up with current directory if neither DIR not TMPDIR are set\n    if ($options{\"DIR\"}) {\n\n      $template = File::Spec->catfile($options{\"DIR\"}, $template);\n\n    } elsif ($options{TMPDIR}) {\n\n      $template = File::Spec->catfile(File::Spec->tmpdir, $template );\n\n    }\n\n  } else {\n\n    if ($options{\"DIR\"}) {\n\n      $template = File::Spec->catfile($options{\"DIR\"}, TEMPXXX);\n\n    } else {\n\n      $template = File::Spec->catfile(File::Spec->tmpdir, TEMPXXX);\n\n    }\n\n  }\n\n  # Now add a suffix\n  $template .= $options{\"SUFFIX\"};\n\n  # Determine whether we should tell _gettemp to unlink the file\n  # On unix this is irrelevant and can be worked out after the file is\n  # opened (simply by unlinking the open filehandle). On Windows or VMS\n  # we have to indicate temporary-ness when we open the file. In general\n  # we only want a true temporary file if we are returning just the\n  # filehandle - if the user wants the filename they probably do not\n  # want the file to disappear as soon as they close it (which may be\n  # important if they want a child process to use the file)\n  # For this reason, tie unlink_on_close to the return context regardless\n  # of OS.\n  my $unlink_on_close = ( wantarray ? 0 : 1);\n\n  # Create the file\n  my ($fh, $path, $errstr);\n  croak \"Error in tempfile() using $template: $errstr\"\n    unless (($fh, $path) = _gettemp($template,\n                                    \"open\" => $options{'OPEN'},\n                                    \"mkdir\"=> 0 ,\n        "..., 4096) = 4096
22042 read(4, " least four `X' characters must be in the template.\n\n  $tempdir = tempdir ( DIR => $dir );\n\nSpecifies the directory to use for the temporary directory.\nThe temporary directory name is derived from an internal template.\n\n  $tempdir = tempdir ( $template, DIR => $dir );\n\nPrepend the supplied directory name to the template. The template\nshould not include parent directory specifications itself. Any parent\ndirectory specifications are removed from the template before\nprepending the supplied directory.\n\n  $tempdir = tempdir ( $template, TMPDIR => 1 );\n\nUsing the supplied template, create the temporary directory in\na standard location for temporary files. Equivalent to doing\n\n  $tempdir = tempdir ( $template, DIR => File::Spec->tmpdir);\n\nbut shorter. Parent directory specifications are stripped from the\ntemplate itself. The C<TMPDIR> option is ignored if C<DIR> is set\nexplicitly.  Additionally, C<TMPDIR> is implied if neither a template\nnor a directory are supplied.\n\n  $tempdir = tempdir( $template, CLEANUP => 1);\n\nCreate a temporary directory using the supplied template, but\nattempt to remove it (and all files inside it) when the program\nexits. Note that an attempt will be made to remove all files from\nthe directory even if they were not created by this module (otherwise\nwhy ask to clean it up?). The directory removal is made with\nthe rmtree() function from the L<File::Path|File::Path> module.\nOf course, if the template is not specified, the temporary directory\nwill be created in tmpdir() and will also be removed at program exit.\n\nWill croak() if there is an error.\n\n=cut\n\n# '\n\nsub tempdir  {\n\n  # Can not check for argument count since we can have any\n  # number of args\n\n  # Default options\n  my %options = (\n                 \"CLEANUP\"    => 0, # Remove directory on exit\n                 \"DIR\"        => '', # Root directory\n                 \"TMPDIR\"     => 0,  # Use tempdir with template\n                );\n\n  # Check to see whether we have an odd or even number of arguments\n  my $template = (scalar(@_) % 2 == 1 ? shift("..., 4096) = 4096
22042 read(4, " name\n  return $tempdir;\n\n}\n\n=back\n\n=head1 MKTEMP FUNCTIONS\n\nThe following functions are Perl implementations of the\nmktemp() family of temp file generation system calls.\n\n=over 4\n\n=item B<mkstemp>\n\nGiven a template, returns a filehandle to the temporary file and the name\nof the file.\n\n  ($fh, $name) = mkstemp( $template );\n\nIn scalar context, just the filehandle is returned.\n\nThe template may be any filename with some number of X's appended\nto it, for example F</tmp/temp.XXXX>. The trailing X's are replaced\nwith unique alphanumeric combinations.\n\nWill croak() if there is an error.\n\n=cut\n\n\n\nsub mkstemp {\n\n  croak \"Usage: mkstemp(template)\"\n    if scalar(@_) != 1;\n\n  my $template = shift;\n\n  my ($fh, $path, $errstr);\n  croak \"Error in mkstemp using $template: $errstr\"\n    unless (($fh, $path) = _gettemp($template,\n                                    \"open\" => 1,\n                                    \"mkdir\"=> 0 ,\n                                    \"suffixlen\" => 0,\n                                    \"ErrStr\" => \\$errstr,\n                                   ) );\n\n  if (wantarray()) {\n    return ($fh, $path);\n  } else {\n    return $fh;\n  }\n\n}\n\n\n=item B<mkstemps>\n\nSimilar to mkstemp(), except that an extra argument can be supplied\nwith a suffix to be appended to the template.\n\n  ($fh, $name) = mkstemps( $template, $suffix );\n\nFor example a template of C<testXXXXXX> and suffix of C<.dat>\nwould generate a file similar to F<testhGji_w.dat>.\n\nReturns just the filehandle alone when called in scalar context.\n\nWill croak() if there is an error.\n\n=cut\n\nsub mkstemps {\n\n  croak \"Usage: mkstemps(template, suffix)\"\n    if scalar(@_) != 2;\n\n\n  my $template = shift;\n  my $suffix   = shift;\n\n  $template .= $suffix;\n\n  my ($fh, $path, $errstr);\n  croak \"Error in mkstemps using $template: $errstr\"\n    unless (($fh, $path) = _gettemp($template,\n                                    \"open\" => 1,\n                                    \"mkdir\"=> 0 ,\n                                    \"suffixlen\" => length($suffix),\n                           "..., 4096) = 4096
22042 read(4, "                                   ) );\n\n  return $tmpname;\n}\n\n=back\n\n=head1 POSIX FUNCTIONS\n\nThis section describes the re-implementation of the tmpnam()\nand tmpfile() functions described in L<POSIX>\nusing the mkstemp() from this module.\n\nUnlike the L<POSIX|POSIX> implementations, the directory used\nfor the temporary file is not specified in a system include\nfile (C<P_tmpdir>) but simply depends on the choice of tmpdir()\nreturned by L<File::Spec|File::Spec>. On some implementations this\nlocation can be set using the C<TMPDIR> environment variable, which\nmay not be secure.\nIf this is a problem, simply use mkstemp() and specify a template.\n\n=over 4\n\n=item B<tmpnam>\n\nWhen called in scalar context, returns the full name (including path)\nof a temporary file (uses mktemp()). The only check is that the file does\nnot already exist, but there is no guarantee that that condition will\ncontinue to apply.\n\n  $file = tmpnam();\n\nWhen called in list context, a filehandle to the open file and\na filename are returned. This is achieved by calling mkstemp()\nafter constructing a suitable template.\n\n  ($fh, $file) = tmpnam();\n\nIf possible, this form should be used to prevent possible\nrace conditions.\n\nSee L<File::Spec/tmpdir> for information on the choice of temporary\ndirectory for a particular operating system.\n\nWill croak() if there is an error.\n\n=cut\n\nsub tmpnam {\n\n  # Retrieve the temporary directory name\n  my $tmpdir = File::Spec->tmpdir;\n\n  croak \"Error temporary directory is not writable\"\n    if $tmpdir eq '';\n\n  # Use a ten character template and append to tmpdir\n  my $template = File::Spec->catfile($tmpdir, TEMPXXX);\n\n  if (wantarray() ) {\n    return mkstemp($template);\n  } else {\n    return mktemp($template);\n  }\n\n}\n\n=item B<tmpfile>\n\nReturns the filehandle of a temporary file.\n\n  $fh = tmpfile();\n\nThe file is removed when the filehandle is closed or when the program\nexits. No access to the filename is provided.\n\nIf the temporary file can not be created undef is returned.\nCurrently this command will probably not work when t"..., 4096) = 4096
22042 read(4, " as the file whose descriptor you hold.\n\n  unlink0($fh, $path)\n     or die \"Error unlinking file $path safely\";\n\nReturns false on error but croaks() if there is a security\nanomaly. The filehandle is not closed since on some occasions this is\nnot required.\n\nOn some platforms, for example Windows NT, it is not possible to\nunlink an open file (the file must be closed first). On those\nplatforms, the actual unlinking is deferred until the program ends and\ngood status is returned. A check is still performed to make sure that\nthe filehandle and filename are pointing to the same thing (but not at\nthe time the end block is executed since the deferred removal may not\nhave access to the filehandle).\n\nAdditionally, on Windows NT not all the fields returned by stat() can\nbe compared. For example, the C<dev> and C<rdev> fields seem to be\ndifferent.  Also, it seems that the size of the file returned by stat()\ndoes not always agree, with C<stat(FH)> being more accurate than\nC<stat(filename)>, presumably because of caching issues even when\nusing autoflush (this is usually overcome by waiting a while after\nwriting to the tempfile before attempting to C<unlink0> it).\n\nFinally, on NFS file systems the link count of the file handle does\nnot always go to zero immediately after unlinking. Currently, this\ncommand is expected to fail on NFS disks.\n\nThis function is disabled if the global variable $KEEP_ALL is true\nand an unlink on open file is supported. If the unlink is to be deferred\nto the END block, the file is still registered for removal.\n\nThis function should not be called if you are using the object oriented\ninterface since the it will interfere with the object destructor deleting\nthe file.\n\n=cut\n\nsub unlink0 {\n\n  croak 'Usage: unlink0(filehandle, filename)'\n    unless scalar(@_) == 2;\n\n  # Read args\n  my ($fh, $path) = @_;\n\n  cmpstat($fh, $path) or return 0;\n\n  # attempt remove the file (does not work on some platforms)\n  if (_can_unlink_opened_file()) {\n\n    # return early (Without unlink) if we have been instructed to retain f"..., 4096) = 4096
22042 read(4, "    local ($^W) = 0;\n    @fh = stat $fh;\n  }\n  return unless @fh;\n\n  if ($fh[3] > 1 && $^W) {\n    carp \"unlink0: fstat found too many links; SB=@fh\" if $^W;\n  }\n\n  # Stat the path\n  my @path = stat $path;\n\n  unless (@path) {\n    carp \"unlink0: $path is gone already\" if $^W;\n    return;\n  }\n\n  # this is no longer a file, but may be a directory, or worse\n  unless (-f $path) {\n    confess \"panic: $path is no longer a file: SB=@fh\";\n  }\n\n  # Do comparison of each member of the array\n  # On WinNT dev and rdev seem to be different\n  # depending on whether it is a file or a handle.\n  # Cannot simply compare all members of the stat return\n  # Select the ones we can use\n  my @okstat = (0..$#fh);       # Use all by default\n  if ($^O eq 'MSWin32') {\n    @okstat = (1,2,3,4,5,7,8,9,10);\n  } elsif ($^O eq 'os2') {\n    @okstat = (0, 2..$#fh);\n  } elsif ($^O eq 'VMS') {      # device and file ID are sufficient\n    @okstat = (0, 1);\n  } elsif ($^O eq 'dos') {\n    @okstat = (0,2..7,11..$#fh);\n  } elsif ($^O eq 'mpeix') {\n    @okstat = (0..4,8..10);\n  }\n\n  # Now compare each entry explicitly by number\n  for (@okstat) {\n    print \"Comparing: $_ : $fh[$_] and $path[$_]\\n\" if $DEBUG;\n    # Use eq rather than == since rdev, blksize, and blocks (6, 11,\n    # and 12) will be '' on platforms that do not support them.  This\n    # is fine since we are only comparing integers.\n    unless ($fh[$_] eq $path[$_]) {\n      warn \"Did not match $_ element of stat\\n\" if $DEBUG;\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\n=item B<unlink1>\n\nSimilar to C<unlink0> except after file comparison using cmpstat, the\nfilehandle is closed prior to attempting to unlink the file. This\nallows the file to be removed without using an END block, but does\nmean that the post-unlink comparison of the filehandle state provided\nby C<unlink0> is not available.\n\n  unlink1($fh, $path)\n     or die \"Error closing and unlinking file\";\n\nUsually called from the object destructor when using the OO interface.\n\nNot exported by default.\n\nThis function is disabled if the global variabl"..., 4096) = 4096
22042 read(4, "IGH\n\nIn addition to the MEDIUM security checks, also check for the\npossibility of ``chown() giveaway'' using the L<POSIX|POSIX>\nsysconf() function. If this is a possibility, each directory in the\npath is checked in turn for safeness, recursively walking back to the\nroot directory.\n\nFor platforms that do not support the L<POSIX|POSIX>\nC<_PC_CHOWN_RESTRICTED> symbol (for example, Windows NT) it is\nassumed that ``chown() giveaway'' is possible and the recursive test\nis performed.\n\n=back\n\nThe level can be changed as follows:\n\n  File::Temp->safe_level( File::Temp::HIGH );\n\nThe level constants are not exported by the module.\n\nCurrently, you must be running at least perl v5.6.0 in order to\nrun with MEDIUM or HIGH security. This is simply because the\nsafety tests use functions from L<Fcntl|Fcntl> that are not\navailable in older versions of perl. The problem is that the version\nnumber for Fcntl is the same in perl 5.6.0 and in 5.005_03 even though\nthey are different versions.\n\nOn systems that do not support the HIGH or MEDIUM safety levels\n(for example Win NT or OS/2) any attempt to change the level will\nbe ignored. The decision to ignore rather than raise an exception\nallows portable programs to be written with high security in mind\nfor the systems that can support this without those programs failing\non systems where the extra tests are irrelevant.\n\nIf you really need to see whether the change has been accepted\nsimply examine the return value of C<safe_level>.\n\n  $newlevel = File::Temp->safe_level( File::Temp::HIGH );\n  die \"Could not change to high security\"\n      if $newlevel != File::Temp::HIGH;\n\n=cut\n\n{\n  # protect from using the variable itself\n  my $LEVEL = STANDARD;\n  sub safe_level {\n    my $self = shift;\n    if (@_) {\n      my $level = shift;\n      if (($level != STANDARD) && ($level != MEDIUM) && ($level != HIGH)) {\n        carp \"safe_level: Specified level ($level) not STANDARD, MEDIUM or HIGH - ignoring\\n\" if $^W;\n      } else {\n        # Dont allow this on perl 5.005 or earlier\n        if ($] < 5.006 && $lev"..., 4096) = 4096
22042 read(4, "ys to avoid ever looking at,\ntouching, or even imputing the existence of the filename.  You do not\nknow that that filename is connected to the same file as the handle\nyou have, and attempts to check this can only trigger more race\nconditions.  It's far more secure to use the filehandle alone and\ndispense with the filename altogether.\n\nIf you need to pass the handle to something that expects a filename\nthen, on a unix system, use C<\"/dev/fd/\" . fileno($fh)> for arbitrary\nprograms, or more generally C<< \"+<=&\" . fileno($fh) >> for Perl\nprograms.  You will have to clear the close-on-exec bit on that file\ndescriptor before passing it to another process.\n\n    use Fcntl qw/F_SETFD F_GETFD/;\n    fcntl($tmpfh, F_SETFD, 0)\n        or die \"Can't clear close-on-exec flag on temp fh: $!\\n\";\n\n=head2 Temporary files and NFS\n\nSome problems are associated with using temporary files that reside\non NFS file systems and it is recommended that a local filesystem\nis used whenever possible. Some of the security tests will most probably\nfail when the temp file is not local. Additionally, be aware that\nthe performance of I/O operations over NFS will not be as good as for\na local disk.\n\n=head2 Forking\n\nIn some cases files created by File::Temp are removed from within an\nEND block. Since END blocks are triggered when a child process exits\n(unless C<POSIX::_exit()> is used by the child) File::Temp takes care\nto only remove those temp files created by a particular process ID. This\nmeans that a child will not attempt to remove temp files created by the\nparent process.\n\nIf you are forking many processes in parallel that are all creating\ntemporary files, you may need to reset the random number seed using\nsrand(EXPR) in each child else all the children will attempt to walk\nthrough the same set of random file names and may well cause\nthemselves to give up if they exceed the number of retry attempts.\n\n=head2 Directory removal\n\nNote that if you have chdir'ed into the temporary directory and it is\nsubsequently cleaned up (either in the END block or"..., 4096) = 4096
22042 read(4, "n $self->{DIRNAME};\n}\n\nsub STRINGIFY {\n  my $self = shift;\n  return $self->dirname;\n}\n\nsub unlink_on_destroy {\n  my $self = shift;\n  if (@_) {\n    $self->{CLEANUP} = shift;\n  }\n  return $self->{CLEANUP};\n}\n\nsub DESTROY {\n  my $self = shift;\n  local($., $@, $!, $^E, $?);\n  if ($self->unlink_on_destroy && \n      $$ == $self->{LAUNCHPID} && !$File::Temp::KEEP_ALL) {\n    if (-d $self->{DIRNAME}) {\n      # Some versions of rmtree will abort if you attempt to remove\n      # the directory you are sitting in. We protect that and turn it\n      # into a warning. We do this because this occurs during object\n      # destruction and so can not be caught by the user.\n      eval { rmtree($self->{DIRNAME}, $File::Temp::DEBUG, 0); };\n      warn $@ if ($@ && $^W);\n    }\n  }\n}\n\n\n1;\n", 4096) = 774
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Carp/Heavy.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Carp/Heavy.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Carp/Heavy.pm", {st_mode=S_IFREG|0444, st_size=289, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Carp/Heavy.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package Carp;\n\n# On one line so MakeMaker will see it.\nuse Carp;  our $VERSION = $Carp::VERSION;\n\n1;\n\n# Most of the machinery of Carp used to be there.\n# It has been moved in Carp.pm now, but this placeholder remains for\n# the benefit of modules that like to preload Carp::Heavy directly.\n", 4096) = 289
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Getopt/Long.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Getopt/Long.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Getopt/Long.pm", {st_mode=S_IFREG|0444, st_size=79188, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Getopt/Long.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# Getopt::Long.pm -- Universal options parsing\n\npackage Getopt::Long;\n\n# RCS Status      : $Id: Long.pm,v 2.76 2009/03/30 20:54:30 jv Exp $\n# Author          : Johan Vromans\n# Created On      : Tue Sep 11 15:00:12 1990\n# Last Modified By: Johan Vromans\n# Last Modified On: Mon Mar 30 22:51:17 2009\n# Update Count    : 1601\n# Status          : Released\n\n################ Module Preamble ################\n\nuse 5.004;\n\nuse strict;\n\nuse vars qw($VERSION);\n$VERSION        =  2.38;\n# For testing versions only.\n#use vars qw($VERSION_STRING);\n#$VERSION_STRING = \"2.38\";\n\nuse Exporter;\nuse vars qw(@ISA @EXPORT @EXPORT_OK);\n@ISA = qw(Exporter);\n\n# Exported subroutines.\nsub GetOptions(@);\t\t# always\nsub GetOptionsFromArray(@);\t# on demand\nsub GetOptionsFromString(@);\t# on demand\nsub Configure(@);\t\t# on demand\nsub HelpMessage(@);\t\t# on demand\nsub VersionMessage(@);\t\t# in demand\n\nBEGIN {\n    # Init immediately so their contents can be used in the 'use vars' below.\n    @EXPORT    = qw(&GetOptions $REQUIRE_ORDER $PERMUTE $RETURN_IN_ORDER);\n    @EXPORT_OK = qw(&HelpMessage &VersionMessage &Configure\n\t\t    &GetOptionsFromArray &GetOptionsFromString);\n}\n\n# User visible variables.\nuse vars @EXPORT, @EXPORT_OK;\nuse vars qw($error $debug $major_version $minor_version);\n# Deprecated visible variables.\nuse vars qw($autoabbrev $getopt_compat $ignorecase $bundling $order\n\t    $passthrough);\n# Official invisible variables.\nuse vars qw($genprefix $caller $gnu_compat $auto_help $auto_version $longprefix);\n\n# Public subroutines.\nsub config(@);\t\t\t# deprecated name\n\n# Private subroutines.\nsub ConfigDefaults();\nsub ParseOptionSpec($$);\nsub OptCtl($);\nsub FindOption($$$$$);\nsub ValidValue ($$$$$);\n\n################ Local Variables ################\n\n# $requested_version holds the version that was mentioned in the 'use'\n# or 'require', if any. It can be used to enable or disable specific\n# features.\nmy $requested_version = 0;\n\n################ Resident subroutines ################\n\nsub ConfigDefaults() {\n    # Handle POSIX compliancy.\n    if ( defined $"..., 4096) = 4096
22042 read(4, "=> (caller)[0] };\n\n    bless ($self, $class);\n\n    # Process config attributes.\n    if ( defined $atts{config} ) {\n\tmy $save = Getopt::Long::Configure ($default_config, @{$atts{config}});\n\t$self->{settings} = Getopt::Long::Configure ($save);\n\tdelete ($atts{config});\n    }\n    # Else use default config.\n    else {\n\t$self->{settings} = $default_config;\n    }\n\n    if ( %atts ) {\t\t# Oops\n\tdie(__PACKAGE__.\": unhandled attributes: \".\n\t    join(\" \", sort(keys(%atts))).\"\\n\");\n    }\n\n    $self;\n}\n\nsub configure {\n    my ($self) = shift;\n\n    # Restore settings, merge new settings in.\n    my $save = Getopt::Long::Configure ($self->{settings}, @_);\n\n    # Restore orig config and save the new config.\n    $self->{settings} = Getopt::Long::Configure ($save);\n}\n\nsub getoptions {\n    my ($self) = shift;\n\n    # Restore config settings.\n    my $save = Getopt::Long::Configure ($self->{settings});\n\n    # Call main routine.\n    my $ret = 0;\n    $Getopt::Long::caller = $self->{caller_pkg};\n\n    eval {\n\t# Locally set exception handler to default, otherwise it will\n\t# be called implicitly here, and again explicitly when we try\n\t# to deliver the messages.\n\tlocal ($SIG{__DIE__}) = 'DEFAULT';\n\t$ret = Getopt::Long::GetOptions (@_);\n    };\n\n    # Restore saved settings.\n    Getopt::Long::Configure ($save);\n\n    # Handle errors and return value.\n    die ($@) if $@;\n    return $ret;\n}\n\npackage Getopt::Long;\n\n################ Back to Normal ################\n\n# Indices in option control info.\n# Note that ParseOptions uses the fields directly. Search for 'hard-wired'.\nuse constant CTL_TYPE    => 0;\n#use constant   CTL_TYPE_FLAG   => '';\n#use constant   CTL_TYPE_NEG    => '!';\n#use constant   CTL_TYPE_INCR   => '+';\n#use constant   CTL_TYPE_INT    => 'i';\n#use constant   CTL_TYPE_INTINC => 'I';\n#use constant   CTL_TYPE_XINT   => 'o';\n#use constant   CTL_TYPE_FLOAT  => 'f';\n#use constant   CTL_TYPE_STRING => 's';\n\nuse constant CTL_CNAME   => 1;\n\nuse constant CTL_DEFAULT => 2;\n\nuse constant CTL_DEST    => 3;\n use constant   CTL_DEST_SCALAR => 0;\n us"..., 4096) = 4096
22042 brk(0x829b000)                    = 0x829b000
22042 read(4, "ecase=$ignorecase,\",\n\t   \"requested_version=$requested_version,\",\n\t   \"passthrough=$passthrough,\",\n\t   \"genprefix=\\\"$genprefix\\\",\",\n\t   \"longprefix=\\\"$longprefix\\\".\",\n\t   \"\\n\");\n    }\n\n    # Check for ref HASH as first argument.\n    # First argument may be an object. It's OK to use this as long\n    # as it is really a hash underneath.\n    $userlinkage = undef;\n    if ( @optionlist && ref($optionlist[0]) and\n\t UNIVERSAL::isa($optionlist[0],'HASH') ) {\n\t$userlinkage = shift (@optionlist);\n\tprint STDERR (\"=> user linkage: $userlinkage\\n\") if $debug;\n    }\n\n    # See if the first element of the optionlist contains option\n    # starter characters.\n    # Be careful not to interpret '<>' as option starters.\n    if ( @optionlist && $optionlist[0] =~ /^\\W+$/\n\t && !($optionlist[0] eq '<>'\n\t      && @optionlist > 0\n\t      && ref($optionlist[1])) ) {\n\t$prefix = shift (@optionlist);\n\t# Turn into regexp. Needs to be parenthesized!\n\t$prefix =~ s/(\\W)/\\\\$1/g;\n\t$prefix = \"([\" . $prefix . \"])\";\n\tprint STDERR (\"=> prefix=\\\"$prefix\\\"\\n\") if $debug;\n    }\n\n    # Verify correctness of optionlist.\n    %opctl = ();\n    while ( @optionlist ) {\n\tmy $opt = shift (@optionlist);\n\n\tunless ( defined($opt) ) {\n\t    $error .= \"Undefined argument in option spec\\n\";\n\t    next;\n\t}\n\n\t# Strip leading prefix so people can specify \"--foo=i\" if they like.\n\t$opt = $+ if $opt =~ /^$prefix+(.*)$/s;\n\n\tif ( $opt eq '<>' ) {\n\t    if ( (defined $userlinkage)\n\t\t&& !(@optionlist > 0 && ref($optionlist[0]))\n\t\t&& (exists $userlinkage->{$opt})\n\t\t&& ref($userlinkage->{$opt}) ) {\n\t\tunshift (@optionlist, $userlinkage->{$opt});\n\t    }\n\t    unless ( @optionlist > 0\n\t\t    && ref($optionlist[0]) && ref($optionlist[0]) eq 'CODE' ) {\n\t\t$error .= \"Option spec <> requires a reference to a subroutine\\n\";\n\t\t# Kill the linkage (to avoid another error).\n\t\tshift (@optionlist)\n\t\t  if @optionlist && ref($optionlist[0]);\n\t\tnext;\n\t    }\n\t    $linkage{'<>'} = shift (@optionlist);\n\t    next;\n\t}\n\n\t# Parse option spec.\n\tmy ($name, $orig) = ParseOptionSpec ($opt, \\%opctl);\n\tunless ( define"..., 4096) = 4096
22042 read(4, "} = \\\\\\%\".$pkg.\"::opt_$ov;\");\n\t    }\n\t    else {\n\t\tprint STDERR (\"=> link \\\"$orig\\\" to \\$$pkg\",\"::opt_$ov\\n\")\n\t\t    if $debug;\n\t\teval (\"\\$linkage{\\$orig} = \\\\\\$\".$pkg.\"::opt_$ov;\");\n\t    }\n\t}\n\n\tif ( $opctl{$name}[CTL_TYPE] eq 'I'\n\t     && ( $opctl{$name}[CTL_DEST] == CTL_DEST_ARRAY\n\t\t  || $opctl{$name}[CTL_DEST] == CTL_DEST_HASH )\n\t   ) {\n\t    $error .= \"Invalid option linkage for \\\"$opt\\\"\\n\";\n\t}\n\n    }\n\n    # Bail out if errors found.\n    die ($error) if $error;\n    $error = 0;\n\n    # Supply --version and --help support, if needed and allowed.\n    if ( defined($auto_version) ? $auto_version : ($requested_version >= 2.3203) ) {\n\tif ( !defined($opctl{version}) ) {\n\t    $opctl{version} = ['','version',0,CTL_DEST_CODE,undef];\n\t    $linkage{version} = \\&VersionMessage;\n\t}\n\t$auto_version = 1;\n    }\n    if ( defined($auto_help) ? $auto_help : ($requested_version >= 2.3203) ) {\n\tif ( !defined($opctl{help}) && !defined($opctl{'?'}) ) {\n\t    $opctl{help} = $opctl{'?'} = ['','help',0,CTL_DEST_CODE,undef];\n\t    $linkage{help} = \\&HelpMessage;\n\t}\n\t$auto_help = 1;\n    }\n\n    # Show the options tables if debugging.\n    if ( $debug ) {\n\tmy ($arrow, $k, $v);\n\t$arrow = \"=> \";\n\twhile ( ($k,$v) = each(%opctl) ) {\n\t    print STDERR ($arrow, \"\\$opctl{$k} = $v \", OptCtl($v), \"\\n\");\n\t    $arrow = \"   \";\n\t}\n    }\n\n    # Process argument list\n    my $goon = 1;\n    while ( $goon && @$argv > 0 ) {\n\n\t# Get next argument.\n\t$opt = shift (@$argv);\n\tprint STDERR (\"=> arg \\\"\", $opt, \"\\\"\\n\") if $debug;\n\n\t# Double dash is option list terminator.\n\tif ( $opt eq $argend ) {\n\t  push (@ret, $argend) if $passthrough;\n\t  last;\n\t}\n\n\t# Look it up.\n\tmy $tryopt = $opt;\n\tmy $found;\t\t# success status\n\tmy $key;\t\t# key (if hash type)\n\tmy $arg;\t\t# option argument\n\tmy $ctl;\t\t# the opctl entry\n\n\t($found, $opt, $ctl, $arg, $key) =\n\t  FindOption ($argv, $prefix, $argend, $opt, \\%opctl);\n\n\tif ( $found ) {\n\n\t    # FindOption undefines $opt in case of errors.\n\t    next unless defined $opt;\n\n\t    my $argcnt = 0;\n\t    while ( defined $arg ) {\n\n\t\t# Get the canonical name.\n"..., 4096) = 4096
22042 read(4, "&{$linkage{$opt}}\n\t\t\t\t  (Getopt::Long::CallBack->new\n\t\t\t\t   (name    => $opt,\n\t\t\t\t    ctl     => $ctl,\n\t\t\t\t    opctl   => \\%opctl,\n\t\t\t\t    linkage => \\%linkage,\n\t\t\t\t    prefix  => $prefix,\n\t\t\t\t   ),\n\t\t\t\t   $ctl->[CTL_DEST] == CTL_DEST_HASH ? ($key) : (),\n\t\t\t\t   $arg);\n\t\t\t    };\n\t\t\t    $@;\n\t\t\t};\n\t\t\tprint STDERR (\"=> die($eval_error)\\n\")\n\t\t\t  if $debug && $eval_error ne '';\n\t\t\tif ( $eval_error =~ /^!/ ) {\n\t\t\t    if ( $eval_error =~ /^!FINISH\\b/ ) {\n\t\t\t\t$goon = 0;\n\t\t\t    }\n\t\t\t}\n\t\t\telsif ( $eval_error ne '' ) {\n\t\t\t    warn ($eval_error);\n\t\t\t    $error++;\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tprint STDERR (\"Invalid REF type \\\"\", ref($linkage{$opt}),\n\t\t\t\t      \"\\\" in linkage\\n\");\n\t\t\tdie(\"Getopt::Long -- internal error!\\n\");\n\t\t    }\n\t\t}\n\t\t# No entry in linkage means entry in userlinkage.\n\t\telsif ( $ctl->[CTL_DEST] == CTL_DEST_ARRAY ) {\n\t\t    if ( defined $userlinkage->{$opt} ) {\n\t\t\tprint STDERR (\"=> push(\\@{\\$L{$opt}}, \\\"$arg\\\")\\n\")\n\t\t\t    if $debug;\n\t\t\tpush (@{$userlinkage->{$opt}}, $arg);\n\t\t    }\n\t\t    else {\n\t\t\tprint STDERR (\"=>\\$L{$opt} = [\\\"$arg\\\"]\\n\")\n\t\t\t    if $debug;\n\t\t\t$userlinkage->{$opt} = [$arg];\n\t\t    }\n\t\t}\n\t\telsif ( $ctl->[CTL_DEST] == CTL_DEST_HASH ) {\n\t\t    if ( defined $userlinkage->{$opt} ) {\n\t\t\tprint STDERR (\"=> \\$L{$opt}->{$key} = \\\"$arg\\\"\\n\")\n\t\t\t    if $debug;\n\t\t\t$userlinkage->{$opt}->{$key} = $arg;\n\t\t    }\n\t\t    else {\n\t\t\tprint STDERR (\"=>\\$L{$opt} = {$key => \\\"$arg\\\"}\\n\")\n\t\t\t    if $debug;\n\t\t\t$userlinkage->{$opt} = {$key => $arg};\n\t\t    }\n\t\t}\n\t\telse {\n\t\t    if ( $ctl->[CTL_TYPE] eq '+' ) {\n\t\t\tprint STDERR (\"=> \\$L{$opt} += \\\"$arg\\\"\\n\")\n\t\t\t  if $debug;\n\t\t\tif ( defined $userlinkage->{$opt} ) {\n\t\t\t    $userlinkage->{$opt} += $arg;\n\t\t\t}\n\t\t\telse {\n\t\t\t    $userlinkage->{$opt} = $arg;\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tprint STDERR (\"=>\\$L{$opt} = \\\"$arg\\\"\\n\") if $debug;\n\t\t\t$userlinkage->{$opt} = $arg;\n\t\t    }\n\t\t}\n\n\t\t$argcnt++;\n\t\tlast if $argcnt >= $ctl->[CTL_AMAX] && $ctl->[CTL_AMAX] != -1;\n\t\tundef($arg);\n\n\t\t# Need more args?\n\t\tif ( $argcnt < $ctl->[CTL_AMIN] ) {\n\t\t    if ( @$argv ) {\n\t\t\tif ( ValidValue($ctl, $argv->["..., 4096) = 4096
22042 read(4, "ntation of what's in an optbl.\nsub OptCtl ($) {\n    my ($v) = @_;\n    my @v = map { defined($_) ? ($_) : (\"<undef>\") } @$v;\n    \"[\".\n      join(\",\",\n\t   \"\\\"$v[CTL_TYPE]\\\"\",\n\t   \"\\\"$v[CTL_CNAME]\\\"\",\n\t   \"\\\"$v[CTL_DEFAULT]\\\"\",\n\t   (\"\\$\",\"\\@\",\"\\%\",\"\\&\")[$v[CTL_DEST] || 0],\n\t   $v[CTL_AMIN] || '',\n\t   $v[CTL_AMAX] || '',\n#\t   $v[CTL_RANGE] || '',\n#\t   $v[CTL_REPEAT] || '',\n\t  ). \"]\";\n}\n\n# Parse an option specification and fill the tables.\nsub ParseOptionSpec ($$) {\n    my ($opt, $opctl) = @_;\n\n    # Match option spec.\n    if ( $opt !~ m;^\n\t\t   (\n\t\t     # Option name\n\t\t     (?: \\w+[-\\w]* )\n\t\t     # Alias names, or \"?\"\n\t\t     (?: \\| (?: \\? | \\w[-\\w]* ) )*\n\t\t   )?\n\t\t   (\n\t\t     # Either modifiers ...\n\t\t     [!+]\n\t\t     |\n\t\t     # ... or a value/dest/repeat specification\n\t\t     [=:] [ionfs] [@%]? (?: \\{\\d*,?\\d*\\} )?\n\t\t     |\n\t\t     # ... or an optional-with-default spec\n\t\t     : (?: -?\\d+ | \\+ ) [@%]?\n\t\t   )?\n\t\t   $;x ) {\n\treturn (undef, \"Error in option spec: \\\"$opt\\\"\\n\");\n    }\n\n    my ($names, $spec) = ($1, $2);\n    $spec = '' unless defined $spec;\n\n    # $orig keeps track of the primary name the user specified.\n    # This name will be used for the internal or external linkage.\n    # In other words, if the user specifies \"FoO|BaR\", it will\n    # match any case combinations of 'foo' and 'bar', but if a global\n    # variable needs to be set, it will be $opt_FoO in the exact case\n    # as specified.\n    my $orig;\n\n    my @names;\n    if ( defined $names ) {\n\t@names =  split (/\\|/, $names);\n\t$orig = $names[0];\n    }\n    else {\n\t@names = ('');\n\t$orig = '';\n    }\n\n    # Construct the opctl entries.\n    my $entry;\n    if ( $spec eq '' || $spec eq '+' || $spec eq '!' ) {\n\t# Fields are hard-wired here.\n\t$entry = [$spec,$orig,undef,CTL_DEST_SCALAR,0,0];\n    }\n    elsif ( $spec =~ /^:(-?\\d+|\\+)([@%])?$/ ) {\n\tmy $def = $1;\n\tmy $dest = $2;\n\tmy $type = $def eq '+' ? 'I' : 'i';\n\t$dest ||= '$';\n\t$dest = $dest eq '@' ? CTL_DEST_ARRAY\n\t  : $dest eq '%' ? CTL_DEST_HASH : CTL_DEST_SCALAR;\n\t# Fields are hard-wired here.\n\t$entry = [$type,$o"..., 4096) = 4096
22042 brk(0x82bc000)                    = 0x82bc000
22042 read(4, "& !defined $opctl->{''};\n\n    $opt = $+;\n    my $starter = $1;\n\n    print STDERR (\"=> split \\\"$starter\\\"+\\\"$opt\\\"\\n\") if $debug;\n\n    my $optarg;\t\t\t# value supplied with --opt=value\n    my $rest;\t\t\t# remainder from unbundling\n\n    # If it is a long option, it may include the value.\n    # With getopt_compat, only if not bundling.\n    if ( ($starter=~/^$longprefix$/\n          || ($getopt_compat && ($bundling == 0 || $bundling == 2)))\n\t  && $opt =~ /^([^=]+)=(.*)$/s ) {\n\t$opt = $1;\n\t$optarg = $2;\n\tprint STDERR (\"=> option \\\"\", $opt,\n\t\t      \"\\\", optarg = \\\"$optarg\\\"\\n\") if $debug;\n    }\n\n    #### Look it up ###\n\n    my $tryopt = $opt;\t\t# option to try\n\n    if ( $bundling && $starter eq '-' ) {\n\n\t# To try overrides, obey case ignore.\n\t$tryopt = $ignorecase ? lc($opt) : $opt;\n\n\t# If bundling == 2, long options can override bundles.\n\tif ( $bundling == 2 && length($tryopt) > 1\n\t     && defined ($opctl->{$tryopt}) ) {\n\t    print STDERR (\"=> $starter$tryopt overrides unbundling\\n\")\n\t      if $debug;\n\t}\n\telse {\n\t    $tryopt = $opt;\n\t    # Unbundle single letter option.\n\t    $rest = length ($tryopt) > 0 ? substr ($tryopt, 1) : '';\n\t    $tryopt = substr ($tryopt, 0, 1);\n\t    $tryopt = lc ($tryopt) if $ignorecase > 1;\n\t    print STDERR (\"=> $starter$tryopt unbundled from \",\n\t\t\t  \"$starter$tryopt$rest\\n\") if $debug;\n\t    $rest = undef unless $rest ne '';\n\t}\n    }\n\n    # Try auto-abbreviation.\n    elsif ( $autoabbrev && $opt ne \"\" ) {\n\t# Sort the possible long option names.\n\tmy @names = sort(keys (%$opctl));\n\t# Downcase if allowed.\n\t$opt = lc ($opt) if $ignorecase;\n\t$tryopt = $opt;\n\t# Turn option name into pattern.\n\tmy $pat = quotemeta ($opt);\n\t# Look up in option names.\n\tmy @hits = grep (/^$pat/, @names);\n\tprint STDERR (\"=> \", scalar(@hits), \" hits (@hits) with \\\"$pat\\\" \",\n\t\t      \"out of \", scalar(@names), \"\\n\") if $debug;\n\n\t# Check for ambiguous results.\n\tunless ( (@hits <= 1) || (grep ($_ eq $opt, @hits) == 1) ) {\n\t    # See if all matches are for the same option.\n\t    my %hit;\n\t    foreach ( @hits ) {\n\t\tmy $hit = $_;\n\t\t$hi"..., 4096) = 4096
22042 read(4, "\t# strip NO prefix\n\t    $arg = 0;\t\t# supply explicit value\n\t}\n\tunshift (@$argv, $starter.$rest) if defined $rest;\n\treturn (1, $opt, $ctl, $arg);\n    }\n\n    # Get mandatory status and type info.\n    my $mand = $ctl->[CTL_AMIN];\n\n    # Check if there is an option argument available.\n    if ( $gnu_compat && defined $optarg && $optarg eq '' ) {\n\treturn (1, $opt, $ctl, $type eq 's' ? '' : 0) ;#unless $mand;\n\t$optarg = 0 unless $type eq 's';\n    }\n\n    # Check if there is an option argument available.\n    if ( defined $optarg\n\t ? ($optarg eq '')\n\t : !(defined $rest || @$argv > 0) ) {\n\t# Complain if this option needs an argument.\n#\tif ( $mand && !($type eq 's' ? defined($optarg) : 0) ) {\n\tif ( $mand ) {\n\t    return (0) if $passthrough;\n\t    warn (\"Option \", $opt, \" requires an argument\\n\");\n\t    $error++;\n\t    return (1, undef);\n\t}\n\tif ( $type eq 'I' ) {\n\t    # Fake incremental type.\n\t    my @c = @$ctl;\n\t    $c[CTL_TYPE] = '+';\n\t    return (1, $opt, \\@c, 1);\n\t}\n\treturn (1, $opt, $ctl,\n\t\tdefined($ctl->[CTL_DEFAULT]) ? $ctl->[CTL_DEFAULT] :\n\t\t$type eq 's' ? '' : 0);\n    }\n\n    # Get (possibly optional) argument.\n    $arg = (defined $rest ? $rest\n\t    : (defined $optarg ? $optarg : shift (@$argv)));\n\n    # Get key if this is a \"name=value\" pair for a hash option.\n    my $key;\n    if ($ctl->[CTL_DEST] == CTL_DEST_HASH && defined $arg) {\n\t($key, $arg) = ($arg =~ /^([^=]*)=(.*)$/s) ? ($1, $2)\n\t  : ($arg, defined($ctl->[CTL_DEFAULT]) ? $ctl->[CTL_DEFAULT] :\n\t     ($mand ? undef : ($type eq 's' ? \"\" : 1)));\n\tif (! defined $arg) {\n\t    warn (\"Option $opt, key \\\"$key\\\", requires a value\\n\");\n\t    $error++;\n\t    # Push back.\n\t    unshift (@$argv, $starter.$rest) if defined $rest;\n\t    return (1, undef);\n\t}\n    }\n\n    #### Check if the argument is valid for this option ####\n\n    my $key_valid = $ctl->[CTL_DEST] == CTL_DEST_HASH ? \"[^=]+=\" : \"\";\n\n    if ( $type eq 's' ) {\t# string\n\t# A mandatory string takes anything.\n\treturn (1, $opt, $ctl, $arg, $key) if $mand;\n\n\t# Same for optional string as a hash value\n\treturn (1, $opt, $ctl, $"..., 4096) = 4096
22042 read(4, " $bundling && defined $rest &&\n\t     $rest =~ /^($key_valid)($o_valid)(.*)$/s ) {\n\t    $arg =~ tr/_//d;\n\t    ($key, $arg, $rest) = ($1, $2, $+);\n\t    chop($key) if $key;\n\t    unshift (@$argv, $starter.$rest) if defined $rest && $rest ne '';\n\t}\n\telsif ( $arg =~ /^$o_valid$/ ) {\n\t    $arg =~ tr/_//d;\n\t}\n\telse {\n\t    if ( defined $optarg || $mand ) {\n\t\tif ( $passthrough ) {\n\t\t    unshift (@$argv, defined $rest ? $starter.$rest : $arg)\n\t\t      unless defined $optarg;\n\t\t    return (0);\n\t\t}\n\t\twarn (\"Value \\\"\", $arg, \"\\\" invalid for option \",\n\t\t      $opt, \" (real number expected)\\n\");\n\t\t$error++;\n\t\t# Push back.\n\t\tunshift (@$argv, $starter.$rest) if defined $rest;\n\t\treturn (1, undef);\n\t    }\n\t    else {\n\t\t# Push back.\n\t\tunshift (@$argv, defined $rest ? $starter.$rest : $arg);\n\t\t# Supply default value.\n\t\t$arg = 0.0;\n\t    }\n\t}\n    }\n    else {\n\tdie(\"Getopt::Long internal error (Can't happen)\\n\");\n    }\n    return (1, $opt, $ctl, $arg, $key);\n}\n\nsub ValidValue ($$$$$) {\n    my ($ctl, $arg, $mand, $argend, $prefix) = @_;\n\n    if ( $ctl->[CTL_DEST] == CTL_DEST_HASH ) {\n\treturn 0 unless $arg =~ /[^=]+=(.*)/;\n\t$arg = $1;\n    }\n\n    my $type = $ctl->[CTL_TYPE];\n\n    if ( $type eq 's' ) {\t# string\n\t# A mandatory string takes anything.\n\treturn (1) if $mand;\n\n\treturn (1) if $arg eq \"-\";\n\n\t# Check for option or option list terminator.\n\treturn 0 if $arg eq $argend || $arg =~ /^$prefix.+/;\n\treturn 1;\n    }\n\n    elsif ( $type eq 'i'\t# numeric/integer\n            || $type eq 'I'\t# numeric/integer w/ incr default\n\t    || $type eq 'o' ) { # dec/oct/hex/bin value\n\n\tmy $o_valid = $type eq 'o' ? PAT_XINT : PAT_INT;\n\treturn $arg =~ /^$o_valid$/si;\n    }\n\n    elsif ( $type eq 'f' ) { # real number, int is also ok\n\t# We require at least one digit before a point or 'e',\n\t# and at least one digit following the point and 'e'.\n\t# [-]NN[.NN][eNN]\n\tmy $o_valid = PAT_FLOAT;\n\treturn $arg =~ /^$o_valid$/;\n    }\n    die(\"ValidValue: Cannot happen\\n\");\n}\n\n# Getopt::Long Configuration.\nsub Configure (@) {\n    my (@options) = @_;\n\n    my $prevconfig =\n    "..., 4096) = 4096
22042 read(4, " $try eq 'passthrough' ) {\n\t    $passthrough = $action;\n\t}\n\telsif ( $try =~ /^prefix=(.+)$/ && $action ) {\n\t    $genprefix = $1;\n\t    # Turn into regexp. Needs to be parenthesized!\n\t    $genprefix = \"(\" . quotemeta($genprefix) . \")\";\n\t    eval { '' =~ /$genprefix/; };\n\t    die(\"Getopt::Long: invalid pattern \\\"$genprefix\\\"\") if $@;\n\t}\n\telsif ( $try =~ /^prefix_pattern=(.+)$/ && $action ) {\n\t    $genprefix = $1;\n\t    # Parenthesize if needed.\n\t    $genprefix = \"(\" . $genprefix . \")\"\n\t      unless $genprefix =~ /^\\(.*\\)$/;\n\t    eval { '' =~ m\"$genprefix\"; };\n\t    die(\"Getopt::Long: invalid pattern \\\"$genprefix\\\"\") if $@;\n\t}\n\telsif ( $try =~ /^long_prefix_pattern=(.+)$/ && $action ) {\n\t    $longprefix = $1;\n\t    # Parenthesize if needed.\n\t    $longprefix = \"(\" . $longprefix . \")\"\n\t      unless $longprefix =~ /^\\(.*\\)$/;\n\t    eval { '' =~ m\"$longprefix\"; };\n\t    die(\"Getopt::Long: invalid long prefix pattern \\\"$longprefix\\\"\") if $@;\n\t}\n\telsif ( $try eq 'debug' ) {\n\t    $debug = $action;\n\t}\n\telse {\n\t    die(\"Getopt::Long: unknown config parameter \\\"$opt\\\"\")\n\t}\n    }\n    $prevconfig;\n}\n\n# Deprecated name.\nsub config (@) {\n    Configure (@_);\n}\n\n# Issue a standard message for --version.\n#\n# The arguments are mostly the same as for Pod::Usage::pod2usage:\n#\n#  - a number (exit value)\n#  - a string (lead in message)\n#  - a hash with options. See Pod::Usage for details.\n#\nsub VersionMessage(@) {\n    # Massage args.\n    my $pa = setup_pa_args(\"version\", @_);\n\n    my $v = $main::VERSION;\n    my $fh = $pa->{-output} ||\n      ($pa->{-exitval} eq \"NOEXIT\" || $pa->{-exitval} < 2) ? \\*STDOUT : \\*STDERR;\n\n    print $fh (defined($pa->{-message}) ? $pa->{-message} : (),\n\t       $0, defined $v ? \" version $v\" : (),\n\t       \"\\n\",\n\t       \"(\", __PACKAGE__, \"::\", \"GetOptions\",\n\t       \" version \",\n\t       defined($Getopt::Long::VERSION_STRING)\n\t         ? $Getopt::Long::VERSION_STRING : $VERSION, \";\",\n\t       \" Perl version \",\n\t       $] >= 5.006 ? sprintf(\"%vd\", $^V) : $],\n\t       \")\\n\");\n    exit($pa->{-exitval}) unless $pa->{-exitval} "..., 4096) = 4096
22042 brk(0x82de000)                    = 0x82de000
22042 read(4, "ult = GetOptions (\"length=i\" => \\$length,    # numeric\n                        \"file=s\"   => \\$data,      # string\n\t\t\t\"verbose\"  => \\$verbose);  # flag\n\n=head1 DESCRIPTION\n\nThe Getopt::Long module implements an extended getopt function called\nGetOptions(). This function adheres to the POSIX syntax for command\nline options, with GNU extensions. In general, this means that options\nhave long names instead of single letters, and are introduced with a\ndouble dash \"--\". Support for bundling of command line options, as was\nthe case with the more traditional single-letter approach, is provided\nbut not enabled by default.\n\n=head1 Command Line Options, an Introduction\n\nCommand line operated programs traditionally take their arguments from\nthe command line, for example filenames or other information that the\nprogram needs to know. Besides arguments, these programs often take\ncommand line I<options> as well. Options are not necessary for the\nprogram to work, hence the name 'option', but are used to modify its\ndefault behaviour. For example, a program could do its job quietly,\nbut with a suitable option it could provide verbose information about\nwhat it did.\n\nCommand line options come in several flavours. Historically, they are\npreceded by a single dash C<->, and consist of a single letter.\n\n    -l -a -c\n\nUsually, these single-character options can be bundled:\n\n    -lac\n\nOptions can have values, the value is placed after the option\ncharacter. Sometimes with whitespace in between, sometimes not:\n\n    -s 24 -s24\n\nDue to the very cryptic nature of these options, another style was\ndeveloped that used long names. So instead of a cryptic C<-l> one\ncould use the more descriptive C<--long>. To distinguish between a\nbundle of single-character options and a long one, two dashes are used\nto precede the option name. Early implementations of long options used\na plus C<+> instead. Also, option values could be specified either\nlike\n\n    --size=24\n\nor\n\n    --size 24\n\nThe C<+> form is now obsolete and strongly deprecated.\n\n=head1 Getting Star"..., 4096) = 4096
22042 read(4, "this specification\ncan contain more than just the option name. The reference to the\nvariable is called the option I<destination>.\n\nGetOptions() will return a true value if the command line could be\nprocessed successfully. Otherwise, it will write error messages to\nSTDERR, and return a false result.\n\n=head2 A little bit less simple options\n\nGetopt::Long supports two useful variants of simple options:\nI<negatable> options and I<incremental> options.\n\nA negatable option is specified with an exclamation mark C<!> after the\noption name:\n\n    my $verbose = '';\t# option variable with default value (false)\n    GetOptions ('verbose!' => \\$verbose);\n\nNow, using C<--verbose> on the command line will enable C<$verbose>,\nas expected. But it is also allowed to use C<--noverbose>, which will\ndisable C<$verbose> by setting its value to C<0>. Using a suitable\ndefault value, the program can find out whether C<$verbose> is false\nby default, or disabled by using C<--noverbose>.\n\nAn incremental option is specified with a plus C<+> after the\noption name:\n\n    my $verbose = '';\t# option variable with default value (false)\n    GetOptions ('verbose+' => \\$verbose);\n\nUsing C<--verbose> on the command line will increment the value of\nC<$verbose>. This way the program can keep track of how many times the\noption occurred on the command line. For example, each occurrence of\nC<--verbose> could increase the verbosity level of the program.\n\n=head2 Mixing command line option with other arguments\n\nUsually programs take command line options as well as other arguments,\nfor example, file names. It is good practice to always specify the\noptions first, and the other arguments last. Getopt::Long will,\nhowever, allow the options and arguments to be mixed and 'filter out'\nall the options before passing the rest of the arguments to the\nprogram. To stop Getopt::Long from processing further arguments,\ninsert a double dash C<--> on the command line:\n\n    --size 24 -- --all\n\nIn this example, C<--all> will I<not> be treated as an option, but\npassed to the progr"..., 4096) = 4096
22042 read(4, "comma-separated lists of values as well as\nmultiple occurrences of the options. This is easy using Perl's split()\nand join() operators:\n\n    GetOptions (\"library=s\" => \\@libfiles);\n    @libfiles = split(/,/,join(',',@libfiles));\n\nOf course, it is important to choose the right separator string for\neach purpose.\n\nWarning: What follows is an experimental feature.\n\nOptions can take multiple values at once, for example\n\n    --coordinates 52.2 16.4 --rgbcolor 255 255 149\n\nThis can be accomplished by adding a repeat specifier to the option\nspecification. Repeat specifiers are very similar to the C<{...}>\nrepeat specifiers that can be used with regular expression patterns.\nFor example, the above command line would be handled as follows:\n\n    GetOptions('coordinates=f{2}' => \\@coor, 'rgbcolor=i{3}' => \\@color);\n\nThe destination for the option must be an array or array reference.\n\nIt is also possible to specify the minimal and maximal number of\narguments an option takes. C<foo=s{2,4}> indicates an option that\ntakes at least two and at most 4 arguments. C<foo=s{,}> indicates one\nor more values; C<foo:s{,}> indicates zero or more option values.\n\n=head2 Options with hash values\n\nIf the option destination is a reference to a hash, the option will\ntake, as value, strings of the form I<key>C<=>I<value>. The value will\nbe stored with the specified key in the hash.\n\n    GetOptions (\"define=s\" => \\%defines);\n\nAlternatively you can use:\n\n    GetOptions (\"define=s%\" => \\$defines);\n\nWhen used with command line options:\n\n    --define os=linux --define vendor=redhat\n\nthe hash C<%defines> (or C<%$defines>) will contain two keys, C<\"os\">\nwith value C<\"linux\"> and C<\"vendor\"> with value C<\"redhat\">. It is\nalso possible to specify that only integer or floating point numbers\nare acceptable values. The keys are always taken to be strings.\n\n=head2 User-defined subroutines to handle options\n\nUltimate control over what should be done when (actually: each time)\nan option is encountered on the command line can be achieved by\ndesignating a referenc"..., 4096) = 4096
22042 read(4, "Options ('length|height=f' => \\$length);\n\nThe first name is called the I<primary> name, the other names are\ncalled I<aliases>. When using a hash to store options, the key will\nalways be the primary name.\n\nMultiple alternate names are possible.\n\n=head2 Case and abbreviations\n\nWithout additional configuration, GetOptions() will ignore the case of\noption names, and allow the options to be abbreviated to uniqueness.\n\n    GetOptions ('length|height=f' => \\$length, \"head\" => \\$head);\n\nThis call will allow C<--l> and C<--L> for the length option, but\nrequires a least C<--hea> and C<--hei> for the head and height options.\n\n=head2 Summary of Option Specifications\n\nEach option specifier consists of two parts: the name specification\nand the argument specification.\n\nThe name specification contains the name of the option, optionally\nfollowed by a list of alternative names separated by vertical bar\ncharacters.\n\n    length\t      option name is \"length\"\n    length|size|l     name is \"length\", aliases are \"size\" and \"l\"\n\nThe argument specification is optional. If omitted, the option is\nconsidered boolean, a value of 1 will be assigned when the option is\nused on the command line.\n\nThe argument specification can be\n\n=over 4\n\n=item !\n\nThe option does not take an argument and may be negated by prefixing\nit with \"no\" or \"no-\". E.g. C<\"foo!\"> will allow C<--foo> (a value of\n1 will be assigned) as well as C<--nofoo> and C<--no-foo> (a value of\n0 will be assigned). If the option has aliases, this applies to the\naliases as well.\n\nUsing negation on a single letter option when bundling is in effect is\npointless and will result in a warning.\n\n=item +\n\nThe option does not take an argument and will be incremented by 1\nevery time it appears on the command line. E.g. C<\"more+\">, when used\nwith C<--more --more --more>, will increment the value three times,\nresulting in a value of 3 (provided it was 0 or undefined at first).\n\nThe C<+> specifier is ignored if the option destination is not a scalar.\n\n=item = I<type> [ I<desttype> ] [ I<repeat> ]\n\nTh"..., 4096) = 4096
22042 read(4, "iented interface\n\nGetopt::Long can be used in an object oriented way as well:\n\n    use Getopt::Long;\n    $p = new Getopt::Long::Parser;\n    $p->configure(...configuration options...);\n    if ($p->getoptions(...options descriptions...)) ...\n\nConfiguration options can be passed to the constructor:\n\n    $p = new Getopt::Long::Parser\n             config => [...configuration options...];\n\n=head2 Thread Safety\n\nGetopt::Long is thread safe when using ithreads as of Perl 5.8.  It is\nI<not> thread safe when using the older (experimental and now\nobsolete) threads implementation that was added to Perl 5.005.\n\n=head2 Documentation and help texts\n\nGetopt::Long encourages the use of Pod::Usage to produce help\nmessages. For example:\n\n    use Getopt::Long;\n    use Pod::Usage;\n\n    my $man = 0;\n    my $help = 0;\n\n    GetOptions('help|?' => \\$help, man => \\$man) or pod2usage(2);\n    pod2usage(1) if $help;\n    pod2usage(-exitstatus => 0, -verbose => 2) if $man;\n\n    __END__\n\n    =head1 NAME\n\n    sample - Using Getopt::Long and Pod::Usage\n\n    =head1 SYNOPSIS\n\n    sample [options] [file ...]\n\n     Options:\n       -help            brief help message\n       -man             full documentation\n\n    =head1 OPTIONS\n\n    =over 8\n\n    =item B<-help>\n\n    Print a brief help message and exits.\n\n    =item B<-man>\n\n    Prints the manual page and exits.\n\n    =back\n\n    =head1 DESCRIPTION\n\n    B<This program> will read the given input file(s) and do something\n    useful with the contents thereof.\n\n    =cut\n\nSee L<Pod::Usage> for details.\n\n=head2 Parsing options from an arbitrary array\n\nBy default, GetOptions parses the options that are present in the\nglobal array C<@ARGV>. A special entry C<GetOptionsFromArray> can be\nused to parse options from an arbitrary array.\n\n    use Getopt::Long qw(GetOptionsFromArray);\n    $ret = GetOptionsFromArray(\\@myopts, ...);\n\nWhen used like this, the global C<@ARGV> is not touched at all.\n\nThe following two calls behave identically:\n\n    $ret = GetOptions( ... );\n    $ret = GetOptionsFromArray(\\@ARGV, ... );\n\n=hea"..., 4096) = 4096
22042 read(4, "y $len = 0;\n    my %h = ('length' => \\$len);\n    GetOptions (\\%h, 'length=i');\t# will store in $len\n\nThis example is fully equivalent with:\n\n    my $len = 0;\n    GetOptions ('length=i' => \\$len);\t# will store in $len\n\nAny mixture is possible. For example, the most frequently used options\ncould be stored in variables while all other options get stored in the\nhash:\n\n    my $verbose = 0;\t\t\t# frequently referred\n    my $debug = 0;\t\t\t# frequently referred\n    my %h = ('verbose' => \\$verbose, 'debug' => \\$debug);\n    GetOptions (\\%h, 'verbose', 'debug', 'filter', 'size=i');\n    if ( $verbose ) { ... }\n    if ( exists $h{filter} ) { ... option 'filter' was specified ... }\n\n=head2 Bundling\n\nWith bundling it is possible to set several single-character options\nat once. For example if C<a>, C<v> and C<x> are all valid options,\n\n    -vax\n\nwould set all three.\n\nGetopt::Long supports two levels of bundling. To enable bundling, a\ncall to Getopt::Long::Configure is required.\n\nThe first level of bundling can be enabled with:\n\n    Getopt::Long::Configure (\"bundling\");\n\nConfigured this way, single-character options can be bundled but long\noptions B<must> always start with a double dash C<--> to avoid\nambiguity. For example, when C<vax>, C<a>, C<v> and C<x> are all valid\noptions,\n\n    -vax\n\nwould set C<a>, C<v> and C<x>, but\n\n    --vax\n\nwould set C<vax>.\n\nThe second level of bundling lifts this restriction. It can be enabled\nwith:\n\n    Getopt::Long::Configure (\"bundling_override\");\n\nNow, C<-vax> would set the option C<vax>.\n\nWhen any level of bundling is enabled, option values may be inserted\nin the bundle. For example:\n\n    -h24w80\n\nis equivalent to\n\n    -h 24 -w 80\n\nWhen configured for bundling, single-character options are matched\ncase sensitive while long options are matched case insensitive. To\nhave the single-character options matched case insensitive as well,\nuse:\n\n    Getopt::Long::Configure (\"bundling\", \"ignorecase_always\");\n\nIt goes without saying that bundling can be quite confusing.\n\n=head2 The lonesome dash\n\nNormally, a"..., 4096) = 4096
22042 read(4, " environment variable POSIXLY_CORRECT had\nbeen set.\n\n=item auto_abbrev\n\nAllow option names to be abbreviated to uniqueness.\nDefault is enabled unless environment variable\nPOSIXLY_CORRECT has been set, in which case C<auto_abbrev> is disabled.\n\n=item getopt_compat\n\nAllow C<+> to start options.\nDefault is enabled unless environment variable\nPOSIXLY_CORRECT has been set, in which case C<getopt_compat> is disabled.\n\n=item gnu_compat\n\nC<gnu_compat> controls whether C<--opt=> is allowed, and what it should\ndo. Without C<gnu_compat>, C<--opt=> gives an error. With C<gnu_compat>,\nC<--opt=> will give option C<opt> and empty value.\nThis is the way GNU getopt_long() does it.\n\n=item gnu_getopt\n\nThis is a short way of setting C<gnu_compat> C<bundling> C<permute>\nC<no_getopt_compat>. With C<gnu_getopt>, command line handling should be\nfully compatible with GNU getopt_long().\n\n=item require_order\n\nWhether command line arguments are allowed to be mixed with options.\nDefault is disabled unless environment variable\nPOSIXLY_CORRECT has been set, in which case C<require_order> is enabled.\n\nSee also C<permute>, which is the opposite of C<require_order>.\n\n=item permute\n\nWhether command line arguments are allowed to be mixed with options.\nDefault is enabled unless environment variable\nPOSIXLY_CORRECT has been set, in which case C<permute> is disabled.\nNote that C<permute> is the opposite of C<require_order>.\n\nIf C<permute> is enabled, this means that\n\n    --foo arg1 --bar arg2 arg3\n\nis equivalent to\n\n    --foo --bar arg1 arg2 arg3\n\nIf an argument callback routine is specified, C<@ARGV> will always be\nempty upon successful return of GetOptions() since all options have been\nprocessed. The only exception is when C<--> is used:\n\n    --foo arg1 --bar arg2 -- arg3\n\nThis will call the callback routine for arg1 and arg2, and then\nterminate GetOptions() leaving C<\"arg3\"> in C<@ARGV>.\n\nIf C<require_order> is enabled, options processing\nterminates when the first non-option is encountered.\n\n    --foo arg1 --bar arg2 arg3\n\nis equivalent to\n\n    --f"..., 4096) = 4096
22042 read(4, "tion itself.\n\nGetopt::Long will provide a standard version message that includes the\nprogram name, its version (if $main::VERSION is defined), and the\nversions of Getopt::Long and Perl. The message will be written to\nstandard output and processing will terminate.\n\nC<auto_version> will be enabled if the calling program explicitly\nspecified a version number higher than 2.32 in the C<use> or\nC<require> statement.\n\n=item auto_help (default:disabled)\n\nAutomatically provide support for the B<--help> and B<-?> options if\nthe application did not specify a handler for this option itself.\n\nGetopt::Long will provide a help message using module L<Pod::Usage>. The\nmessage, derived from the SYNOPSIS POD section, will be written to\nstandard output and processing will terminate.\n\nC<auto_help> will be enabled if the calling program explicitly\nspecified a version number higher than 2.32 in the C<use> or\nC<require> statement.\n\n=item pass_through (default: disabled)\n\nOptions that are unknown, ambiguous or supplied with an invalid option\nvalue are passed through in C<@ARGV> instead of being flagged as\nerrors. This makes it possible to write wrapper scripts that process\nonly part of the user supplied command line arguments, and pass the\nremaining options to some other program.\n\nIf C<require_order> is enabled, options processing will terminate at\nthe first unrecognized option, or non-option, whichever comes first.\nHowever, if C<permute> is enabled instead, results can become confusing.\n\nNote that the options terminator (default C<-->), if present, will\nalso be passed through in C<@ARGV>.\n\n=item prefix\n\nThe string that starts options. If a constant string is not\nsufficient, see C<prefix_pattern>.\n\n=item prefix_pattern\n\nA Perl pattern that identifies the strings that introduce options.\nDefault is C<--|-|\\+> unless environment variable\nPOSIXLY_CORRECT has been set, in which case it is C<--|->.\n\n=item long_prefix_pattern\n\nA Perl pattern that allows the disambiguation of long and short\nprefixes. Default is C<-->.\n\nTypically you only need to"..., 4096) = 4096
22042 read(4, "ack\n\n=head1 Return values and Errors\n\nConfiguration errors and errors in the option definitions are\nsignalled using die() and will terminate the calling program unless\nthe call to Getopt::Long::GetOptions() was embedded in C<eval { ...\n}>, or die() was trapped using C<$SIG{__DIE__}>.\n\nGetOptions returns true to indicate success.\nIt returns false when the function detected one or more errors during\noption parsing. These errors are signalled using warn() and can be\ntrapped with C<$SIG{__WARN__}>.\n\n=head1 Legacy\n\nThe earliest development of C<newgetopt.pl> started in 1990, with Perl\nversion 4. As a result, its development, and the development of\nGetopt::Long, has gone through several stages. Since backward\ncompatibility has always been extremely important, the current version\nof Getopt::Long still supports a lot of constructs that nowadays are\nno longer necessary or otherwise unwanted. This section describes\nbriefly some of these 'features'.\n\n=head2 Default destinations\n\nWhen no destination is specified for an option, GetOptions will store\nthe resultant value in a global variable named C<opt_>I<XXX>, where\nI<XXX> is the primary name of this option. When a progam executes\nunder C<use strict> (recommended), these variables must be\npre-declared with our() or C<use vars>.\n\n    our $opt_length = 0;\n    GetOptions ('length=i');\t# will store in $opt_length\n\nTo yield a usable Perl variable, characters that are not part of the\nsyntax for variables are translated to underscores. For example,\nC<--fpp-struct-return> will set the variable\nC<$opt_fpp_struct_return>. Note that this variable resides in the\nnamespace of the calling program, not necessarily C<main>. For\nexample:\n\n    GetOptions (\"size=i\", \"sizes=i@\");\n\nwith command line \"-size 10 -sizes 24 -sizes 48\" will perform the\nequivalent of the assignments\n\n    $opt_size = 10;\n    @opt_sizes = (24, 48);\n\n=head2 Alternative option starters\n\nA string of alternative option starter characters may be passed as the\nfirst argument (or the first argument after a leading hash reference"..., 4096) = 4096
22042 read(4, "ds\n\nIn case of doubt, insert the following statement in front of your Perl\nprogram:\n\n    print STDERR (join(\"|\",@ARGV),\"\\n\");\n\nto verify how your CLI passes the arguments to the program.\n\n=head2 Undefined subroutine &main::GetOptions called\n\nAre you running Windows, and did you write\n\n    use GetOpt::Long;\n\n(note the capital 'O')?\n\n=head2 How do I put a \"-?\" option into a Getopt::Long?\n\nYou can only obtain this using an alias, and Getopt::Long of at least\nversion 2.13.\n\n    use Getopt::Long;\n    GetOptions (\"help|?\");    # -help and -? will both set $opt_help\n\n=head1 AUTHOR\n\nJohan Vromans <jvromans@squirrel.nl>\n\n=head1 COPYRIGHT AND DISCLAIMER\n\nThis program is Copyright 1990,2009 by Johan Vromans.\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the Perl Artistic License or the\nGNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any\nlater version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nIf you do not have a copy of the GNU General Public License write to\nthe Free Software Foundation, Inc., 675 Mass Ave, Cambridge,\nMA 02139, USA.\n\n=cut\n\n", 4096) = 1364
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Usage.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Usage.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Usage.pm", {st_mode=S_IFREG|0444, st_size=23690, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Usage.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "#############################################################################\n# Pod/Usage.pm -- print usage messages for the running script.\n#\n# Copyright (C) 1996-2000 by Bradford Appleton. All rights reserved.\n# This file is part of \"PodParser\". PodParser is free software;\n# you can redistribute it and/or modify it under the same terms\n# as Perl itself.\n#############################################################################\n\npackage Pod::Usage;\nuse strict;\n\nuse vars qw($VERSION @ISA @EXPORT);\n$VERSION = '1.36';  ## Current version of this package\nrequire  5.005;    ## requires this Perl version or later\n\n=head1 NAME\n\nPod::Usage, pod2usage() - print a usage message from embedded pod documentation\n\n=head1 SYNOPSIS\n\n  use Pod::Usage\n\n  my $message_text  = \"This text precedes the usage message.\";\n  my $exit_status   = 2;          ## The exit status to use\n  my $verbose_level = 0;          ## The verbose level to use\n  my $filehandle    = \\*STDERR;   ## The filehandle to write to\n\n  pod2usage($message_text);\n\n  pod2usage($exit_status);\n\n  pod2usage( { -message => $message_text ,\n               -exitval => $exit_status  ,  \n               -verbose => $verbose_level,  \n               -output  => $filehandle } );\n\n  pod2usage(   -msg     => $message_text ,\n               -exitval => $exit_status  ,  \n               -verbose => $verbose_level,  \n               -output  => $filehandle   );\n\n  pod2usage(   -verbose => 2,\n               -noperldoc => 1  )\n\n=head1 ARGUMENTS\n\nB<pod2usage> should be given either a single argument, or a list of\narguments corresponding to an associative array (a \"hash\"). When a single\nargument is given, it should correspond to exactly one of the following:\n\n=over 4\n\n=item *\n\nA string containing the text of a message to print I<before> printing\nthe usage message\n\n=item *\n\nA numeric value corresponding to the desired exit status\n\n=item *\n\nA reference to a hash\n\n=back\n\nIf more than one argument is given then the entire argument list is\nassumed to be a hash.  If a hash is supplied (either as "..., 4096) = 4096
22042 read(4, "ectory paths. If the input file does not exist, then it\nwill be searched for in the given directory list (in the order the\ndirectories appear in the list). It defaults to the list of directories\nimplied by C<$ENV{PATH}>. The list may be specified either by a reference\nto an array, or by a string of directory paths which use the same path\nseparator as C<$ENV{PATH}> on your system (e.g., C<:> for Unix, C<;> for\nMSWin32 and DOS).\n\n=item C<-noperldoc>\n\nBy default, Pod::Usage will call L<perldoc> when -verbose >= 2 is\nspecified. This does not work well e.g. if the script was packed\nwith L<PAR>. The -noperldoc option suppresses the external call to\nL<perldoc> and uses the simple text formatter (L<Pod::Text>) to \noutput the POD.\n\n=back\n\n=head1 DESCRIPTION\n\nB<pod2usage> will print a usage message for the invoking script (using\nits embedded pod documentation) and then exit the script with the\ndesired exit status. The usage message printed may have any one of three\nlevels of \"verboseness\": If the verbose level is 0, then only a synopsis\nis printed. If the verbose level is 1, then the synopsis is printed\nalong with a description (if present) of the command line options and\narguments. If the verbose level is 2, then the entire manual page is\nprinted.\n\nUnless they are explicitly specified, the default values for the exit\nstatus, verbose level, and output stream to use are determined as\nfollows:\n\n=over 4\n\n=item *\n\nIf neither the exit status nor the verbose level is specified, then the\ndefault is to use an exit status of 2 with a verbose level of 0.\n\n=item *\n\nIf an exit status I<is> specified but the verbose level is I<not>, then the\nverbose level will default to 1 if the exit status is less than 2 and\nwill default to 0 otherwise.\n\n=item *\n\nIf an exit status is I<not> specified but verbose level I<is> given, then\nthe exit status will default to 2 if the verbose level is 0 and will\ndefault to 1 otherwise.\n\n=item *\n\nIf the exit status used is less than 2, then output is printed on\nC<STDOUT>.  Otherwise output is printed on C<STDE"..., 4096) = 4096
22042 read(4, "eadable nor consistent and may instead choose to do\nsomething more like the following:\n\n    use Pod::Usage;\n    use Getopt::Long;\n\n    ## Parse options\n    GetOptions(\"help\", \"man\", \"flag1\")  ||  pod2usage(-verbose => 0);\n    pod2usage(-verbose => 1)  if ($opt_help);\n    pod2usage(-verbose => 2)  if ($opt_man);\n\n    ## Check for too many filenames\n    pod2usage(-verbose => 2, -message => \"$0: Too many files given.\\n\")\n        if (@ARGV > 1);\n\nAs with all things in Perl, I<there's more than one way to do it>, and\nB<pod2usage()> adheres to this philosophy.  If you are interested in\nseeing a number of different ways to invoke B<pod2usage> (although by no\nmeans exhaustive), please refer to L<\"EXAMPLES\">.\n\n=head1 EXAMPLES\n\nEach of the following invocations of C<pod2usage()> will print just the\n\"SYNOPSIS\" section to C<STDERR> and will exit with a status of 2:\n\n    pod2usage();\n\n    pod2usage(2);\n\n    pod2usage(-verbose => 0);\n\n    pod2usage(-exitval => 2);\n\n    pod2usage({-exitval => 2, -output => \\*STDERR});\n\n    pod2usage({-verbose => 0, -output  => \\*STDERR});\n\n    pod2usage(-exitval => 2, -verbose => 0);\n\n    pod2usage(-exitval => 2, -verbose => 0, -output => \\*STDERR);\n\nEach of the following invocations of C<pod2usage()> will print a message\nof \"Syntax error.\" (followed by a newline) to C<STDERR>, immediately\nfollowed by just the \"SYNOPSIS\" section (also printed to C<STDERR>) and\nwill exit with a status of 2:\n\n    pod2usage(\"Syntax error.\");\n\n    pod2usage(-message => \"Syntax error.\", -verbose => 0);\n\n    pod2usage(-msg  => \"Syntax error.\", -exitval => 2);\n\n    pod2usage({-msg => \"Syntax error.\", -exitval => 2, -output => \\*STDERR});\n\n    pod2usage({-msg => \"Syntax error.\", -verbose => 0, -output => \\*STDERR});\n\n    pod2usage(-msg  => \"Syntax error.\", -exitval => 2, -verbose => 0);\n\n    pod2usage(-message => \"Syntax error.\",\n              -exitval => 2,\n              -verbose => 0,\n              -output  => \\*STDERR);\n\nEach of the following invocations of C<pod2usage()> will print the\n\"SYNOPSIS\" section and any \"O"..., 4096) = 4096
22042 read(4, "   =item B<-help>\n\n    Print a brief help message and exits.\n\n    =item B<-man>\n\n    Prints the manual page and exits.\n\n    =back\n\n    =head1 DESCRIPTION\n\n    B<This program> will read the given input file(s) and do something\n    useful with the contents thereof.\n\n    =cut\n\n=head1 CAVEATS\n\nBy default, B<pod2usage()> will use C<$0> as the path to the pod input\nfile.  Unfortunately, not all systems on which Perl runs will set C<$0>\nproperly (although if C<$0> isn't found, B<pod2usage()> will search\nC<$ENV{PATH}> or else the list specified by the C<-pathlist> option).\nIf this is the case for your system, you may need to explicitly specify\nthe path to the pod docs for the invoking script using something\nsimilar to the following:\n\n    pod2usage(-exitval => 2, -input => \"/path/to/your/pod/docs\");\n\nIn the pathological case that a script is called via a relative path\nI<and> the script itself changes the current working directory\n(see L<perlfunc/chdir>) I<before> calling pod2usage, Pod::Usage will\nfail even on robust platforms. Don't do that.\n\n=head1 AUTHOR\n\nPlease report bugs using L<http://rt.cpan.org>.\n\nMarek Rouchal E<lt>marekr@cpan.orgE<gt>\n\nBrad Appleton E<lt>bradapp@enteract.comE<gt>\n\nBased on code for B<Pod::Text::pod2text()> written by\nTom Christiansen E<lt>tchrist@mox.perl.comE<gt>\n\n=head1 ACKNOWLEDGMENTS\n\nSteven McDougall E<lt>swmcd@world.std.comE<gt> for his help and patience\nwith re-writing this manpage.\n\n=head1 SEE ALSO\n\nL<Pod::Parser>, L<Getopt::Long>, L<Pod::Find>\n\n=cut\n\n#############################################################################\n\n#use diagnostics;\nuse Carp;\nuse Config;\nuse Exporter;\nuse File::Spec;\n\n@EXPORT = qw(&pod2usage);\nBEGIN {\n    if ( $] >= 5.005_58 ) {\n       require Pod::Text;\n       @ISA = qw( Pod::Text );\n    }\n    else {\n       require Pod::PlainText;\n       @ISA = qw( Pod::PlainText );\n    }\n}\n\nrequire Pod::Select;\n\n##---------------------------------------------------------------------------\n\n##---------------------------------\n## Function definitions begin here\n##---------"..., 4096) = 4096
22042 stat64("/etc/perl/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Text.pm", 0xbff096c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Text.pmc", 0xbff09750) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Text.pm", {st_mode=S_IFREG|0444, st_size=31901, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Text.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09498) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "# Pod::Text -- Convert POD data to formatted ASCII text.\n#\n# Copyright 1999, 2000, 2001, 2002, 2004, 2006, 2008, 2009\n#     Russ Allbery <rra@stanford.edu>\n#\n# This program is free software; you may redistribute it and/or modify it\n# under the same terms as Perl itself.\n#\n# This module converts POD to formatted text.  It replaces the old Pod::Text\n# module that came with versions of Perl prior to 5.6.0 and attempts to match\n# its output except for some specific circumstances where other decisions\n# seemed to produce better output.  It uses Pod::Parser and is designed to be\n# very easy to subclass.\n#\n# Perl core hackers, please note that this module is also separately\n# maintained outside of the Perl core as part of the podlators.  Please send\n# me any patches at the address above in addition to sending them to the\n# standard Perl mailing lists.\n\n##############################################################################\n# Modules and declarations\n##############################################################################\n\npackage Pod::Text;\n\nrequire 5.004;\n\nuse strict;\nuse vars qw(@ISA @EXPORT %ESCAPES $VERSION);\n\nuse Carp qw(carp croak);\nuse Exporter ();\nuse Pod::Simple ();\n\n@ISA = qw(Pod::Simple Exporter);\n\n# We have to export pod2text for backward compatibility.\n@EXPORT = qw(pod2text);\n\n$VERSION = '3.14';\n\n##############################################################################\n# Initialization\n##############################################################################\n\n# This function handles code blocks.  It's registered as a callback to\n# Pod::Simple and therefore doesn't work as a regular method call, but all it\n# does is call output_code with the line.\nsub handle_code {\n    my ($line, $number, $parser) = @_;\n    $parser->output_code ($line . \"\\n\");\n}\n\n# Initialize the object and set various Pod::Simple options that we need.\n# Here, we also process any additional options passed to the constructor or\n# set up defaults if none were given.  Note that all internal object keys are\n# in all-caps, "..., 4096) = 4096
22042 stat64("/etc/perl/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Simple.pm", 0xbff091c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Simple.pmc", 0xbff09250) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Simple.pm", {st_mode=S_IFREG|0444, st_size=50082, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Simple.pm", O_RDONLY|O_LARGEFILE) = 6
22042 ioctl(6, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f98) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(6, 0, [0], SEEK_CUR)      = 0
22042 read(6, "\nrequire 5;\npackage Pod::Simple;\nuse strict;\nuse Carp ();\nBEGIN           { *DEBUG = sub () {0} unless defined &DEBUG }\nuse integer;\nuse Pod::Escapes 1.04 ();\nuse Pod::Simple::LinkSection ();\nuse Pod::Simple::BlackBox ();\n#use utf8;\n\nuse vars qw(\n  $VERSION @ISA\n  @Known_formatting_codes  @Known_directives\n  %Known_formatting_codes  %Known_directives\n  $NL\n);\n\n@ISA = ('Pod::Simple::BlackBox');\n$VERSION = '3.14';\n\n@Known_formatting_codes = qw(I B C L E F S X Z); \n%Known_formatting_codes = map(($_=>1), @Known_formatting_codes);\n@Known_directives       = qw(head1 head2 head3 head4 item over back); \n%Known_directives       = map(($_=>'Plain'), @Known_directives);\n$NL = $/ unless defined $NL;\n\n#-----------------------------------------------------------------------------\n# Set up some constants:\n\nBEGIN {\n  if(defined &ASCII)    { }\n  elsif(chr(65) eq 'A') { *ASCII = sub () {1}  }\n  else                  { *ASCII = sub () {''} }\n\n  unless(defined &MANY_LINES) { *MANY_LINES = sub () {20} }\n  DEBUG > 4 and print \"MANY_LINES is \", MANY_LINES(), \"\\n\";\n  unless(MANY_LINES() >= 1) {\n    die \"MANY_LINES is too small (\", MANY_LINES(), \")!\\nAborting\";\n  }\n  if(defined &UNICODE) { }\n  elsif($] >= 5.008)   { *UNICODE = sub() {1}  }\n  else                 { *UNICODE = sub() {''} }\n}\nif(DEBUG > 2) {\n  print \"# We are \", ASCII ? '' : 'not ', \"in ASCII-land\\n\";\n  print \"# We are under a Unicode-safe Perl.\\n\";\n}\n\n# Design note:\n# This is a parser for Pod.  It is not a parser for the set of Pod-like\n#  languages which happens to contain Pod -- it is just for Pod, plus possibly\n#  some extensions.\n\n# @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @\n#@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n__PACKAGE__->_accessorize(\n  'nbsp_for_S',        # Whether to map S<...>'s to \\xA0 characters\n  'source_filename',   # Filename of the source, for use in warnings\n  'source_dead',       # Whether to consider "..., 4096) = 4096
22042 stat64("/etc/perl/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/integer.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/integer.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/integer.pm", {st_mode=S_IFREG|0444, st_size=3266, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/integer.pm", O_RDONLY|O_LARGEFILE) = 7
22042 ioctl(7, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08a98) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(7, 0, [0], SEEK_CUR)      = 0
22042 read(7, "package integer;\n\nour $VERSION = '1.00';\n\n=head1 NAME\n\ninteger - Perl pragma to use integer arithmetic instead of floating point\n\n=head1 SYNOPSIS\n\n    use integer;\n    $x = 10/3;\n    # $x is now 3, not 3.33333333333333333\n\n=head1 DESCRIPTION\n\nThis tells the compiler to use integer operations from here to the end\nof the enclosing BLOCK.  On many machines, this doesn't matter a great\ndeal for most computations, but on those without floating point\nhardware, it can make a big difference in performance.\n\nNote that this only affects how most of the arithmetic and relational\nB<operators> handle their operands and results, and B<not> how all\nnumbers everywhere are treated.  Specifically, C<use integer;> has the\neffect that before computing the results of the arithmetic operators\n(+, -, *, /, %, +=, -=, *=, /=, %=, and unary minus), the comparison\noperators (<, <=, >, >=, ==, !=, <=>), and the bitwise operators (|, &,\n^, <<, >>, |=, &=, ^=, <<=, >>=), the operands have their fractional\nportions truncated (or floored), and the result will have its\nfractional portion truncated as well.  In addition, the range of\noperands and results is restricted to that of familiar two's complement\nintegers, i.e., -(2**31) .. (2**31-1) on 32-bit architectures, and\n-(2**63) .. (2**63-1) on 64-bit architectures.  For example, this code\n\n    use integer;\n    $x = 5.8;\n    $y = 2.5;\n    $z = 2.7;\n    $a = 2**31 - 1;  # Largest positive integer on 32-bit machines\n    $, = \", \";\n    print $x, -$x, $x + $y, $x - $y, $x / $y, $x * $y, $y == $z, $a, $a + 1;\n\nwill print:  5.8, -5, 7, 3, 2, 10, 1, 2147483647, -2147483648\n\nNote that $x is still printed as having its true non-integer value of\n5.8 since it wasn't operated on.  And note too the wrap-around from the\nlargest positive integer to the largest negative one.   Also, arguments\npassed to functions and the values returned by them are B<not> affected\nby C<use integer;>.  E.g.,\n\n    srand(1.5);\n    $, = \", \";\n    print sin(.5), cos(.5), atan2(1,2), sqrt(2), rand(10);\n\nwill give the same result with "..., 4096) = 3266
22042 read(7, "", 4096)                 = 0
22042 close(7)                          = 0
22042 stat64("/etc/perl/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Escapes.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Escapes.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Escapes.pm", {st_mode=S_IFREG|0444, st_size=17230, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Escapes.pm", O_RDONLY|O_LARGEFILE) = 7
22042 ioctl(7, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08a98) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(7, 0, [0], SEEK_CUR)      = 0
22042 read(7, "\nrequire 5;\n#                        The documentation is at the end.\n# Time-stamp: \"2004-05-07 15:31:25 ADT\"\npackage Pod::Escapes;\nrequire Exporter;\n@ISA = ('Exporter');\n$VERSION = '1.04';\n@EXPORT_OK = qw(\n  %Code2USASCII\n  %Name2character\n  %Name2character_number\n  %Latin1Code_to_fallback\n  %Latin1Char_to_fallback\n  e2char\n  e2charnum\n);\n%EXPORT_TAGS = ('ALL' => \\@EXPORT_OK);\n\n#==========================================================================\n\nuse strict;\nuse vars qw(\n  %Code2USASCII\n  %Name2character\n  %Name2character_number\n  %Latin1Code_to_fallback\n  %Latin1Char_to_fallback\n  $FAR_CHAR\n  $FAR_CHAR_NUMBER\n  $NOT_ASCII\n);\n\n$FAR_CHAR = \"?\" unless defined $FAR_CHAR;\n$FAR_CHAR_NUMBER = ord($FAR_CHAR) unless defined $FAR_CHAR_NUMBER;\n\n$NOT_ASCII = 'A' ne chr(65) unless defined $NOT_ASCII;\n\n#--------------------------------------------------------------------------\nsub e2char {\n  my $in = $_[0];\n  return undef unless defined $in and length $in;\n  \n  # Convert to decimal:\n  if($in =~ m/^(0[0-7]*)$/s ) {\n    $in = oct $in;\n  } elsif($in =~ m/^0?x([0-9a-fA-F]+)$/s ) {\n    $in = hex $1;\n  } # else it's decimal, or named\n\n  if($NOT_ASCII) {\n    # We're in bizarro world of not-ASCII!\n    # Cope with US-ASCII codes, use fallbacks for Latin-1, or use FAR_CHAR.\n    unless($in =~ m/^\\d+$/s) {\n      # It's a named character reference.  Get its numeric Unicode value.\n      $in = $Name2character{$in};\n      return undef unless defined $in;  # (if there's no such name)\n      $in = ord $in; # (All ents must be one character long.)\n        # ...So $in holds the char's US-ASCII numeric value, which we'll\n        #  now go get the local equivalent for.\n    }\n\n    # It's numeric, whether by origin or by mutation from a known name\n    return $Code2USASCII{$in} # so \"65\" => \"A\" everywhere\n        || $Latin1Code_to_fallback{$in} # Fallback.\n        || $FAR_CHAR; # Fall further back\n  }\n  \n  # Normal handling:\n  if($in =~ m/^\\d+$/s) {\n    if($] < 5.007  and  $in > 255) { # can't be trusted with Unicode\n      return $FAR_CHAR;\n  "..., 4096) = 4096
22042 read(7, "Icirc'    , 206,\n 'Iuml'     , 207,\n 'ETH'      , 208,\n 'Ntilde'   , 209,\n 'Ograve'   , 210,\n 'Oacute'   , 211,\n 'Ocirc'    , 212,\n 'Otilde'   , 213,\n 'Ouml'     , 214,\n 'times'    , 215,\n 'Oslash'   , 216,\n 'Ugrave'   , 217,\n 'Uacute'   , 218,\n 'Ucirc'    , 219,\n 'Uuml'     , 220,\n 'Yacute'   , 221,\n 'THORN'    , 222,\n 'szlig'    , 223,\n 'agrave'   , 224,\n 'aacute'   , 225,\n 'acirc'    , 226,\n 'atilde'   , 227,\n 'auml'     , 228,\n 'aring'    , 229,\n 'aelig'    , 230,\n 'ccedil'   , 231,\n 'egrave'   , 232,\n 'eacute'   , 233,\n 'ecirc'    , 234,\n 'euml'     , 235,\n 'igrave'   , 236,\n 'iacute'   , 237,\n 'icirc'    , 238,\n 'iuml'     , 239,\n 'eth'      , 240,\n 'ntilde'   , 241,\n 'ograve'   , 242,\n 'oacute'   , 243,\n 'ocirc'    , 244,\n 'otilde'   , 245,\n 'ouml'     , 246,\n 'divide'   , 247,\n 'oslash'   , 248,\n 'ugrave'   , 249,\n 'uacute'   , 250,\n 'ucirc'    , 251,\n 'uuml'     , 252,\n 'yacute'   , 253,\n 'thorn'    , 254,\n 'yuml'     , 255,\n\n 'fnof'     , 402,\n 'Alpha'    , 913,\n 'Beta'     , 914,\n 'Gamma'    , 915,\n 'Delta'    , 916,\n 'Epsilon'  , 917,\n 'Zeta'     , 918,\n 'Eta'      , 919,\n 'Theta'    , 920,\n 'Iota'     , 921,\n 'Kappa'    , 922,\n 'Lambda'   , 923,\n 'Mu'       , 924,\n 'Nu'       , 925,\n 'Xi'       , 926,\n 'Omicron'  , 927,\n 'Pi'       , 928,\n 'Rho'      , 929,\n 'Sigma'    , 931,\n 'Tau'      , 932,\n 'Upsilon'  , 933,\n 'Phi'      , 934,\n 'Chi'      , 935,\n 'Psi'      , 936,\n 'Omega'    , 937,\n 'alpha'    , 945,\n 'beta'     , 946,\n 'gamma'    , 947,\n 'delta'    , 948,\n 'epsilon'  , 949,\n 'zeta'     , 950,\n 'eta'      , 951,\n 'theta'    , 952,\n 'iota'     , 953,\n 'kappa'    , 954,\n 'lambda'   , 955,\n 'mu'       , 956,\n 'nu'       , 957,\n 'xi'       , 958,\n 'omicron'  , 959,\n 'pi'       , 960,\n 'rho'      , 961,\n 'sigmaf'   , 962,\n 'sigma'    , 963,\n 'tau'      , 964,\n 'upsilon'  , 965,\n 'phi'      , 966,\n 'chi'      , 967,\n 'psi'      , 968,\n 'omega'    , 969,\n 'thetasym' , 977,\n 'upsih'    , 978,\n 'piv'      , 982,\n 'bull'     , 8226,\n 'hellip'   , 8230,\n 'prime'    , 8242,\n 'Prime'    , 8243,\n 'oline'    "..., 4096) = 4096
22042 read(7, "number > 255) {\n      $Name2character{$name} = $FAR_CHAR;\n      # substitute for Unicode characters, for perls\n      #  that can't reliable handle them\n    } else {\n      $Name2character{$name} = chr $number;\n      # normal case\n    }\n  }\n  # So they resolve 'right' even in EBCDIC-land\n  $Name2character{'lt'  }   = '<';\n  $Name2character{'gt'  }   = '>';\n  $Name2character{'quot'}   = '\"';\n  $Name2character{'amp' }   = '&';\n  $Name2character{'apos'}   = \"'\";\n  $Name2character{'sol' }   = '/';\n  $Name2character{'verbar'} = '|';\n}\n\n#--------------------------------------------------------------------------\n\n%Code2USASCII = (\n# mostly generated by\n#  perl -e \"printf qq{  \\x25 3s, '\\x25s',\\n}, $_, chr($_) foreach (32 .. 126)\"\n   32, ' ',\n   33, '!',\n   34, '\"',\n   35, '#',\n   36, '$',\n   37, '%',\n   38, '&',\n   39, \"'\", #!\n   40, '(',\n   41, ')',\n   42, '*',\n   43, '+',\n   44, ',',\n   45, '-',\n   46, '.',\n   47, '/',\n   48, '0',\n   49, '1',\n   50, '2',\n   51, '3',\n   52, '4',\n   53, '5',\n   54, '6',\n   55, '7',\n   56, '8',\n   57, '9',\n   58, ':',\n   59, ';',\n   60, '<',\n   61, '=',\n   62, '>',\n   63, '?',\n   64, '@',\n   65, 'A',\n   66, 'B',\n   67, 'C',\n   68, 'D',\n   69, 'E',\n   70, 'F',\n   71, 'G',\n   72, 'H',\n   73, 'I',\n   74, 'J',\n   75, 'K',\n   76, 'L',\n   77, 'M',\n   78, 'N',\n   79, 'O',\n   80, 'P',\n   81, 'Q',\n   82, 'R',\n   83, 'S',\n   84, 'T',\n   85, 'U',\n   86, 'V',\n   87, 'W',\n   88, 'X',\n   89, 'Y',\n   90, 'Z',\n   91, '[',\n   92, \"\\\\\", #!\n   93, ']',\n   94, '^',\n   95, '_',\n   96, '`',\n   97, 'a',\n   98, 'b',\n   99, 'c',\n  100, 'd',\n  101, 'e',\n  102, 'f',\n  103, 'g',\n  104, 'h',\n  105, 'i',\n  106, 'j',\n  107, 'k',\n  108, 'l',\n  109, 'm',\n  110, 'n',\n  111, 'o',\n  112, 'p',\n  113, 'q',\n  114, 'r',\n  115, 's',\n  116, 't',\n  117, 'u',\n  118, 'v',\n  119, 'w',\n  120, 'x',\n  121, 'y',\n  122, 'z',\n  123, '{',\n  124, '|',\n  125, '}',\n  126, '~',\n);\n\n#--------------------------------------------------------------------------\n\n%Latin1Code_to_fallback = ();\n@Latin1Code_to_fallback{0xA0 .. 0xFF} = (\n# Copied from Tex"..., 4096) = 4096
22042 _llseek(7, 11124, [11124], SEEK_SET) = 0
22042 _llseek(7, 0, [11124], SEEK_CUR)  = 0
22042 close(7)                          = 0
22042 brk(0x82ff000)                    = 0x82ff000
22042 stat64("/etc/perl/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Simple/LinkSection.pm", 0xbff08cc0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Simple/LinkSection.pmc", 0xbff08d50) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Simple/LinkSection.pm", {st_mode=S_IFREG|0444, st_size=4341, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Simple/LinkSection.pm", O_RDONLY|O_LARGEFILE) = 7
22042 ioctl(7, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08a98) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(7, 0, [0], SEEK_CUR)      = 0
22042 read(7, "\nrequire 5;\npackage Pod::Simple::LinkSection;\n  # Based somewhat dimly on Array::Autojoin\nuse vars qw($VERSION );\n$VERSION = '3.14';\n\nuse strict;\nuse Pod::Simple::BlackBox;\nuse vars qw($VERSION );\n$VERSION = '3.14';\n\nuse overload( # So it'll stringify nice\n  '\"\"'   => \\&Pod::Simple::BlackBox::stringify_lol,\n  'bool' => \\&Pod::Simple::BlackBox::stringify_lol,\n  # '.='   => \\&tack_on,  # grudgingly support\n  \n  'fallback' => 1,         # turn on cleverness\n);\n\nsub tack_on {\n  $_[0] = ['', {}, \"$_[0]\" ];\n  return $_[0][2] .= $_[1];\n}\n\nsub as_string {\n  goto &Pod::Simple::BlackBox::stringify_lol;\n}\nsub stringify {\n  goto &Pod::Simple::BlackBox::stringify_lol;\n}\n\nsub new {\n  my $class = shift;\n  $class = ref($class) || $class;\n  my $new;\n  if(@_ == 1) {\n    if (!ref($_[0] || '')) { # most common case: one bare string\n      return bless ['', {}, $_[0] ], $class;\n    } elsif( ref($_[0] || '') eq 'ARRAY') {\n      $new = [ @{ $_[0] } ];\n    } else {\n      Carp::croak( \"$class new() doesn't know to clone $new\" );\n    }\n  } else { # misc stuff\n    $new = [ '', {}, @_ ];\n  }\n\n  # By now it's a treelet:  [ 'foo', {}, ... ]\n  foreach my $x (@$new) {\n    if(ref($x || '') eq 'ARRAY') {\n      $x = $class->new($x); # recurse\n    } elsif(ref($x || '') eq 'HASH') {\n      $x = { %$x };\n    }\n     # otherwise leave it.\n  }\n\n  return bless $new, $class;\n}\n\n# Not much in this class is likely to be link-section specific --\n# but it just so happens that link-sections are about the only treelets\n# that are exposed to the user.\n\n1;\n\n__END__\n\n# TODO: let it be an option whether a given subclass even wants little treelets?\n\n\n__END__\n\n=head1 NAME\n\nPod::Simple::LinkSection -- represent \"section\" attributes of L codes\n\n=head1 SYNOPSIS\n\n # a long story\n\n=head1 DESCRIPTION\n\nThis class is not of interest to general users.\n\nPod::Simple uses this class for representing the value of the\n\"section\" attribute of \"L\" start-element events.  Most applications\ncan just use the normal stringification of objects of this class;\nthey stringify to just the text c"..., 4096) = 4096
22042 stat64("/etc/perl/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Simple/BlackBox.pm", 0xbff087c0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Simple/BlackBox.pmc", 0xbff08850) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Simple/BlackBox.pm", {st_mode=S_IFREG|0444, st_size=62999, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Simple/BlackBox.pm", O_RDONLY|O_LARGEFILE) = 8
22042 ioctl(8, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08598) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(8, 0, [0], SEEK_CUR)      = 0
22042 read(8, "\npackage Pod::Simple::BlackBox;\n#\n# \"What's in the box?\"  \"Pain.\"\n#\n###########################################################################\n#\n# This is where all the scary things happen: parsing lines into\n#  paragraphs; and then into directives, verbatims, and then also\n#  turning formatting sequences into treelets.\n#\n# Are you really sure you want to read this code?\n#\n#-----------------------------------------------------------------------------\n#\n# The basic work of this module Pod::Simple::BlackBox is doing the dirty work\n# of parsing Pod into treelets (generally one per non-verbatim paragraph), and\n# to call the proper callbacks on the treelets.\n#\n# Every node in a treelet is a ['name', {attrhash}, ...children...]\n\nuse integer; # vroom!\nuse strict;\nuse Carp ();\nuse vars qw($VERSION );\n$VERSION = '3.14';\n#use constant DEBUG => 7;\nBEGIN {\n  require Pod::Simple;\n  *DEBUG = \\&Pod::Simple::DEBUG unless defined &DEBUG\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nsub parse_line { shift->parse_lines(@_) } # alias\n\n# - - -  Turn back now!  Run away!  - - -\n\nsub parse_lines {             # Usage: $parser->parse_lines(@lines)\n  # an undef means end-of-stream\n  my $self = shift;\n\n  my $code_handler = $self->{'code_handler'};\n  my $cut_handler  = $self->{'cut_handler'};\n  $self->{'line_count'} ||= 0;\n \n  my $scratch;\n\n  DEBUG > 4 and \n   print \"# Parsing starting at line \", $self->{'line_count'}, \".\\n\";\n\n  DEBUG > 5 and\n   print \"#  About to parse lines: \",\n     join(' ', map defined($_) ? \"[$_]\" : \"EOF\", @_), \"\\n\";\n\n  my $paras = ($self->{'paras'} ||= []);\n   # paragraph buffer.  Because we need to defer processing of =over\n   # directives and verbatim paragraphs.  We call _ponder_paragraph_buffer\n   # to process this.\n  \n  $self->{'pod_para_count'} ||= 0;\n\n  my $line;\n  foreach my $source_line (@_) {\n    if( $self->{'source_dead'} ) {\n      DEBUG > 4 and print \"# Source is dead.\\n\";\n      last;\n    }\n\n    unless( defined $source_line ) {\n      DEBUG > 4 and print \"# Undef-line see"..., 4096) = 4096
22042 read(8, "ere were errata sections in the world, it was\n          ## least-pessimal to abort processing the file.  But now we can\n          ## just barrel on thru (but still not start a pod block).\n          #splice @_;\n          #push @_, undef;\n          \n          next;\n        } else {\n          $self->{'in_pod'} = $self->{'start_of_pod_block'}\n                            = $self->{'last_was_blank'}     = 1;\n          # And fall thru to the pod-mode block further down\n        }\n      } else {\n        DEBUG > 5 and print \"# It's a code-line.\\n\";\n        $code_handler->(map $_, $line, $self->{'line_count'}, $self)\n         if $code_handler;\n        # Note: this may cause code to be processed out of order relative\n        #  to pods, but in order relative to cuts.\n        \n        # Note also that we haven't yet applied the transcoding to $line\n        #  by time we call $code_handler!\n\n        if( $line =~ m/^#\\s*line\\s+(\\d+)\\s*(?:\\s\"([^\"]+)\")?\\s*$/ ) {\n          # That RE is from perlsyn, section \"Plain Old Comments (Not!)\",\n          #$fname = $2 if defined $2;\n          #DEBUG > 1 and defined $2 and print \"# Setting fname to \\\"$fname\\\"\\n\";\n          DEBUG > 1 and print \"# Setting nextline to $1\\n\";\n          $self->{'line_count'} = $1 - 1;\n        }\n        \n        next;\n      }\n    }\n    \n    # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n    # Else we're in pod mode:\n\n    # Apply any necessary transcoding:\n    $self->{'_transcoder'} && $self->{'_transcoder'}->($line);\n\n    # HERE WE CATCH =encoding EARLY!\n    if( $line =~ m/^=encoding\\s+\\S+\\s*$/s ) {\n      $line = $self->_handle_encoding_line( $line );\n    }\n\n    if($line =~ m/^=cut/s) {\n      # here ends the pod block, and therefore the previous pod para\n      DEBUG > 1 and print \"Noting =cut at line ${$self}{'line_count'}\\n\";\n      $self->{'in_pod'} = 0;\n      # ++$self->{'pod_para_count'};\n      $self->_ponder_paragraph_buffer();\n       # by now it's safe to consider the previous paragraph as done.\n      $cut_handler->(map $_, $line, $"..., 4096) = 4096
22042 read(8, "['~Verbatim', {'start_line' => $self->{'line_count'}}, $line];\n        }\n      } else {\n        ++$self->{'pod_para_count'};\n        $self->_ponder_paragraph_buffer();\n         # by now it's safe to consider the previous paragraph as done.\n        push @$paras, ['~Para',  {'start_line' => $self->{'line_count'}}, $line];\n        DEBUG > 1 and print \"Starting plain para at line ${$self}{'line_count'}\\n\";\n      }\n      $self->{'last_was_blank'} = $self->{'start_of_pod_block'} = 0;\n\n    } else {\n      # It's a non-blank line /continuing/ the current para\n      if(@$paras) {\n        DEBUG > 2 and print \"Line ${$self}{'line_count'} continues current paragraph\\n\";\n        push @{$paras->[-1]}, $line;\n      } else {\n        # Unexpected case!\n        die \"Continuing a paragraph but \\@\\$paras is empty?\";\n      }\n      $self->{'last_was_blank'} = $self->{'start_of_pod_block'} = 0;\n    }\n    \n  } # ends the big while loop\n\n  DEBUG > 1 and print(pretty(@$paras), \"\\n\");\n  return $self;\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nsub _handle_encoding_line {\n  my($self, $line) = @_;\n  \n  # The point of this routine is to set $self->{'_transcoder'} as indicated.\n\n  return $line unless $line =~ m/^=encoding\\s+(\\S+)\\s*$/s;\n  DEBUG > 1 and print \"Found an encoding line \\\"=encoding $1\\\"\\n\";\n\n  my $e    = $1;\n  my $orig = $e;\n  push @{ $self->{'encoding_command_reqs'} }, \"=encoding $orig\";\n\n  my $enc_error;\n\n  # Cf.   perldoc Encode   and   perldoc Encode::Supported\n\n  require Pod::Simple::Transcode;\n\n  if( $self->{'encoding'} ) {\n    my $norm_current = $self->{'encoding'};\n    my $norm_e = $e;\n    foreach my $that ($norm_current, $norm_e) {\n      $that =  lc($that);\n      $that =~ s/[-_]//g;\n    }\n    if($norm_current eq $norm_e) {\n      DEBUG > 1 and print \"The '=encoding $orig' line is \",\n       \"redundant.  ($norm_current eq $norm_e).  Ignoring.\\n\";\n      $enc_error = '';\n       # But that doesn't necessarily mean that the earlier one went okay\n    } else {\n      $enc_error = \"Encoding is alrea"..., 4096) = 4096
22042 read(8, "  my $content = join ' ', splice @x, 2;\n  $content =~ s/^\\s+//s;\n  $content =~ s/\\s+$//s;\n\n  DEBUG > 2 and print \"Ogling encoding directive: =encoding $content\\n\";\n  \n  if($content eq 'ALREADYDONE') {\n    # It's already been handled.  Check for errors.\n    if(! $self->{'encoding_command_statuses'} ) {\n      DEBUG > 2 and print \" CRAZY ERROR: It wasn't really handled?!\\n\";\n    } elsif( $self->{'encoding_command_statuses'}[-1] ) {\n      $self->whine( $para->[1]{'start_line'},\n        sprintf \"Couldn't do %s: %s\",\n          $self->{'encoding_command_reqs'  }[-1],\n          $self->{'encoding_command_statuses'}[-1],\n      );\n    } else {\n      DEBUG > 2 and print \" (Yup, it was successfully handled already.)\\n\";\n    }\n    \n  } else {\n    # Otherwise it's a syntax error\n    $self->whine( $para->[1]{'start_line'},\n      \"Invalid =encoding syntax: $content\"\n    );\n  }\n  \n  return;\n}\n\n#~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`\n\n{\nmy $m = -321;   # magic line number\n\nsub _gen_errata {\n  my $self = $_[0];\n  # Return 0 or more fake-o paragraphs explaining the accumulated\n  #  errors on this document.\n\n  return() unless $self->{'errata'} and keys %{$self->{'errata'}};\n\n  my @out;\n  \n  foreach my $line (sort {$a <=> $b} keys %{$self->{'errata'}}) {\n    push @out,\n      ['=item', {'start_line' => $m}, \"Around line $line:\"],\n      map( ['~Para', {'start_line' => $m, '~cooked' => 1},\n        #['~Top', {'start_line' => $m},\n        $_\n        #]\n        ],\n        @{$self->{'errata'}{$line}}\n      )\n    ;\n  }\n  \n  # TODO: report of unknown entities? unrenderable characters?\n\n  unshift @out,\n    ['=head1', {'start_line' => $m, 'errata' => 1}, 'POD ERRORS'],\n    ['~Para', {'start_line' => $m, '~cooked' => 1, 'errata' => 1},\n     \"Hey! \",\n     ['B', {},\n      'The above document had some coding errors, which are explained below:'\n     ]\n    ],\n    ['=over',  {'start_line' => $m, 'errata' => 1}, ''],\n  ;\n\n  push @out, \n    ['=back',  {'start_line' => $m, 'errata' => 1}, ''],\n  ;\n\n  DEBUG and print \"\\n<"..., 4096) = 4096
22042 read(8, "rt(\n      ($scratch = 'Document'),\n      {\n        'start_line' => $paras->[0][1]{'start_line'},\n        $starting_contentless ? ( 'contentless' => 1 ) : (),\n      },\n    );\n  }\n\n  my($para, $para_type);\n  while(@$paras) {\n    last if @$paras == 1 and\n      ( $paras->[0][0] eq '=over' or $paras->[0][0] eq '~Verbatim'\n        or $paras->[0][0] eq '=item' )\n    ;\n    # Those're the three kinds of paragraphs that require lookahead.\n    #   Actually, an \"=item Foo\" inside an <over type=text> region\n    #   and any =item inside an <over type=block> region (rare)\n    #   don't require any lookahead, but all others (bullets\n    #   and numbers) do.\n\n# TODO: winge about many kinds of directives in non-resolving =for regions?\n# TODO: many?  like what?  =head1 etc?\n\n    $para = shift @$paras;\n    $para_type = $para->[0];\n\n    DEBUG > 1 and print \"Pondering a $para_type paragraph, given the stack: (\",\n      $self->_dump_curr_open(), \")\\n\";\n    \n    if($para_type eq '=for') {\n      next if $self->_ponder_for($para,$curr_open,$paras);\n\n    } elsif($para_type eq '=begin') {\n      next if $self->_ponder_begin($para,$curr_open,$paras);\n\n    } elsif($para_type eq '=end') {\n      next if $self->_ponder_end($para,$curr_open,$paras);\n\n    } elsif($para_type eq '~end') { # The virtual end-document signal\n      next if $self->_ponder_doc_end($para,$curr_open,$paras);\n    }\n\n\n    # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n    #~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n    if(grep $_->[1]{'~ignore'}, @$curr_open) {\n      DEBUG > 1 and\n       print \"Skipping $para_type paragraph because in ignore mode.\\n\";\n      next;\n    }\n    #~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n    # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\n    if($para_type eq '=pod') {\n      $self->_ponder_pod($para,$curr_open,$paras);\n\n    } elsif($para_type eq '=over') {\n      next if $self->_ponder_over($para,$curr_open,$paras);\n\n    } elsif($para_t"..., 4096) = 4096
22042 read(8, "xt;\n\n        } elsif($over_type eq 'text') {\n          my $item_type = $self->_get_item_type($para);\n            # That kills the content of the item if it's a number or bullet.\n          DEBUG and print \" Item is of type \", $para->[0], \" under $over_type\\n\";\n          \n          if($item_type eq 'text') {\n            # Nothing special needs doing for 'text'\n          } elsif($item_type eq 'number' or $item_type eq 'bullet') {\n            die \"Unknown item type $item_type\"\n             unless $item_type eq 'number' or $item_type eq 'bullet';\n            # Undo our clobbering:\n            push @$para, $para->[1]{'~orig_content'};\n            delete $para->[1]{'number'};\n             # Only a PROPER item-number element is allowed\n             #  to have a number attribute.\n          } else {\n            die \"Unhandled item type $item_type\"; # should never happen\n          }\n          \n          # =item-text thingies don't need any assimilation, it seems.\n\n        } elsif($over_type eq 'number') {\n          my $item_type = $self->_get_item_type($para);\n            # That kills the content of the item if it's a number or bullet.\n          DEBUG and print \" Item is of type \", $para->[0], \" under $over_type\\n\";\n          \n          my $expected_value = ++ $curr_open->[-1][1]{'~counter'};\n          \n          if($item_type eq 'bullet') {\n            # Hm, it's not numeric.  Correct for this.\n            $para->[1]{'number'} = $expected_value;\n            $self->whine(\n              $para->[1]{'start_line'},\n              \"Expected '=item $expected_value'\"\n            );\n            push @$para, $para->[1]{'~orig_content'};\n              # restore the bullet, blocking the assimilation of next para\n\n          } elsif($item_type eq 'text') {\n            # Hm, it's not numeric.  Correct for this.\n            $para->[1]{'number'} = $expected_value;\n            $self->whine(\n              $para->[1]{'start_line'},\n              \"Expected '=item $expected_value'\"\n            );\n            # Text content will still be there an"..., 4096) = 4096
22042 read(8, "he next paragraph\n            delete $para->[1]{'number'};\n             # Only a PROPER item-number element is allowed\n             #  to have a number attribute.\n          } elsif($item_type eq 'text') {\n            $self->whine(\n              $para->[1]{'start_line'},\n              \"Expected '=item *'\"\n            );\n             # But doesn't need processing.  But it'll block assimilation\n             #  of the next para.\n          } else {\n            die \"Unhandled item type $item_type\"; # should never happen\n          }\n\n          if(@$para == 2) {\n            # For the cases where we /didn't/ push to @$para\n            if($paras->[0][0] eq '~Para') {\n              DEBUG and print \"Assimilating following ~Para content into $over_type item\\n\";\n              push @$para, splice @{shift @$paras},2;\n            } else {\n              DEBUG and print \"Can't assimilate following \", $paras->[0][0], \"\\n\";\n              push @$para, '';  # Just so it's not contentless\n            }\n          }\n\n        } else {\n          die \"Unhandled =over type \\\"$over_type\\\"?\";\n          # Shouldn't happen!\n        }\n\n        $para_type = 'Plain';\n        $para->[0] .= '-' . $over_type;\n        # Whew.  Now fall thru and process it.\n\n\n      } elsif($para_type eq '=extend') {\n        # Well, might as well implement it here.\n        $self->_ponder_extend($para);\n        next;  # and skip\n      } elsif($para_type eq '=encoding') {\n        # Not actually acted on here, but we catch errors here.\n        $self->_handle_encoding_second_level($para);\n\n        next;  # and skip\n      } elsif($para_type eq '~Verbatim') {\n        $para->[0] = 'Verbatim';\n        $para_type = '?Verbatim';\n      } elsif($para_type eq '~Para') {\n        $para->[0] = 'Para';\n        $para_type = '?Plain';\n      } elsif($para_type eq 'Data') {\n        $para->[0] = 'Data';\n        $para_type = '?Data';\n      } elsif( $para_type =~ s/^=//s\n        and defined( $para_type = $self->{'accept_directives'}{$para_type} )\n      ) {\n        DEBUG > 1 and print \" Pondering"..., 4096) = 4096
22042 brk(0x8320000)                    = 0x8320000
22042 read(8, "f->_ponder_Verbatim($para);        \n      } elsif($para_type eq 'Data') {\n        $self->_ponder_Data($para);\n      } else {\n        die \"\\$para type is $para_type -- how did that happen?\";\n        # Shouldn't happen.\n      }\n\n      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      $para->[0] =~ s/^[~=]//s;\n\n      DEBUG and print \"\\n\", pretty($para), \"\\n\";\n\n      # traverse the treelet (which might well be just one string scalar)\n      $self->{'content_seen'} ||= 1;\n      $self->_traverse_treelet_bit(@$para);\n    }\n  }\n  \n  return;\n}\n\n###########################################################################\n# The sub-ponderers...\n\n\n\nsub _ponder_for {\n  my ($self,$para,$curr_open,$paras) = @_;\n\n  # Fake it out as a begin/end\n  my $target;\n\n  if(grep $_->[1]{'~ignore'}, @$curr_open) {\n    DEBUG > 1 and print \"Ignoring ignorable =for\\n\";\n    return 1;\n  }\n\n  for(my $i = 2; $i < @$para; ++$i) {\n    if($para->[$i] =~ s/^\\s*(\\S+)\\s*//s) {\n      $target = $1;\n      last;\n    }\n  }\n  unless(defined $target) {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"=for without a target?\"\n    );\n    return 1;\n  }\n  DEBUG > 1 and\n   print \"Faking out a =for $target as a =begin $target / =end $target\\n\";\n  \n  $para->[0] = 'Data';\n  \n  unshift @$paras,\n    ['=begin',\n      {'start_line' => $para->[1]{'start_line'}, '~really' => '=for'},\n      $target,\n    ],\n    $para,\n    ['=end',\n      {'start_line' => $para->[1]{'start_line'}, '~really' => '=for'},\n      $target,\n    ],\n  ;\n  \n  return 1;\n}\n\nsub _ponder_begin {\n  my ($self,$para,$curr_open,$paras) = @_;\n  my $content = join ' ', splice @$para, 2;\n  $content =~ s/^\\s+//s;\n  $content =~ s/\\s+$//s;\n  unless(length($content)) {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"=begin without a target?\"\n    );\n    DEBUG and print \"Ignoring targetless =begin\\n\";\n    return 1;\n  }\n  \n  my ($target, $title) = $content =~ m/^(\\S+)\\s*(.*)$/;\n  $para->[1]{'title'} = $title if ($title);\n  $para->[1]{'target'} = $target;  # without any ':'\n  $conten"..., 4096) = 4096
22042 read(8, ",$para,$curr_open,$paras) = @_;\n  my $content = join ' ', splice @$para, 2;\n  $content =~ s/^\\s+//s;\n  $content =~ s/\\s+$//s;\n  DEBUG and print \"Ogling '=end $content' directive\\n\";\n  \n  unless(length($content)) {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"'=end' without a target?\" . (\n        ( @$curr_open and $curr_open->[-1][0] eq '=for' )\n        ? ( \" (Should be \\\"=end \" . $curr_open->[-1][1]{'target'} . '\")' )\n        : ''\n      )\n    );\n    DEBUG and print \"Ignoring targetless =end\\n\";\n    return 1;\n  }\n  \n  unless($content =~ m/^\\S+$/) {  # i.e., unless it's one word\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"'=end $content' is invalid.  (Stack: \"\n      . $self->_dump_curr_open() . ')'\n    );\n    DEBUG and print \"Ignoring mistargetted =end $content\\n\";\n    return 1;\n  }\n  \n  unless(@$curr_open and $curr_open->[-1][0] eq '=for') {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"=end $content without matching =begin.  (Stack: \"\n      . $self->_dump_curr_open() . ')'\n    );\n    DEBUG and print \"Ignoring mistargetted =end $content\\n\";\n    return 1;\n  }\n  \n  unless($content eq $curr_open->[-1][1]{'target'}) {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"=end $content doesn't match =begin \" \n      . $curr_open->[-1][1]{'target'}\n      . \".  (Stack: \"\n      . $self->_dump_curr_open() . ')'\n    );\n    DEBUG and print \"Ignoring mistargetted =end $content at line $para->[1]{'start_line'}\\n\";\n    return 1;\n  }\n\n  # Else it's okay to close...\n  if(grep $_->[1]{'~ignore'}, @$curr_open) {\n    DEBUG > 1 and print \"Not firing any event for this =end $content because in an ignored region\\n\";\n    # And that may be because of this to-be-closed =for region, or some\n    #  other one, but it doesn't matter.\n  } else {\n    $curr_open->[-1][1]{'start_line'} = $para->[1]{'start_line'};\n      # what's that for?\n    \n    $self->{'content_seen'} ||= 1;\n    $self->_handle_element_end( my $scratch = 'for' );\n  }\n  DEBUG > 1 and print \"Popping $curr_open->[-1][0] $curr_open->[-1][1]{'tar"..., 4096) = 4096
22042 read(8, ">[0][0] eq '~end') {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"=over is the last thing in the document?!\"\n    );\n    return 1; # But feh, ignore it.\n  } else {\n    $list_type = 'block';\n  }\n  $para->[1]{'~type'} = $list_type;\n  push @$curr_open, $para;\n   # yes, we reuse the paragraph as a stack item\n  \n  my $content = join ' ', splice @$para, 2;\n  my $overness;\n  if($content =~ m/^\\s*$/s) {\n    $para->[1]{'indent'} = 4;\n  } elsif($content =~ m/^\\s*((?:\\d*\\.)?\\d+)\\s*$/s) {\n    no integer;\n    $para->[1]{'indent'} = $1;\n    if($1 == 0) {\n      $self->whine(\n        $para->[1]{'start_line'},\n        \"Can't have a 0 in =over $content\"\n      );\n      $para->[1]{'indent'} = 4;\n    }\n  } else {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"=over should be: '=over' or '=over positive_number'\"\n    );\n    $para->[1]{'indent'} = 4;\n  }\n  DEBUG > 1 and print \"=over found of type $list_type\\n\";\n  \n  $self->{'content_seen'} ||= 1;\n  $self->_handle_element_start((my $scratch = 'over-' . $list_type), $para->[1]);\n\n  return;\n}\n      \nsub _ponder_back {\n  my ($self,$para,$curr_open,$paras) = @_;\n  # TODO: fire off </item-number> or </item-bullet> or </item-text> ??\n\n  my $content = join ' ', splice @$para, 2;\n  if($content =~ m/\\S/) {\n    $self->whine(\n      $para->[1]{'start_line'},\n      \"=back doesn't take any parameters, but you said =back $content\"\n    );\n  }\n\n  if(@$curr_open and $curr_open->[-1][0] eq '=over') {\n    DEBUG > 1 and print \"=back happily closes matching =over\\n\";\n    # Expected case: we're closing the most recently opened thing\n    #my $over = pop @$curr_open;\n    $self->{'content_seen'} ||= 1;\n    $self->_handle_element_end( my $scratch =\n      'over-' . ( (pop @$curr_open)->[1]{'~type'} )\n    );\n  } else {\n    DEBUG > 1 and print \"=back found without a matching =over.  Stack: (\",\n        join(', ', map $_->[0], @$curr_open), \").\\n\";\n    $self->whine(\n      $para->[1]{'start_line'},\n      '=back without =over'\n    );\n    return 1; # and ignore it\n  }\n}\n\nsub _ponder_item {\n  my ($self"..., 4096) = 4096
22042 read(8, "under $over_type\\n\";\n    \n    my $expected_value = ++ $curr_open->[-1][1]{'~counter'};\n    \n    if($item_type eq 'bullet') {\n      # Hm, it's not numeric.  Correct for this.\n      $para->[1]{'number'} = $expected_value;\n      $self->whine(\n        $para->[1]{'start_line'},\n        \"Expected '=item $expected_value'\"\n      );\n      push @$para, $para->[1]{'~orig_content'};\n        # restore the bullet, blocking the assimilation of next para\n\n    } elsif($item_type eq 'text') {\n      # Hm, it's not numeric.  Correct for this.\n      $para->[1]{'number'} = $expected_value;\n      $self->whine(\n        $para->[1]{'start_line'},\n        \"Expected '=item $expected_value'\"\n      );\n      # Text content will still be there and will block next ~Para\n\n    } elsif($item_type ne 'number') {\n      die \"Unknown item type $item_type\"; # should never happen\n\n    } elsif($expected_value == $para->[1]{'number'}) {\n      DEBUG > 1 and print \" Numeric item has the expected value of $expected_value\\n\";\n      \n    } else {\n      DEBUG > 1 and print \" Numeric item has \", $para->[1]{'number'},\n       \" instead of the expected value of $expected_value\\n\";\n      $self->whine(\n        $para->[1]{'start_line'},\n        \"You have '=item \" . $para->[1]{'number'} .\n        \"' instead of the expected '=item $expected_value'\"\n      );\n      $para->[1]{'number'} = $expected_value;  # correcting!!\n    }\n      \n    if(@$para == 2) {\n      # For the cases where we /didn't/ push to @$para\n      if($paras->[0][0] eq '~Para') {\n        DEBUG and print \"Assimilating following ~Para content into $over_type item\\n\";\n        push @$para, splice @{shift @$paras},2;\n      } else {\n        DEBUG and print \"Can't assimilate following \", $paras->[0][0], \"\\n\";\n        push @$para, '';  # Just so it's not contentless\n      }\n    }\n\n\n  } elsif($over_type eq 'bullet') {\n    my $item_type = $self->_get_item_type($para);\n      # That kills the content of the item if it's a number or bullet.\n    DEBUG and print \" Item is of type \", $para->[0], \" under $over_type\\n\";\n    "..., 4096) = 4096
22042 read(8, "eserve';\n\n  my $indent = $self->strip_verbatim_indent;\n  if ($indent && ref $indent eq 'CODE') {\n      my @shifted = (shift @{$para}, shift @{$para});\n      $indent = $indent->($para);\n      unshift @{$para}, @shifted;\n  }\n\n  for(my $i = 2; $i < @$para; $i++) {\n    foreach my $line ($para->[$i]) { # just for aliasing\n      # Strip indentation.\n      $line =~ s/^\\E$indent// if $indent\n          && !($self->{accept_codes} && $self->{accept_codes}{VerbatimFormatted});\n      while( $line =~\n        # Sort of adapted from Text::Tabs -- yes, it's hardwired in that\n        # tabs are at every EIGHTH column.  For portability, it has to be\n        # one setting everywhere, and 8th wins.\n        s/^([^\\t]*)(\\t+)/$1.(\" \" x ((length($2)<<3)-(length($1)&7)))/e\n      ) {}\n\n      # TODO: whinge about (or otherwise treat) unindented or overlong lines\n\n    }\n  }\n  \n  # Now the VerbatimFormatted hoodoo...\n  if( $self->{'accept_codes'} and\n      $self->{'accept_codes'}{'VerbatimFormatted'}\n  ) {\n    while(@$para > 3 and $para->[-1] !~ m/\\S/) { pop @$para }\n     # Kill any number of terminal newlines\n    $self->_verbatim_format($para);\n  } elsif ($self->{'codes_in_verbatim'}) {\n    push @$para,\n    @{$self->_make_treelet(\n      join(\"\\n\", splice(@$para, 2)),\n      $para->[1]{'start_line'}, $para->[1]{'xml:space'}\n    )};\n    $para->[-1] =~ s/\\n+$//s; # Kill any number of terminal newlines\n  } else {\n    push @$para, join \"\\n\", splice(@$para, 2) if @$para > 3;\n    $para->[-1] =~ s/\\n+$//s; # Kill any number of terminal newlines\n  }\n  return;\n}\n\nsub _ponder_Data {\n  my ($self,$para) = @_;\n  DEBUG and print \" giving data treatment...\\n\";\n  $para->[1]{'xml:space'} = 'preserve';\n  push @$para, join \"\\n\", splice(@$para, 2) if @$para > 3;\n  return;\n}\n\n\n\n\n###########################################################################\n\nsub _traverse_treelet_bit {  # for use only by the routine above\n  my($self, $name) = splice @_,0,2;\n\n  my $scratch;\n  $self->_handle_element_start(($scratch=$name), shift @_);\n  \n  foreach my $x (@_) {\n    if(ref"..., 4096) = 4096
22042 brk(0x8341000)                    = 0x8341000
22042 read(8, "5 and print \"  It's a formatty line.  \",\n       \"Peeking at previous line \", $i-1, \": $$p[$i-1]: \\n\";\n      \n      if( $p->[$i-1] =~ m{^#:[ \\^\\/\\%]*\\n?$}s ) {\n        DEBUG > 5 and print \"  Previous line is formatty!  Skipping this one.\\n\";\n        next;\n      } else {\n        DEBUG > 5 and print \"  Previous line is non-formatty!  Yay!\\n\";\n      }\n    } else {\n      DEBUG > 5 and print \"  It's not a formatty line.  Ignoring\\n\";\n      next;\n    }\n\n    # A formatty line has to have #: in the first two columns, and uses\n    # \"^\" to mean bold, \"/\" to mean underline, and \"%\" to mean bold italic.\n    # Example:\n    #   What do you want?  i like pie. [or whatever]\n    # #:^^^^^^^^^^^^^^^^^              /////////////         \n    \n\n    DEBUG > 4 and print \"_verbatim_format considers:\\n<$p->[$i-1]>\\n<$p->[$i]>\\n\";\n    \n    $formatting = '  ' . $1;\n    $formatting =~ s/\\s+$//s; # nix trailing whitespace\n    unless(length $formatting and $p->[$i-1] =~ m/\\S/) { # no-op\n      splice @$p,$i,1; # remove this line\n      $i--; # don't consider next line\n      next;\n    }\n\n    if( length($formatting) >= length($p->[$i-1]) ) {\n      $formatting = substr($formatting, 0, length($p->[$i-1]) - 1) . ' ';\n    } else {\n      $formatting .= ' ' x (length($p->[$i-1]) - length($formatting));\n    }\n    # Make $formatting and the previous line be exactly the same length,\n    # with $formatting having a \" \" as the last character.\n \n    DEBUG > 4 and print \"Formatting <$formatting>    on <\", $p->[$i-1], \">\\n\";\n\n\n    my @new_line;\n    while( $formatting =~ m{\\G(( +)|(\\^+)|(\\/+)|(\\%+))}g ) {\n      #print \"Format matches $1\\n\";\n\n      if($2) {\n        #print \"SKIPPING <$2>\\n\";\n        push @new_line,\n          substr($p->[$i-1], pos($formatting)-length($1), length($1));\n      } else {\n        #print \"SNARING $+\\n\";\n        push @new_line, [\n          (\n            $3 ? 'VerbatimB'  :\n            $4 ? 'VerbatimI'  :\n            $5 ? 'VerbatimBI' : die(\"Should never get called\")\n          ), {},\n          substr($p->[$i-1], pos($formatting)-length($"..., 4096) = 4096
22042 read(8, "space first.\n    $para =~ s/ $//;\n    $para =~ s/^ //;\n  }\n  \n  # Only apparent problem the above code is that N<<  >> turns into\n  # N<< >>.  But then, word wrapping does that too!  So don't do that!\n  \n  my @stack;\n  my @lineage = ($treelet);\n\n  DEBUG > 4 and print \"Paragraph:\\n$para\\n\\n\";\n \n  # Here begins our frightening tokenizer RE.  The following regex matches\n  # text in four main parts:\n  #\n  #  * Start-codes.  The first alternative matches C< or C<<, the latter\n  #    followed by some whitespace.  $1 will hold the entire start code\n  #    (including any space following a multiple-angle-bracket delimiter),\n  #    and $2 will hold only the additional brackets past the first in a\n  #    multiple-bracket delimiter.  length($2) + 1 will be the number of\n  #    closing brackets we have to find.\n  #\n  #  * Closing brackets.  Match some amount of whitespace followed by\n  #    multiple close brackets.  The logic to see if this closes anything\n  #    is down below.  Note that in order to parse C<<  >> correctly, we\n  #    have to use look-behind (?<=\\s\\s), since the match of the starting\n  #    code will have consumed the whitespace.\n  #\n  #  * A single closing bracket, to close a simple code like C<>.\n  #\n  #  * Something that isn't a start or end code.  We have to be careful\n  #    about accepting whitespace, since perlpodspec says that any whitespace\n  #    before a multiple-bracket closing delimiter should be ignored.\n  #\n  while($para =~\n    m/\\G\n      (?:\n        # Match starting codes, including the whitespace following a\n        # multiple-delimiter start code.  $1 gets the whole start code and\n        # $2 gets all but one of the <s in the multiple-bracket case.\n        ([A-Z]<(?:(<+)\\s+)?)\n        |\n        # Match multiple-bracket end codes.  $3 gets the whitespace that\n        # should be discarded before an end bracket but kept in other cases\n        # and $4 gets the end brackets themselves.\n        (\\s+|(?<=\\s\\s))(>{2,})\n        |\n        (\\s?>)          # $5: simple end-codes\n        |\n        (  "..., 4096) = 4096
22042 read(8, "ose complex.\\n\";\n        pos($para) = pos($para) - length($4) + $stack[-1];\n      } else {\n        # We saw \" >>>>\" but needed \" >>>>>>\".  So this is all just stuff!\n        DEBUG > 4 and print \" But it's really just stuff, because we needed more.\\n\";\n        push @{ $lineage[-1] }, $3, $4;\n        next;\n      }\n      #print \"\\nHOOBOY \", scalar(@{$lineage[-1]}), \"!!!\\n\";\n\n      push @{ $lineage[-1] }, '' if 2 == @{ $lineage[-1] };\n      # Keep the element from being childless\n      \n      pop @stack;\n      pop @lineage;\n      \n    } elsif(defined $5) {\n      DEBUG > 3 and print \"Found apparent simple end-text code \\\"$5\\\"\\n\";\n\n      if(@stack and ! $stack[-1]) {\n        # We're indeed expecting a simple end-code\n        DEBUG > 4 and print \" It's indeed an end-code.\\n\";\n\n        if(length($5) == 2) { # There was a space there: \" >\"\n          push @{ $lineage[-1] }, ' ';\n        } elsif( 2 == @{ $lineage[-1] } ) { # Closing a childless element\n          push @{ $lineage[-1] }, ''; # keep it from being really childless\n        }\n\n        pop @stack;\n        pop @lineage;\n      } else {\n        DEBUG > 4 and print \" It's just stuff.\\n\";\n        push @{ $lineage[-1] }, $5;\n      }\n\n    } elsif(defined $6) {\n      DEBUG > 3 and print \"Found stuff \\\"$6\\\"\\n\";\n      push @{ $lineage[-1] }, $6;\n      \n    } else {\n      # should never ever ever ever happen\n      DEBUG and print \"AYYAYAAAAA at line \", __LINE__, \"\\n\";\n      die \"SPORK 512512!\";\n    }\n  }\n\n  if(@stack) { # Uhoh, some sequences weren't closed.\n    my $x= \"...\";\n    while(@stack) {\n      push @{ $lineage[-1] }, '' if 2 == @{ $lineage[-1] };\n      # Hmmmmm!\n\n      my $code         = (pop @lineage)->[0];\n      my $ender_length =  pop @stack;\n      if($ender_length) {\n        --$ender_length;\n        $x = $code . (\"<\" x $ender_length) . \" $x \" . (\">\" x $ender_length);\n      } else {\n        $x = $code . \"<$x>\";\n      }\n    }\n    DEBUG > 1 and print \"Unterminated $x sequence\\n\";\n    $self->whine($start_line,\n      \"Unterminated $x sequence\",\n    );\n  }\n  \n  return "..., 4096) = 4096
22042 read(8, ". '=>' . pretty($hr->{$_}),\n            sort keys %$hr ) ) . \"}\" ;\n      $x;\n    } elsif(!length($_)) { q{''} # empty string\n    } elsif(\n      $_ eq '0' # very common case\n      or(\n         m/^-?(?:[123456789]\\d*|0)(?:\\.\\d+)?$/s\n         and $_ ne '-0' # the strange case that that RE lets thru\n      )\n    ) { $_;\n    } else {\n      if( chr(65) eq 'A' ) {\n        s<([^\\x20\\x21\\x23\\x27-\\x3F\\x41-\\x5B\\x5D-\\x7E])>\n         #<$pretty_form{$1} || '\\\\x'.(unpack(\"H2\",$1))>eg;\n         <$pretty_form{$1} || '\\\\x{'.sprintf(\"%x\", ord($1)).'}'>eg;\n      } else {\n        # We're in some crazy non-ASCII world!\n        s<([^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789])>\n         #<$pretty_form{$1} || '\\\\x'.(unpack(\"H2\",$1))>eg;\n         <$pretty_form{$1} || '\\\\x{'.sprintf(\"%x\", ord($1)).'}'>eg;\n      }\n      qq{\"$_\"};\n    }\n  } @stuff;\n  # $out =~ s/\\n */ /g if length($out) < 75;\n  return $out;\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n# A rather unsubtle method of blowing away all the state information\n# from a parser object so it can be reused. Provided as a utility for\n# backward compatibilty in Pod::Man, etc. but not recommended for\n# general use.\n\nsub reinit {\n  my $self = shift;\n  foreach (qw(source_dead source_filename doc_has_started\nstart_of_pod_block content_seen last_was_blank paras curr_open\nline_count pod_para_count in_pod ~tried_gen_errata errata errors_seen\nTitle)) {\n\n    delete $self->{$_};\n  }\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n1;\n\n", 4096) = 1559
22042 read(8, "", 4096)                 = 0
22042 close(8)                          = 0
22042 _llseek(7, 1539, [1539], SEEK_SET) = 0
22042 _llseek(7, 0, [1539], SEEK_CUR)   = 0
22042 close(7)                          = 0
22042 read(6, "gify_lol;\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nsub version_report {\n  my $class = ref($_[0]) || $_[0];\n  if($class eq __PACKAGE__) {\n    return \"$class $VERSION\";\n  } else {\n    my $v = $class->VERSION;\n    return \"$class $v (\" . __PACKAGE__ . \" $VERSION)\";\n  }\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n#sub curr_open { # read-only list accessor\n#  return @{ $_[0]{'curr_open'} || return() };\n#}\n#sub _curr_open_listref { $_[0]{'curr_open'} ||= [] }\n\n\nsub output_string {\n  # Works by faking out output_fh.  Simplifies our code.\n  #\n  my $this = shift;\n  return $this->{'output_string'} unless @_;  # GET.\n  \n  require Pod::Simple::TiedOutFH;\n  my $x = (defined($_[0]) and ref($_[0])) ? $_[0] : \\( $_[0] );\n  $$x = '' unless defined $$x;\n  DEBUG > 4 and print \"# Output string set to $x ($$x)\\n\";\n  $this->{'output_fh'} = Pod::Simple::TiedOutFH->handle_on($_[0]);\n  return\n    $this->{'output_string'} = $_[0];\n    #${ ${ $this->{'output_fh'} } };\n}\n\nsub abandon_output_string { $_[0]->abandon_output_fh; delete $_[0]{'output_string'} }\nsub abandon_output_fh     { $_[0]->output_fh(undef) }\n# These don't delete the string or close the FH -- they just delete our\n#  references to it/them.\n# TODO: document these\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nsub new {\n  # takes no parameters\n  my $class = ref($_[0]) || $_[0];\n  #Carp::croak(__PACKAGE__ . \" is a virtual base class -- see perldoc \"\n  #  . __PACKAGE__ );\n  return bless {\n    'accept_codes'      => { map( ($_=>$_), @Known_formatting_codes ) },\n    'accept_directives' => { %Known_directives },\n    'accept_targets'    => {},\n  }, $class;\n}\n\n\n\n# TODO: an option for whether to interpolate E<...>'s, or just resolve to codes.\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nsub _handle_element_start {     # OVERRIDE IN DERIVED CLASS\n  my($self, $element_name, $attr_hash_r) = @_;\n  return;\n}\n\nsub _handle_element_end {       #"..., 4096) = 4096
22042 read(6, "ub accept_target_as_text { shift->accept_targets_as_text(@_) } # alias\n\n\nsub accept_targets         { shift->_accept_targets('1', @_) }\n\nsub accept_targets_as_text { shift->_accept_targets('force_resolve', @_) }\n # forces them to be processed, even when there's no \":\".\n\nsub _accept_targets {\n  my($this, $type) = splice @_,0,2;\n  foreach my $t (@_) {\n    next unless defined $t and length $t;\n    # TODO: enforce some limitations on what a target name can be?\n    $this->{'accept_targets'}{$t} = $type;\n    DEBUG > 2 and print \"Learning to accept \\\"$t\\\" as target of type $type\\n\";\n  }    \n  return sort keys %{ $this->{'accept_targets'} } if wantarray;\n  return;\n}\n\n#--------------------------------------------------------------------------\nsub unaccept_target         { shift->unaccept_targets(@_) }\n\nsub unaccept_targets {\n  my $this = shift;\n  foreach my $t (@_) {\n    next unless defined $t and length $t;\n    # TODO: enforce some limitations on what a target name can be?\n    delete $this->{'accept_targets'}{$t};\n    DEBUG > 2 and print \"OK, won't accept \\\"$t\\\" as target.\\n\";\n  }    \n  return sort keys %{ $this->{'accept_targets'} } if wantarray;\n  return;\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#\n# And now codes (not targets or directives)\n\nsub accept_code { shift->accept_codes(@_) } # alias\n\nsub accept_codes {  # Add some codes\n  my $this = shift;\n  \n  foreach my $new_code (@_) {\n    next unless defined $new_code and length $new_code;\n    if(ASCII) {\n      # A good-enough check that it's good as an XML Name symbol:\n      Carp::croak \"\\\"$new_code\\\" isn't a valid element name\"\n        if $new_code =~\n          m/[\\x00-\\x2C\\x2F\\x39\\x3B-\\x40\\x5B-\\x5E\\x60\\x7B-\\x7F]/\n            # Characters under 0x80 that aren't legal in an XML Name.\n        or $new_code =~ m/^[-\\.0-9]/s\n        or $new_code =~ m/:[-\\.0-9]/s;\n            # The legal under-0x80 Name characters that \n            #  an XML Name still can't start with.\n    }\n    \n    $this->{'accept_codes'}{$new_code} = $new_code;\n   "..., 4096) = 4096
22042 read(6, " it's a zero-length \"empty line\" at the very\n       #  end of \"foo\\nbar\\n\" (i.e., between the \\n and the EOS).\n    }\n  }\n  $self->parse_lines(undef); # to signal EOF\n  return $self;\n}\n\nsub _init_fh_source {\n  my($self, $source) = @_;\n\n  #DEBUG > 1 and print \"Declaring $source as :raw for starters\\n\";\n  #$self->_apply_binmode($source, ':raw');\n  #binmode($source, \":raw\");\n\n  return;\n}\n\n#:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.\n#\n\nsub parse_file {\n  my($self, $source) = (@_);\n\n  if(!defined $source) {\n    Carp::croak(\"Can't use empty-string as a source for parse_file\");\n  } elsif(ref(\\$source) eq 'GLOB') {\n    $self->{'source_filename'} = '' . ($source);\n  } elsif(ref $source) {\n    $self->{'source_filename'} = '' . ($source);\n  } elsif(!length $source) {\n    Carp::croak(\"Can't use empty-string as a source for parse_file\");\n  } else {\n    {\n      local *PODSOURCE;\n      open(PODSOURCE, \"<$source\") || Carp::croak(\"Can't open $source: $!\");\n      $self->{'source_filename'} = $source;\n      $source = *PODSOURCE{IO};\n    }\n    $self->_init_fh_source($source);\n  }\n  # By here, $source is a FH.\n\n  $self->{'source_fh'} = $source;\n  \n  my($i, @lines);\n  until( $self->{'source_dead'} ) {\n    splice @lines;\n    for($i = MANY_LINES; $i--;) {  # read those many lines at a time\n      local $/ = $NL;\n      push @lines, scalar(<$source>);  # readline\n      last unless defined $lines[-1];\n       # but pass thru the undef, which will set source_dead to true\n    }\n    $self->parse_lines(@lines);\n  }\n  delete($self->{'source_fh'}); # so it can be GC'd\n  return $self;\n}\n\n#:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.\n\nsub parse_from_file {\n  # An emulation of Pod::Parser's interface, for the sake of Perldoc.\n  # Basically just a wrapper around parse_file.\n\n  my($self, $source, $to) = @_;\n  $self = $self->new unless ref($self); # so we tolerate being a class method\n  \n  if(!defined $source)             { $source = *STDIN{IO}\n  } elsif(ref(\\$source) eq 'GLOB') { # stet\n "..., 4096) = 4096
22042 brk(0x8362000)                    = 0x8362000
22042 read(6, "r!\n  }\n  return 1;\n}\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nsub _get_initial_item_type {\n  # A hack-wrapper here for when you have like \"=over\\n\\n=item 456\\n\\n\"\n  my($self, $para) = @_;\n  return $para->[1]{'~type'}  if $para->[1]{'~type'};\n\n  return $para->[1]{'~type'} = 'text'\n   if join(\"\\n\", @{$para}[2 .. $#$para]) =~ m/^\\s*(\\d+)\\.?\\s*$/s and $1 ne '1';\n  # Else fall thru to the general case:\n  return $self->_get_item_type($para);\n}\n\n\n\nsub _get_item_type {       # mutates the item!!\n  my($self, $para) = @_;\n  return $para->[1]{'~type'} if $para->[1]{'~type'};\n\n\n  # Otherwise we haven't yet been to this node.  Maybe alter it...\n  \n  my $content = join \"\\n\", @{$para}[2 .. $#$para];\n\n  if($content =~ m/^\\s*\\*\\s*$/s or $content =~ m/^\\s*$/s) {\n    # Like: \"=item *\", \"=item   *   \", \"=item\"\n    splice @$para, 2; # so it ends up just being ['=item', { attrhash } ]\n    $para->[1]{'~orig_content'} = $content;\n    return $para->[1]{'~type'} = 'bullet';\n\n  } elsif($content =~ m/^\\s*\\*\\s+(.+)/s) {  # tolerance\n  \n    # Like: \"=item * Foo bar baz\";\n    $para->[1]{'~orig_content'}      = $content;\n    $para->[1]{'~_freaky_para_hack'} = $1;\n    DEBUG > 2 and print \" Tolerating $$para[2] as =item *\\\\n\\\\n$1\\n\";\n    splice @$para, 2; # so it ends up just being ['=item', { attrhash } ]\n    return $para->[1]{'~type'} = 'bullet';\n\n  } elsif($content =~ m/^\\s*(\\d+)\\.?\\s*$/s) {\n    # Like: \"=item 1.\", \"=item    123412\"\n    \n    $para->[1]{'~orig_content'} = $content;\n    $para->[1]{'number'} = $1;  # Yes, stores the number there!\n\n    splice @$para, 2; # so it ends up just being ['=item', { attrhash } ]\n    return $para->[1]{'~type'} = 'number';\n    \n  } else {\n    # It's anything else.\n    return $para->[1]{'~type'} = 'text';\n\n  }\n}\n\n#-----------------------------------------------------------------------------\n\nsub _make_treelet {\n  my $self = shift;  # and ($para, $start_line)\n  my $treelet;\n  if(!@_) {\n    return [''];\n  } if(ref $_[0] and ref $_[0][0] and $_[0][0][0] eq '~Top') {\n    #"..., 4096) = 4096
22042 read(6, " $i\\:[$treelet->[$i]]\\n\";\n        $treelet->[$i-1] .= ( splice(@$treelet, $i, 1) )[0];\n        DEBUG > 4 and print \"    Now: \", $i-1, \":[$treelet->[$i-1]]\\n\";\n        --$i;\n        next; \n        # since we just pulled the possibly last node out from under\n        #  ourselves, we can't just redo()\n\n      } elsif( ref $treelet->[$i] ) {\n        DEBUG > 4 and print \"  Enqueuing \", pretty($treelet->[$i]), \" for traversal.\\n\";\n        push @stack, $treelet->[$i];\n\n        if($treelet->[$i][0] eq 'L') {\n          my $thing;\n          foreach my $attrname ('section', 'to') {        \n            if(defined($thing = $treelet->[$i][1]{$attrname}) and ref $thing) {\n              unshift @stack, $thing;\n              DEBUG > 4 and print \"  +Enqueuing \",\n               pretty( $treelet->[$i][1]{$attrname} ),\n               \" as an attribute value to tweak.\\n\";\n            }\n          }\n        }\n      }\n    }\n  }\n  DEBUG > 2 and print \"End of _wrap_up traversal.\\n\\n\";\n\n  return;\n}\n\n#:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.\n\nsub _remap_sequences {\n  my($self,@stack) = @_;\n  \n  if(@stack == 1 and @{ $stack[0] } == 3 and !ref $stack[0][2]) {\n    # VERY common case: abort it.\n    DEBUG and print \"Skipping _remap_sequences: formatless treelet.\\n\";\n    return 0;\n  }\n  \n  my $map = ($self->{'accept_codes'} || die \"NO accept_codes in $self?!?\");\n\n  my $start_line = $stack[0][1]{'start_line'};\n  DEBUG > 2 and printf\n   \"\\nAbout to start _remap_sequences on treelet from line %s.\\n\",\n   $start_line || '[?]'\n  ;\n  DEBUG > 3 and print \" Map: \",\n    join('; ', map \"$_=\" . (\n        ref($map->{$_}) ? join(\",\", @{$map->{$_}}) : $map->{$_}\n      ),\n      sort keys %$map ),\n    (\"B~C~E~F~I~L~S~X~Z\" eq join '~', sort keys %$map)\n     ? \"  (all normal)\\n\" : \"\\n\"\n  ;\n\n  # A recursive algorithm implemented iteratively!  Whee!\n  \n  my($is, $was, $i, $treelet); # scratch\n  while($treelet = shift @stack) {\n    DEBUG > 3 and print \" Considering children of this $treelet->[0] node...\\n\";\n    for($i = 2; $i < @$tree"..., 4096) = 4096
22042 read(6, "\n  DEBUG > 2 and print \"End of _remap_sequences traversal.\\n\\n\";\n\n  if(@_ == 2 and @{ $_[1] } == 3 and !ref $_[1][2]) {\n    DEBUG and print \"Noting that the treelet is now formatless.\\n\";\n    return 0;\n  }\n  return 1;\n}\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\nsub _ponder_extend {\n\n  # \"Go to an extreme, move back to a more comfortable place\"\n  #  -- /Oblique Strategies/,  Brian Eno and Peter Schmidt\n  \n  my($self, $para) = @_;\n  my $content = join ' ', splice @$para, 2;\n  $content =~ s/^\\s+//s;\n  $content =~ s/\\s+$//s;\n\n  DEBUG > 2 and print \"Ogling extensor: =extend $content\\n\";\n\n  if($content =~\n    m/^\n      (\\S+)         # 1 : new item\n      \\s+\n      (\\S+)         # 2 : fallback(s)\n      (?:\\s+(\\S+))? # 3 : element name(s)\n      \\s*\n      $\n    /xs\n  ) {\n    my $new_letter = $1;\n    my $fallbacks_one = $2;\n    my $elements_one;\n    $elements_one = defined($3) ? $3 : $1;\n\n    DEBUG > 2 and print \"Extensor has good syntax.\\n\";\n\n    unless($new_letter =~ m/^[A-Z]$/s or $new_letter) {\n      DEBUG > 2 and print \" $new_letter isn't a valid thing to entend.\\n\";\n      $self->whine(\n        $para->[1]{'start_line'},\n        \"You can extend only formatting codes A-Z, not like \\\"$new_letter\\\"\"\n      );\n      return;\n    }\n    \n    if(grep $new_letter eq $_, @Known_formatting_codes) {\n      DEBUG > 2 and print \" $new_letter isn't a good thing to extend, because known.\\n\";\n      $self->whine(\n        $para->[1]{'start_line'},\n        \"You can't extend an established code like \\\"$new_letter\\\"\"\n      );\n      \n      #TODO: or allow if last bit is same?\n      \n      return;\n    }\n\n    unless($fallbacks_one =~ m/^[A-Z](,[A-Z])*$/s  # like \"B\", \"M,I\", etc.\n      or $fallbacks_one eq '0' or $fallbacks_one eq '1'\n    ) {\n      $self->whine(\n        $para->[1]{'start_line'},\n        \"Format for second =extend parameter must be like\"\n        . \" M or 1 or 0 or M,N or M,N,O but you have it like \"\n        . $fallbacks_one\n      );\n      return;\n    }\n    \n    unless($elements_one =~ m/^[^ ,]+"..., 4096) = 4096
22042 read(6, "][1]{'start_line'};\n\n  # A recursive algorithm implemented iteratively!  Whee!\n\n  while($treelet = shift @stack) {\n    for($i = 2; $i < @$treelet; ++$i) { # iterate over children\n      next unless ref $treelet->[$i];  # text nodes are uninteresting\n      unless($treelet->[$i][0] eq 'Z') {\n        unshift @stack, $treelet->[$i]; # recurse\n        next;\n      }\n        \n      DEBUG > 1 and print \"Nixing Z node @{$treelet->[$i]}\\n\";\n        \n      # bitch UNLESS it's empty\n      unless(  @{$treelet->[$i]} == 2\n           or (@{$treelet->[$i]} == 3 and $treelet->[$i][2] eq '')\n      ) {\n        $self->whine( $start_line, \"A non-empty Z<>\" );\n      }      # but kill it anyway\n        \n      splice(@$treelet, $i, 1); # thereby just nix this node.\n      --$i;\n        \n    }\n  }\n  \n  return;\n}\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n# Quoting perlpodspec:\n\n# In parsing an L<...> code, Pod parsers must distinguish at least four\n# attributes:\n\n############# Not used.  Expressed via the element children plus\n#############  the value of the \"content-implicit\" flag.\n# First:\n# The link-text. If there is none, this must be undef. (E.g., in \"L<Perl\n# Functions|perlfunc>\", the link-text is \"Perl Functions\". In\n# \"L<Time::HiRes>\" and even \"L<|Time::HiRes>\", there is no link text. Note\n# that link text may contain formatting.)\n# \n\n############# The element children\n# Second:\n# The possibly inferred link-text -- i.e., if there was no real link text,\n# then this is the text that we'll infer in its place. (E.g., for\n# \"L<Getopt::Std>\", the inferred link text is \"Getopt::Std\".)\n#\n\n############# The \"to\" attribute (which might be text, or a treelet)\n# Third:\n# The name or URL, or undef if none. (E.g., in \"L<Perl\n# Functions|perlfunc>\", the name -- also sometimes called the page -- is\n# \"perlfunc\". In \"L</CAVEATS>\", the name is undef.)\n# \n\n############# The \"section\" attribute (which might be next, or a treelet)\n# Fourth:\n# The section (AKA \"item\" in older perlpods), or undef if none. E.g., in\n# G"..., 4096) = 4096
22042 read(6, "'s empty\n      if(  @{$ell} == 2\n       or (@{$ell} == 3 and $ell->[2] eq '')\n      ) {\n        $self->whine( $start_line, \"An empty L<>\" );\n        $treelet->[$i] = 'L<>';  # just make it a text node\n        next;  # and move on\n      }\n     \n      # Catch URLs:\n\n      # there are a number of possible cases:\n      # 1) text node containing url: http://foo.com\n      #   -> [ 'http://foo.com' ]\n      # 2) text node containing url and text: foo|http://foo.com\n      #   -> [ 'foo|http://foo.com' ]\n      # 3) text node containing url start: mailto:xE<at>foo.com\n      #   -> [ 'mailto:x', [ E ... ], 'foo.com' ]\n      # 4) text node containing url start and text: foo|mailto:xE<at>foo.com\n      #   -> [ 'foo|mailto:x', [ E ... ], 'foo.com' ]\n      # 5) other nodes containing text and url start: OE<39>Malley|http://foo.com\n      #   -> [ 'O', [ E ... ], 'Malley', '|http://foo.com' ]\n      # ... etc.\n\n      # anything before the url is part of the text.\n      # anything after it is part of the url.\n      # the url text node itself may contain parts of both.\n\n      if (my ($url_index, $text_part, $url_part) =\n        # grep is no good here; we want to bail out immediately so that we can\n        # use $1, $2, etc. without having to do the match twice.\n        sub {\n          for (2..$#$ell) {\n            next if ref $ell->[$_];\n            next unless $ell->[$_] =~ m/^(?:([^|]*)\\|)?(\\w+:[^:\\s]\\S*)$/s;\n            return ($_, $1, $2);\n          }\n          return;\n        }->()\n      ) {\n        $ell->[1]{'type'} = 'url';\n\n        my @text = @{$ell}[2..$url_index-1];\n        push @text, $text_part if defined $text_part;\n\n        my @url  = @{$ell}[$url_index+1..$#$ell];\n        unshift @url, $url_part;\n\n        unless (@text) {\n          $ell->[1]{'content-implicit'} = 'yes';\n          @text = @url;\n        }\n\n        $ell->[1]{to} = Pod::Simple::LinkSection->new(\n          @url == 1\n          ? $url[0]\n          : [ '', {}, @url ],\n        );\n\n        splice @$ell, 2, $#$ell, @text;\n\n        next;\n      }\n      \n      # Cat"..., 4096) = 4096
22042 read(6, "f($ell_content[$j] =~ m/^([^\\|]*)\\|(.*)$/s) {\n          my @link_text = ($1);   # might be 0-length\n          $ell_content[$j] = $2;  # might be 0-length\n\n          DEBUG > 3 and\n           print \"     FOUND a '|' in it.  Splitting into [$1] + [$2]\\n\";\n\n          unshift @link_text, splice @ell_content, 0, $j;\n            # leaving only things at J and after\n          @ell_content =  grep ref($_)||length($_), @ell_content ;\n          $link_text   = [grep ref($_)||length($_), @link_text  ];\n          DEBUG > 3 and printf\n           \"  So link text is %s\\n  and remaining ell content is %s\\n\",\n            pretty($link_text), pretty(@ell_content);\n          last;\n        }\n      }\n      \n      \n      # Now look for the \"/\" -- only in CHILDREN (not all underlings!)\n      # And afterward, anything left in @ell_content will be the raw name\n      # Like L<Foo::Bar/Object Methods>\n      my $section_name;  # set to arrayref if found\n      DEBUG > 3 and print \"  Peering at L-content for a '/' ...\\n\";\n      for(my $j = 0; $j < @ell_content; ++$j) {\n        next if ref $ell_content[$j];\n        DEBUG > 3 and\n         print \"    Peering at L-content text bit \\\"$ell_content[$j]\\\" for a '/'.\\n\";\n\n        if($ell_content[$j] =~ m/^([^\\/]*)\\/(.*)$/s) {\n          my @section_name = ($2); # might be 0-length\n          $ell_content[$j] =  $1;  # might be 0-length\n\n          DEBUG > 3 and\n           print \"     FOUND a '/' in it.\",\n             \"  Splitting to page [...$1] + section [$2...]\\n\";\n\n          push @section_name, splice @ell_content, 1+$j;\n            # leaving only things before and including J\n          \n          @ell_content  = grep ref($_)||length($_), @ell_content  ;\n          @section_name = grep ref($_)||length($_), @section_name ;\n\n          # Turn L<.../\"foo\"> into L<.../foo>\n          if(@section_name\n            and !ref($section_name[0]) and !ref($section_name[-1])\n            and $section_name[ 0] =~ m/^\\\"/s\n            and $section_name[-1] =~ m/\\\"$/s\n            and !( # catch weird degenerate case of L<\"> "..., 4096) = 4096
22042 brk(0x8383000)                    = 0x8383000
22042 read(6, "       $ell->[1]{'type'}    = 'man';\n        DEBUG > 3 and print \"Considering this ($ell_content[0]) a man link.\\n\";\n      } else {\n        $ell->[1]{'type'}    = 'pod';\n        DEBUG > 3 and print \"Considering this a pod link (not man or url).\\n\";\n      }\n\n      if( defined $section_name ) {\n        $ell->[1]{'section'} = Pod::Simple::LinkSection->new(\n          ['', {}, @$section_name]\n        );\n        DEBUG > 3 and print \"L-section content: \", pretty($ell->[1]{'section'}), \"\\n\";\n      }\n\n      if( @ell_content ) {\n        $ell->[1]{'to'} = Pod::Simple::LinkSection->new(\n          ['', {}, @ell_content]\n        );\n        DEBUG > 3 and print \"L-to content: \", pretty($ell->[1]{'to'}), \"\\n\";\n      }\n      \n      # And update children to be the link-text:\n      @$ell = (@$ell[0,1], defined($link_text) ? splice(@$link_text) : '');\n      \n      DEBUG > 2 and print \"End of L-parsing for this node $treelet->[$i]\\n\";\n\n      unshift @stack, $treelet->[$i]; # might as well recurse\n    }\n  }\n\n  return;\n}\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\nsub _treat_Es {\n  my($self,@stack) = @_;\n\n  my($i, $treelet, $content, $replacer, $charnum);\n  my $start_line = $stack[0][1]{'start_line'};\n\n  # A recursive algorithm implemented iteratively!  Whee!\n\n\n  # Has frightening side effects on L nodes' attributes.\n\n  #my @ells_to_tweak;\n\n  while($treelet = shift @stack) {\n    for(my $i = 2; $i < @$treelet; ++$i) { # iterate over children\n      next unless ref $treelet->[$i];  # text nodes are uninteresting\n      if($treelet->[$i][0] eq 'L') {\n        # SPECIAL STUFF for semi-processed L<>'s\n        \n        my $thing;\n        foreach my $attrname ('section', 'to') {        \n          if(defined($thing = $treelet->[$i][1]{$attrname}) and ref $thing) {\n            unshift @stack, $thing;\n            DEBUG > 2 and print \"  Enqueuing \",\n             pretty( $treelet->[$i][1]{$attrname} ),\n             \" as an attribute value to tweak.\\n\";\n          }\n        }\n        \n        unshift @stack, $treelet-"..., 4096) = 4096
22042 read(6, "hange_S_to_nbsp($treelet,0) if $self->{'nbsp_for_S'};\n\n  # TODO: or a change_nbsp_to_S\n  #  Normalizing nbsp's to S is harder: for each text node, make S content\n  #  out of anything matching m/([^ \\xA0]*(?:\\xA0+[^ \\xA0]*)+)/\n\n\n  return;\n}\n\n\nsub _change_S_to_nbsp { #  a recursive function\n  # Sanely assumes that the top node in the excursion won't be an S node.\n  my($treelet, $in_s) = @_;\n  \n  my $is_s = ('S' eq $treelet->[0]);\n  $in_s ||= $is_s; # So in_s is on either by this being an S element,\n                   #  or by an ancestor being an S element.\n\n  for(my $i = 2; $i < @$treelet; ++$i) {\n    if(ref $treelet->[$i]) {\n      if( _change_S_to_nbsp( $treelet->[$i], $in_s ) ) {\n        my $to_pull_up = $treelet->[$i];\n        splice @$to_pull_up,0,2;   # ...leaving just its content\n        splice @$treelet, $i, 1, @$to_pull_up;  # Pull up content\n        $i +=  @$to_pull_up - 1;   # Make $i skip the pulled-up stuff\n      }\n    } else {\n      $treelet->[$i] =~ s/\\s/\\xA0/g if ASCII and $in_s;\n       # (If not in ASCIIland, we can't assume that \\xA0 == nbsp.)\n       \n       # Note that if you apply nbsp_for_S to text, and so turn\n       # \"foo S<bar baz> quux\" into \"foo bar&#160;faz quux\", you\n       # end up with something that fails to say \"and don't hyphenate\n       # any part of 'bar baz'\".  However, hyphenation is such a vexing\n       # problem anyway, that most Pod renderers just don't render it\n       # at all.  But if you do want to implement hyphenation, I guess\n       # that you'd better have nbsp_for_S off.\n    }\n  }\n\n  return $is_s;\n}\n\n#-----------------------------------------------------------------------------\n\nsub _accessorize {  # A simple-minded method-maker\n  no strict 'refs';\n  foreach my $attrname (@_) {\n    next if $attrname =~ m/::/; # a hack\n    *{caller() . '::' . $attrname} = sub {\n      use strict;\n      $Carp::CarpLevel = 1,  Carp::croak(\n       \"Accessor usage: \\$obj->$attrname() or \\$obj->$attrname(\\$new_value)\"\n      ) unless (@_ == 1 or @_ == 2) and ref $_[0];\n      (@_ == 1) ?  $_"..., 4096) = 4096
22042 read(6, "\", $parser->output_string(),\n      \" = $parser->{'output_string'}\\n\";\n\n    $parser->hide_line_numbers(1);\n    $mutor->($parser) if $mutor;\n    $parser->parse_string_document( shift( @_ ) );\n    # use Data::Dumper; print Dumper($parser), \"\\n\";\n  }\n\n  return @out;\n}\n\n\n\n#-----------------------------------------------------------------------------\n1;\n__END__\n\nTODO:\nA start_formatting_code and end_formatting_code methods, which in the\nbase class call start_L, end_L, start_C, end_C, etc., if they are\ndefined.\n\nhave the POD FORMATTING ERRORS section note the localtime, and the\nversion of Pod::Simple.\n\noption to delete all E<shy>s?\noption to scream if under-0x20 literals are found in the input, or\nunder-E<32> E codes are found in the tree. And ditto \\x7f-\\x9f\n\nOption to turn highbit characters into their compromised form? (applies\nto E parsing too)\n\nTODO: BOM/encoding things.\n\nTODO: ascii-compat things in the XML classes?\n\n", 4096) = 930
22042 _llseek(6, 49510, [49510], SEEK_SET) = 0
22042 _llseek(6, 0, [49510], SEEK_CUR)  = 0
22042 close(6)                          = 0
22042 read(5, "es} =~ /^(..)(..)$/) {\n        $$self{LQUOTE} = $1;\n        $$self{RQUOTE} = $2;\n    } else {\n        croak qq(Invalid quote specification \"$$self{opt_quotes}\");\n    }\n\n    # If requested, do something with the non-POD text.\n    $self->code_handler (\\&handle_code) if $$self{opt_code};\n\n    # Return the created object.\n    return $self;\n}\n\n##############################################################################\n# Core parsing\n##############################################################################\n\n# This is the glue that connects the code below with Pod::Simple itself.  The\n# goal is to convert the event stream coming from the POD parser into method\n# calls to handlers once the complete content of a tag has been seen.  Each\n# paragraph or POD command will have textual content associated with it, and\n# as soon as all of a paragraph or POD command has been seen, that content\n# will be passed in to the corresponding method for handling that type of\n# object.  The exceptions are handlers for lists, which have opening tag\n# handlers and closing tag handlers that will be called right away.\n#\n# The internal hash key PENDING is used to store the contents of a tag until\n# all of it has been seen.  It holds a stack of open tags, each one\n# represented by a tuple of the attributes hash for the tag and the contents\n# of the tag.\n\n# Add a block of text to the contents of the current node, formatting it\n# according to the current formatting instructions as we do.\nsub _handle_text {\n    my ($self, $text) = @_;\n    my $tag = $$self{PENDING}[-1];\n    $$tag[1] .= $text;\n}\n\n# Given an element name, get the corresponding method name.\nsub method_for_element {\n    my ($self, $element) = @_;\n    $element =~ tr/-/_/;\n    $element =~ tr/A-Z/a-z/;\n    $element =~ tr/_a-z0-9//cd;\n    return $element;\n}\n\n# Handle the start of a new element.  If cmd_element is defined, assume that\n# we need to collect the entire tree for this element before passing it to the\n# element method, and create a new tree into which we'll collect blocks "..., 4096) = 4096
22042 read(5, "self{opt_width} - $$self{MARGIN};\n    while (length > $width) {\n        if (s/^([^\\n]{0,$width})\\s+// || s/^([^\\n]{$width})//) {\n            $output .= $spaces . $1 . \"\\n\";\n        } else {\n            last;\n        }\n    }\n    $output .= $spaces . $_;\n    $output =~ s/\\s+$/\\n\\n/;\n    return $output;\n}\n\n# Reformat a paragraph of text for the current margin.  Takes the text to\n# reformat and returns the formatted text.\nsub reformat {\n    my $self = shift;\n    local $_ = shift;\n\n    # If we're trying to preserve two spaces after sentences, do some munging\n    # to support that.  Otherwise, smash all repeated whitespace.\n    if ($$self{opt_sentence}) {\n        s/ +$//mg;\n        s/\\.\\n/. \\n/g;\n        s/\\n/ /g;\n        s/   +/  /g;\n    } else {\n        s/\\s+/ /g;\n    }\n    return $self->wrap ($_);\n}\n\n# Output text to the output device.  Replace non-breaking spaces with spaces\n# and soft hyphens with nothing, and then try to fix the output encoding if\n# necessary to match the input encoding unless UTF-8 output is forced.  This\n# preserves the traditional pass-through behavior of Pod::Text.\nsub output {\n    my ($self, $text) = @_;\n    $text =~ tr/\\240\\255/ /d;\n    unless ($$self{opt_utf8} || $$self{CHECKED_ENCODING}) {\n        my $encoding = $$self{encoding} || '';\n        if ($encoding) {\n            eval { binmode ($$self{output_fh}, \":encoding($encoding)\") };\n        }\n        $$self{CHECKED_ENCODING} = 1;\n    }\n    print { $$self{output_fh} } $text;\n}\n\n# Output a block of code (something that isn't part of the POD text).  Called\n# by preprocess_paragraph only if we were given the code option.  Exists here\n# only so that it can be overridden by subclasses.\nsub output_code { $_[0]->output ($_[1]) }\n\n##############################################################################\n# Document initialization\n##############################################################################\n\n# Set up various things that have to be initialized on a per-document basis.\nsub start_document {\n    my $self = shift;\n    my $margin = "..., 4096) = 4096
22042 read(5, "em called without tag\";\n        return;\n    }\n    undef $$self{ITEM};\n\n    # Calculate the indentation and margin.  $fits is set to true if the tag\n    # will fit into the margin of the paragraph given our indentation level.\n    my $indent = $$self{INDENTS}[-1];\n    $indent = $$self{opt_indent} unless defined $indent;\n    my $margin = ' ' x $$self{opt_margin};\n    my $tag_length = length ($self->strip_format ($tag));\n    my $fits = ($$self{MARGIN} - $indent >= $tag_length + 1);\n\n    # If the tag doesn't fit, or if we have no associated text, print out the\n    # tag separately.  Otherwise, put the tag in the margin of the paragraph.\n    if (!$text || $text =~ /^\\s+$/ || !$fits) {\n        my $realindent = $$self{MARGIN};\n        $$self{MARGIN} = $indent;\n        my $output = $self->reformat ($tag);\n        $output =~ s/^$margin /$margin:/ if ($$self{opt_alt} && $indent > 0);\n        $output =~ s/\\n*$/\\n/;\n\n        # If the text is just whitespace, we have an empty item paragraph;\n        # this can result from =over/=item/=back without any intermixed\n        # paragraphs.  Insert some whitespace to keep the =item from merging\n        # into the next paragraph.\n        $output .= \"\\n\" if $text && $text =~ /^\\s*$/;\n\n        $self->output ($output);\n        $$self{MARGIN} = $realindent;\n        $self->output ($self->reformat ($text)) if ($text && $text =~ /\\S/);\n    } else {\n        my $space = ' ' x $indent;\n        $space =~ s/^$margin /$margin:/ if $$self{opt_alt};\n        $text = $self->reformat ($text);\n        $text =~ s/^$margin /$margin:/ if ($$self{opt_alt} && $indent > 0);\n        my $tagspace = ' ' x $tag_length;\n        $text =~ s/^($space)$tagspace/$1$tag/ or warn \"Bizarre space in item\";\n        $self->output ($text);\n    }\n}\n\n# Handle a basic block of text.  The only tricky thing here is that if there\n# is a pending item tag, we need to format this as an item paragraph.\nsub cmd_para {\n    my ($self, $attrs, $text) = @_;\n    $text =~ s/\\s+$/\\n/;\n    if (defined $$self{ITEM}) {\n        $self->item ($text "..., 4096) = 4096
22042 brk(0x83a4000)                    = 0x83a4000
22042 brk(0x83a3000)                    = 0x83a3000
22042 read(5, " $self->heading ($text, $$self{opt_indent} * 3 / 4 + 0.5, '-   ');\n}\n\n##############################################################################\n# List handling\n##############################################################################\n\n# Handle the beginning of an =over block.  Takes the type of the block as the\n# first argument, and then the attr hash.  This is called by the handlers for\n# the four different types of lists (bullet, number, text, and block).\nsub over_common_start {\n    my ($self, $attrs) = @_;\n    $self->item (\"\\n\\n\") if defined $$self{ITEM};\n\n    # Find the indentation level.\n    my $indent = $$attrs{indent};\n    unless (defined ($indent) && $indent =~ /^\\s*[-+]?\\d{1,4}\\s*$/) {\n        $indent = $$self{opt_indent};\n    }\n\n    # Add this to our stack of indents and increase our current margin.\n    push (@{ $$self{INDENTS} }, $$self{MARGIN});\n    $$self{MARGIN} += ($indent + 0);\n    return '';\n}\n\n# End an =over block.  Takes no options other than the class pointer.  Output\n# any pending items and then pop one level of indentation.\nsub over_common_end {\n    my ($self) = @_;\n    $self->item (\"\\n\\n\") if defined $$self{ITEM};\n    $$self{MARGIN} = pop @{ $$self{INDENTS} };\n    return '';\n}\n\n# Dispatch the start and end calls as appropriate.\nsub start_over_bullet { $_[0]->over_common_start ($_[1]) }\nsub start_over_number { $_[0]->over_common_start ($_[1]) }\nsub start_over_text   { $_[0]->over_common_start ($_[1]) }\nsub start_over_block  { $_[0]->over_common_start ($_[1]) }\nsub end_over_bullet { $_[0]->over_common_end }\nsub end_over_number { $_[0]->over_common_end }\nsub end_over_text   { $_[0]->over_common_end }\nsub end_over_block  { $_[0]->over_common_end }\n\n# The common handler for all item commands.  Takes the type of the item, the\n# attributes, and then the text of the item.\nsub item_common {\n    my ($self, $type, $attrs, $text) = @_;\n    $self->item if defined $$self{ITEM};\n\n    # Clean up the text.  We want to end up with two variables, one ($text)\n    # which contains any body text after "..., 4096) = 4096
22042 read(5, "   ( [\\'\\`\\\"] ) .* \\1                             # already quoted\n       | \\` .* \\'                                       # `quoted'\n       | \\$+ [\\#^]? \\S $index                           # special ($^Foo, $\")\n       | [\\$\\@%&*]+ \\#? [:\\'\\w]+ $index                 # plain var or func\n       | [\\$\\@%&*]* [:\\'\\w]+ (?: -> )? \\(\\s*[^\\s,]\\s*\\) # 0/1-arg func call\n       | [+-]? ( \\d[\\d.]* | \\.\\d+ ) (?: [eE][+-]?\\d+ )? # a number\n       | 0x [a-fA-F\\d]+                                 # a hex constant\n      )\n      \\s*\\z\n     }xo && return $text;\n\n    # If we didn't return, go ahead and quote the text.\n    return $$self{opt_alt}\n        ? \"``$text''\"\n        : \"$$self{LQUOTE}$text$$self{RQUOTE}\";\n}\n\n# Links reduce to the text that we're given, wrapped in angle brackets if it's\n# a URL.\nsub cmd_l {\n    my ($self, $attrs, $text) = @_;\n    if ($$attrs{type} eq 'url') {\n        if (not defined($$attrs{to}) or $$attrs{to} eq $text) {\n            return \"<$text>\";\n        } else {\n            return \"$text <$$attrs{to}>\";\n        }\n    } else {\n        return $text;\n    }\n}\n\n##############################################################################\n# Backwards compatibility\n##############################################################################\n\n# The old Pod::Text module did everything in a pod2text() function.  This\n# tries to provide the same interface for legacy applications.\nsub pod2text {\n    my @args;\n\n    # This is really ugly; I hate doing option parsing in the middle of a\n    # module.  But the old Pod::Text module supported passing flags to its\n    # entry function, so handle -a and -<number>.\n    while ($_[0] =~ /^-/) {\n        my $flag = shift;\n        if    ($flag eq '-a')       { push (@args, alt => 1)    }\n        elsif ($flag =~ /^-(\\d+)$/) { push (@args, width => $1) }\n        else {\n            unshift (@_, $flag);\n            last;\n        }\n    }\n\n    # Now that we know what arguments we're using, create the parser.\n    my $parser = Pod::Text->new (@args);\n\n    # If two arguments were given"..., 4096) = 4096
22042 read(5, "#########################\n# Module return value and documentation\n##############################################################################\n\n1;\n__END__\n\n=head1 NAME\n\nPod::Text - Convert POD data to formatted ASCII text\n\n=for stopwords\nalt stderr Allbery Sean Burke's Christiansen UTF-8 pre-Unicode utf8\n\n=head1 SYNOPSIS\n\n    use Pod::Text;\n    my $parser = Pod::Text->new (sentence => 0, width => 78);\n\n    # Read POD from STDIN and write to STDOUT.\n    $parser->parse_from_filehandle;\n\n    # Read POD from file.pod and write to file.txt.\n    $parser->parse_from_file ('file.pod', 'file.txt');\n\n=head1 DESCRIPTION\n\nPod::Text is a module that can convert documentation in the POD format (the\npreferred language for documenting Perl) into formatted ASCII.  It uses no\nspecial formatting controls or codes whatsoever, and its output is therefore\nsuitable for nearly any device.\n\nAs a derived class from Pod::Simple, Pod::Text supports the same methods and\ninterfaces.  See L<Pod::Simple> for all the details; briefly, one creates a\nnew parser with C<< Pod::Text->new() >> and then normally calls parse_file().\n\nnew() can take options, in the form of key/value pairs, that control the\nbehavior of the parser.  The currently recognized options are:\n\n=over 4\n\n=item alt\n\nIf set to a true value, selects an alternate output format that, among other\nthings, uses a different heading style and marks C<=item> entries with a\ncolon in the left margin.  Defaults to false.\n\n=item code\n\nIf set to a true value, the non-POD parts of the input file will be included\nin the output.  Useful for viewing code documented with POD blocks with the\nPOD rendered and the code left intact.\n\n=item indent\n\nThe number of spaces to indent regular text, and the default indentation for\nC<=over> blocks.  Defaults to 4.\n\n=item loose\n\nIf set to a true value, a blank line is printed after a C<=head1> heading.\nIf set to false (the default), no blank line is printed after C<=head1>,\nalthough one is still printed after C<=head2>.  This is the default because\nit's the expec"..., 4096) = 4096
22042 _llseek(5, 24733, [24733], SEEK_SET) = 0
22042 _llseek(5, 0, [24733], SEEK_CUR)  = 0
22042 close(5)                          = 0
22042 read(4, "ts{'-input'};\n        my $pathsep = ($^O =~ /^(?:dos|os2|MSWin32)$/i) ? ';'\n                            : (($^O eq 'MacOS' || $^O eq 'VMS') ? ',' :  ':');\n        my $pathspec = $opts{'-pathlist'} || $ENV{PATH} || $ENV{PERL5LIB};\n\n        my @paths = (ref $pathspec) ? @$pathspec : split($pathsep, $pathspec);\n        for my $dirname (@paths) {\n            $_ = File::Spec->catfile($dirname, $basename)  if length;\n            last if (-e $_) && ($opts{'-input'} = $_);\n        }\n    }\n\n    ## Now create a pod reader and constrain it to the desired sections.\n    my $parser = new Pod::Usage(USAGE_OPTIONS => \\%opts);\n    if ($opts{'-verbose'} == 0) {\n        $parser->select('(?:SYNOPSIS|USAGE)\\s*');\n    }\n    elsif ($opts{'-verbose'} == 1) {\n        my $opt_re = '(?i)' .\n                     '(?:OPTIONS|ARGUMENTS)' .\n                     '(?:\\s*(?:AND|\\/)\\s*(?:OPTIONS|ARGUMENTS))?';\n        $parser->select( '(?:SYNOPSIS|USAGE)\\s*', $opt_re, \"DESCRIPTION/$opt_re\" );\n    }\n    elsif ($opts{'-verbose'} >= 2 && $opts{'-verbose'} != 99) {\n        $parser->select('.*');\n    }\n    elsif ($opts{'-verbose'} == 99) {\n        my $sections = $opts{'-sections'};\n        $parser->select( (ref $sections) ? @$sections : $sections );\n        $opts{'-verbose'} = 1;\n    }\n\n    ## Now translate the pod document and then exit with the desired status\n    if (      !$opts{'-noperldoc'}\n         and  $opts{'-verbose'} >= 2\n         and  !ref($opts{'-input'})\n         and  $opts{'-output'} == \\*STDOUT )\n    {\n       ## spit out the entire PODs. Might as well invoke perldoc\n       my $progpath = File::Spec->catfile($Config{scriptdir}, 'perldoc');\n       print { $opts{'-output'} } ($opts{'-message'}, \"\\n\") if($opts{'-message'});\n       if(defined $opts{-input} && $opts{-input} =~ /^\\s*(\\S.*?)\\s*$/) {\n         # the perldocs back to 5.005 should all have -F\n\t # without -F there are warnings in -T scripts\n         system($progpath, '-F', $1);\n         if($?) {\n           # RT16091: fall back to more if perldoc failed\n           system(($Config{page"..., 4096) = 4096
22042 read(4, "ement) = @_;\n    if ($element eq 'head1') {\n        $self->{USAGE_HEADINGS} = [ $$self{PENDING}[-1][1] ];\n        if ($self->{USAGE_OPTIONS}->{-verbose} < 2) {\n            $$self{PENDING}[-1][1] =~ s/^\\s*SYNOPSIS\\s*$/USAGE/;\n        }\n    } elsif ($element =~ /^head(\\d+)$/ && $1) { # avoid 0\n        my $idx = $1 - 1;\n        $self->{USAGE_HEADINGS} = [] unless($self->{USAGE_HEADINGS});\n        $self->{USAGE_HEADINGS}->[$idx] = $$self{PENDING}[-1][1];\n    }\n    if ($element =~ /^head\\d+$/) {\n        $$self{USAGE_SKIPPING} = 1;\n        if (!$$self{USAGE_SELECT} || !@{ $$self{USAGE_SELECT} }) {\n            $$self{USAGE_SKIPPING} = 0;\n        } else {\n            my @headings = @{$$self{USAGE_HEADINGS}};\n            for my $section_spec ( @{$$self{USAGE_SELECT}} ) {\n                my $match = 1;\n                for (my $i = 0; $i < $Pod::Select::MAX_HEADING_LEVEL; ++$i) {\n                    $headings[$i] = '' unless defined $headings[$i];\n                    my $regex   = $section_spec->[$i];\n                    my $negated = ($regex =~ s/^\\!//);\n                    $match  &= ($negated ? ($headings[$i] !~ /${regex}/)\n                                         : ($headings[$i] =~ /${regex}/));\n                    last unless ($match);\n                } # end heading levels\n                if ($match) {\n                  $$self{USAGE_SKIPPING} = 0;\n                  last;\n                }\n            } # end sections\n        }\n\n        # Try to do some lowercasing instead of all-caps in headings, and use\n        # a colon to end all headings.\n        if($self->{USAGE_OPTIONS}->{-verbose} < 2) {\n            local $_ = $$self{PENDING}[-1][1];\n            s{([A-Z])([A-Z]+)}{((length($2) > 2) ? $1 : lc($1)) . lc($2)}ge;\n            s/\\s*$/:/  unless (/:\\s*$/);\n            $_ .= \"\\n\";\n            $$self{PENDING}[-1][1] = $_;\n        }\n    }\n    if ($$self{USAGE_SKIPPING} && $element !~ m/^over-/) {\n        pop @{ $$self{PENDING} };\n    } else {\n        $self->SUPER::_handle_element_end($element);\n    }\n}\n\n# required for P"..., 4096) = 3210
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 brk(0x83c4000)                    = 0x83c4000
22042 stat64("/etc/perl/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Select.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Select.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Select.pm", {st_mode=S_IFREG|0444, st_size=24072, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Select.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "#############################################################################\n# Pod/Select.pm -- function to select portions of POD docs\n#\n# Copyright (C) 1996-2000 by Bradford Appleton. All rights reserved.\n# This file is part of \"PodParser\". PodParser is free software;\n# you can redistribute it and/or modify it under the same terms\n# as Perl itself.\n#############################################################################\n\npackage Pod::Select;\nuse strict;\n\nuse vars qw($VERSION @ISA @EXPORT $MAX_HEADING_LEVEL %myData @section_headings @selected_sections);\n$VERSION = '1.36'; ## Current version of this package\nrequire  5.005;    ## requires this Perl version or later\n\n#############################################################################\n\n=head1 NAME\n\nPod::Select, podselect() - extract selected sections of POD from input\n\n=head1 SYNOPSIS\n\n    use Pod::Select;\n\n    ## Select all the POD sections for each file in @filelist\n    ## and print the result on standard output.\n    podselect(@filelist);\n\n    ## Same as above, but write to tmp.out\n    podselect({-output => \"tmp.out\"}, @filelist):\n\n    ## Select from the given filelist, only those POD sections that are\n    ## within a 1st level section named any of: NAME, SYNOPSIS, OPTIONS.\n    podselect({-sections => [\"NAME|SYNOPSIS\", \"OPTIONS\"]}, @filelist):\n\n    ## Select the \"DESCRIPTION\" section of the PODs from STDIN and write\n    ## the result to STDERR.\n    podselect({-output => \">&STDERR\", -sections => [\"DESCRIPTION\"]}, \\*STDIN);\n\nor\n\n    use Pod::Select;\n\n    ## Create a parser object for selecting POD sections from the input\n    $parser = new Pod::Select();\n\n    ## Select all the POD sections for each file in @filelist\n    ## and print the result to tmp.out.\n    $parser->parse_from_file(\"<&STDIN\", \"tmp.out\");\n\n    ## Select from the given filelist, only those POD sections that are\n    ## within a 1st level section named any of: NAME, SYNOPSIS, OPTIONS.\n    $parser->select(\"NAME|SYNOPSIS\", \"OPTIONS\");\n    for (@filelist) { $parser->parse_from_file($_); }\n"..., 4096) = 4096
22042 read(4, "ction of I<all> sections:\n\nC</Comments>\n\n=item *\n\nMatch all subsections of C<DESCRIPTION> I<except> for C<Comments>:\n\nC<DESCRIPTION/!Comments>\n\n=item *\n\nMatch the C<DESCRIPTION> section but do I<not> match any of its subsections:\n\nC<DESCRIPTION/!.+>\n\n=item *\n\nMatch all top level sections but none of their subsections:\n\nC</!.+>\n\n=back \n\n=begin _NOT_IMPLEMENTED_\n\n=head1 RANGE SPECIFICATIONS\n\nB<podselect()> and B<Pod::Select::select()> may be given one or more\n\"range specifications\" to restrict the text processed to only the\ndesired ranges of paragraphs in the desired set of sections. A range\nspecification is a string containing a single Perl-style regular\nexpression (a regex), or else two Perl-style regular expressions\n(regexs) separated by a \"..\" (Perl's \"range\" operator is \"..\").\nThe regexs in a range specification are delimited by forward slashes\n(\"/\").  If you need to use a forward slash literally within a regex you\ncan escape it with a backslash (\"\\/\").\n\nThe formal syntax of a range specification is:\n\n=over 4\n\n=item *\n\n/I<start-range-regex>/[../I<end-range-regex>/]\n\n=back\n\nWhere each the item inside square brackets (the \"..\" followed by the\nend-range-regex) is optional. Each \"range-regex\" is of the form:\n\n    =cmd-expr text-expr\n\nWhere I<cmd-expr> is intended to match the name of one or more POD\ncommands, and I<text-expr> is intended to match the paragraph text for\nthe command. If a range-regex is supposed to match a POD command, then\nthe first character of the regex (the one after the initial '/')\nabsolutely I<must> be a single '=' character; it may not be anything\nelse (not even a regex meta-character) if it is supposed to match\nagainst the name of a POD command.\n\nIf no I<=cmd-expr> is given then the text-expr will be matched against\nplain textblocks unless it is preceded by a space, in which case it is\nmatched against verbatim text-blocks. If no I<text-expr> is given then\nonly the command-portion of the paragraph is matched against.\n\nNote that these two expressions are each implicitly anchored. This\nmeans t"..., 4096) = 4096
22042 stat64("/etc/perl/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/Parser.pm", 0xbff09670) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Parser.pmc", 0xbff09700) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/Parser.pm", {st_mode=S_IFREG|0444, st_size=65428, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/Parser.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09448) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "#############################################################################\n# Pod/Parser.pm -- package which defines a base class for parsing POD docs.\n#\n# Copyright (C) 1996-2000 by Bradford Appleton. All rights reserved.\n# This file is part of \"PodParser\". PodParser is free software;\n# you can redistribute it and/or modify it under the same terms\n# as Perl itself.\n#############################################################################\n\npackage Pod::Parser;\nuse strict;\n\n## These \"variables\" are used as local \"glob aliases\" for performance\nuse vars qw($VERSION @ISA %myData %myOpts @input_stack);\n$VERSION = '1.37';  ## Current version of this package\nrequire  5.005;    ## requires this Perl version or later\n\n#############################################################################\n\n=head1 NAME\n\nPod::Parser - base class for creating POD filters and translators\n\n=head1 SYNOPSIS\n\n    use Pod::Parser;\n\n    package MyParser;\n    @ISA = qw(Pod::Parser);\n\n    sub command { \n        my ($parser, $command, $paragraph, $line_num) = @_;\n        ## Interpret the command and its text; sample actions might be:\n        if ($command eq 'head1') { ... }\n        elsif ($command eq 'head2') { ... }\n        ## ... other commands and their actions\n        my $out_fh = $parser->output_handle();\n        my $expansion = $parser->interpolate($paragraph, $line_num);\n        print $out_fh $expansion;\n    }\n\n    sub verbatim { \n        my ($parser, $paragraph, $line_num) = @_;\n        ## Format verbatim paragraph; sample actions might be:\n        my $out_fh = $parser->output_handle();\n        print $out_fh $paragraph;\n    }\n\n    sub textblock { \n        my ($parser, $paragraph, $line_num) = @_;\n        ## Translate/Format this block of text; sample actions might be:\n        my $out_fh = $parser->output_handle();\n        my $expansion = $parser->interpolate($paragraph, $line_num);\n        print $out_fh $expansion;\n    }\n\n    sub interior_sequence { \n        my ($parser, $seq_command, $seq_argument) = @_;\n        ## Expand an inter"..., 4096) = 4096
22042 read(5, "arser> and override your methods to store the\nintermediate results in memory somewhere for the B<end_pod()> method to\nprocess. You could use B<Pod::Parser> for several passes with an\nappropriate state variable to control the operation for each pass. If\nyour input source can't be reset to start at the beginning, you can\nstore it in some other structure as a string or an array and have that\nstructure implement a B<getline()> method (which is all that\nB<parse_from_filehandle()> uses to read input).\n\nFeel free to add any member data fields you need to keep track of things\nlike current font, indentation, horizontal or vertical position, or\nwhatever else you like. Be sure to read L<\"PRIVATE METHODS AND DATA\">\nto avoid name collisions.\n\nFor the most part, the B<Pod::Parser> base class should be able to\ndo most of the input parsing for you and leave you free to worry about\nhow to interpret the commands and translate the result.\n\nNote that all we have described here in this quick overview is the\nsimplest most straightforward use of B<Pod::Parser> to do stream-based\nparsing. It is also possible to use the B<Pod::Parser::parse_text> function\nto do more sophisticated tree-based parsing. See L<\"TREE-BASED PARSING\">.\n\n=head1 PARSING OPTIONS\n\nA I<parse-option> is simply a named option of B<Pod::Parser> with a\nvalue that corresponds to a certain specified behavior. These various\nbehaviors of B<Pod::Parser> may be enabled/disabled by setting\nor unsetting one or more I<parse-options> using the B<parseopts()> method.\nThe set of currently accepted parse-options is as follows:\n\n=over 3\n\n=item B<-want_nonPODs> (default: unset)\n\nNormally (by default) B<Pod::Parser> will only provide access to\nthe POD sections of the input. Input paragraphs that are not part\nof the POD-format documentation are not made available to the caller\n(not even using B<preprocess_paragraph()>). Setting this option to a\nnon-empty, non-zero value will allow B<preprocess_paragraph()> to see\nnon-POD sections of the input as well as POD sections. The B<cutting()>\nmet"..., 4096) = 4096
22042 stat64("/etc/perl/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Pod/InputObjects.pm", 0xbff09170) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/InputObjects.pmc", 0xbff09200) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/Pod/InputObjects.pm", {st_mode=S_IFREG|0444, st_size=27265, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/Pod/InputObjects.pm", O_RDONLY|O_LARGEFILE) = 6
22042 ioctl(6, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f48) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(6, 0, [0], SEEK_CUR)      = 0
22042 read(6, "#############################################################################\n# Pod/InputObjects.pm -- package which defines objects for input streams\n# and paragraphs and commands when parsing POD docs.\n#\n# Copyright (C) 1996-2000 by Bradford Appleton. All rights reserved.\n# This file is part of \"PodParser\". PodParser is free software;\n# you can redistribute it and/or modify it under the same terms\n# as Perl itself.\n#############################################################################\n\npackage Pod::InputObjects;\nuse strict;\n\nuse vars qw($VERSION);\n$VERSION = '1.31';  ## Current version of this package\nrequire  5.005;    ## requires this Perl version or later\n\n#############################################################################\n\n=head1 NAME\n\nPod::InputObjects - objects representing POD input paragraphs, commands, etc.\n\n=head1 SYNOPSIS\n\n    use Pod::InputObjects;\n\n=head1 REQUIRES\n\nperl5.004, Carp\n\n=head1 EXPORTS\n\nNothing.\n\n=head1 DESCRIPTION\n\nThis module defines some basic input objects used by B<Pod::Parser> when\nreading and parsing POD text from an input source. The following objects\nare defined:\n\n=over 4\n\n=begin __PRIVATE__\n\n=item package B<Pod::InputSource>\n\nAn object corresponding to a source of POD input text. It is mostly a\nwrapper around a filehandle or C<IO::Handle>-type object (or anything\nthat implements the C<getline()> method) which keeps track of some\nadditional information relevant to the parsing of PODs.\n\n=end __PRIVATE__\n\n=item package B<Pod::Paragraph>\n\nAn object corresponding to a paragraph of POD input text. It may be a\nplain paragraph, a verbatim paragraph, or a command paragraph (see\nL<perlpod>).\n\n=item package B<Pod::InteriorSequence>\n\nAn object corresponding to an interior sequence command from the POD\ninput text (see L<perlpod>).\n\n=item package B<Pod::ParseTree>\n\nAn object corresponding to a tree of parsed POD text. Each \"node\" in\na parse-tree (or I<ptree>) is either a text-string or a reference to\na B<Pod::InteriorSequence> object. The nodes appear in the parse-tree\nin th"..., 4096) = 4096
22042 read(6, "hash that is used to represent this object. Note that we default\n    ## certain values by specifying them *before* the arguments passed.\n    ## If they are in the argument list, they will override the defaults.\n    my $self = { -name        => '(unknown)',\n                 -handle      => undef,\n                 -was_cutting => 0,\n                 @_ };\n\n    ## Bless ourselves into the desired class and perform any initialization\n    bless $self, $class;\n    return $self;\n}\n\n##---------------------------------------------------------------------------\n\n=begin __PRIVATE__\n\n=head2 B<name()>\n\n        my $filename = $pod_input->name();\n        $pod_input->name($new_filename_to_use);\n\nThis method gets/sets the name of the input source (usually a filename).\nIf no argument is given, it returns a string containing the name of\nthe input source; otherwise it sets the name of the input source to the\ncontents of the given argument.\n\n=end __PRIVATE__\n\n=cut\n\nsub name {\n   (@_ > 1)  and  $_[0]->{'-name'} = $_[1];\n   return $_[0]->{'-name'};\n}\n\n## allow 'filename' as an alias for 'name'\n*filename = \\&name;\n\n##---------------------------------------------------------------------------\n\n=begin __PRIVATE__\n\n=head2 B<handle()>\n\n        my $handle = $pod_input->handle();\n\nReturns a reference to the handle object from which input is read (the\none used to contructed this input source object).\n\n=end __PRIVATE__\n\n=cut\n\nsub handle {\n   return $_[0]->{'-handle'};\n}\n\n##---------------------------------------------------------------------------\n\n=begin __PRIVATE__\n\n=head2 B<was_cutting()>\n\n        print \"Yes.\\n\" if ($pod_input->was_cutting());\n\nThe value of the C<cutting> state (that the B<cutting()> method would\nhave returned) immediately before any input was read from this input\nstream. After all input from this stream has been read, the C<cutting>\nstate is restored to this value.\n\n=end __PRIVATE__\n\n=cut\n\nsub was_cutting {\n   (@_ > 1)  and  $_[0]->{-was_cutting} = $_[1];\n   return $_[0]->{-was_cutting};\n}\n\n##-------------------------------"..., 4096) = 4096
22042 read(6, "n the argument list, they will override the defaults.\n    my $self = {\n          -name       => undef,\n          -text       => (@_ == 1) ? shift : undef,\n          -file       => '<unknown-file>',\n          -line       => 0,\n          -prefix     => '=',\n          -separator  => ' ',\n          -ptree => [],\n          @_\n    };\n\n    ## Bless ourselves into the desired class and perform any initialization\n    bless $self, $class;\n    return $self;\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_para-E<gt>B<cmd_name()>\n\n        my $para_cmd = $pod_para->cmd_name();\n\nIf this paragraph is a command paragraph, then this method will return \nthe name of the command (I<without> any leading C<=> prefix).\n\n=cut\n\nsub cmd_name {\n   (@_ > 1)  and  $_[0]->{'-name'} = $_[1];\n   return $_[0]->{'-name'};\n}\n\n## let name() be an alias for cmd_name()\n*name = \\&cmd_name;\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_para-E<gt>B<text()>\n\n        my $para_text = $pod_para->text();\n\nThis method will return the corresponding text of the paragraph.\n\n=cut\n\nsub text {\n   (@_ > 1)  and  $_[0]->{'-text'} = $_[1];\n   return $_[0]->{'-text'};\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_para-E<gt>B<raw_text()>\n\n        my $raw_pod_para = $pod_para->raw_text();\n\nThis method will return the I<raw> text of the POD paragraph, exactly\nas it appeared in the input.\n\n=cut\n\nsub raw_text {\n   return $_[0]->{'-text'}  unless (defined $_[0]->{'-name'});\n   return $_[0]->{'-prefix'} . $_[0]->{'-name'} .\n          $_[0]->{'-separator'} . $_[0]->{'-text'};\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_para-E<gt>B<cmd_prefix()>\n\n        my $prefix = $pod_para->cmd_prefix();\n\nIf this paragraph is a command paragraph, then this method will return \nthe prefix used to denote the command (which should be the string \"=\"\nor \"==\").\n\n=cut\n\nsub cmd_prefix {\n   return $_[0]->{'-prefix'"..., 4096) = 4096
22042 read(6, "---------------------------------------------------\n\n=head2 Pod::InteriorSequence-E<gt>B<new()>\n\n        my $pod_seq1 = Pod::InteriorSequence->new(-name => $cmd\n                                                  -ldelim => $delimiter);\n        my $pod_seq2 = new Pod::InteriorSequence(-name => $cmd,\n                                                 -ldelim => $delimiter);\n        my $pod_seq3 = new Pod::InteriorSequence(-name => $cmd,\n                                                 -ldelim => $delimiter,\n                                                 -file => $filename,\n                                                 -line => $line_number);\n\n        my $pod_seq4 = new Pod::InteriorSequence(-name => $cmd, $ptree);\n        my $pod_seq5 = new Pod::InteriorSequence($cmd, $ptree);\n\nThis is a class method that constructs a C<Pod::InteriorSequence> object\nand returns a reference to the new interior sequence object. It should\nbe given two keyword arguments.  The C<-ldelim> keyword indicates the\ncorresponding left-delimiter of the interior sequence (e.g. 'E<lt>').\nThe C<-name> keyword indicates the name of the corresponding interior\nsequence command, such as C<I> or C<B> or C<C>. The C<-file> and\nC<-line> keywords indicate the filename and line number corresponding\nto the beginning of the interior sequence. If the C<$ptree> argument is\ngiven, it must be the last argument, and it must be either string, or\nelse an array-ref suitable for passing to B<Pod::ParseTree::new> (or\nit may be a reference to a Pod::ParseTree object).\n\n=cut\n\nsub new {\n    ## Determine if we were called via an object-ref or a classname\n    my $this = shift;\n    my $class = ref($this) || $this;\n\n    ## See if first argument has no keyword\n    if (((@_ <= 2) or (@_ % 2)) and $_[0] !~ /^-\\w/) {\n       ## Yup - need an implicit '-name' before first parameter\n       unshift @_, '-name';\n    }\n\n    ## See if odd number of args\n    if ((@_ % 2) != 0) {\n       ## Yup - need an implicit '-ptree' before the last parameter\n       splice @_, $#_, 0, '-ptree';\n   "..., 4096) = 4096
22042 read(6, " undef;\n   my $ptree = $self->{'-ptree'};\n   for (@$ptree) {\n      next  unless (length  and  ref  and  ref ne 'SCALAR');\n      $_->_unset_child2parent_links()\n          if UNIVERSAL::isa($_, 'Pod::InteriorSequence');\n   }\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_seq-E<gt>B<prepend()>\n\n        $pod_seq->prepend($text);\n        $pod_seq1->prepend($pod_seq2);\n\nPrepends the given string or parse-tree or sequence object to the parse-tree\nof this interior sequence.\n\n=cut\n\nsub prepend {\n   my $self  = shift;\n   $self->{'-ptree'}->prepend(@_);\n   _set_child2parent_links($self, @_);\n   return $self;\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_seq-E<gt>B<append()>\n\n        $pod_seq->append($text);\n        $pod_seq1->append($pod_seq2);\n\nAppends the given string or parse-tree or sequence object to the parse-tree\nof this interior sequence.\n\n=cut\n\nsub append {\n   my $self = shift;\n   $self->{'-ptree'}->append(@_);\n   _set_child2parent_links($self, @_);\n   return $self;\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_seq-E<gt>B<nested()>\n\n        $outer_seq = $pod_seq->nested || print \"not nested\";\n\nIf this interior sequence is nested inside of another interior\nsequence, then the outer/parent sequence that contains it is\nreturned. Otherwise C<undef> is returned.\n\n=cut\n\nsub nested {\n   my $self = shift;\n  (@_ == 1)  and  $self->{'-parent_sequence'} = shift;\n   return  $self->{'-parent_sequence'} || undef;\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $pod_seq-E<gt>B<raw_text()>\n\n        my $seq_raw_text = $pod_seq->raw_text();\n\nThis method will return the I<raw> text of the POD interior sequence,\nexactly as it appeared in the input.\n\n=cut\n\nsub raw_text {\n   my $self = shift;\n   my $text = $self->{'-name'} . $self->{'-ldelim'};\n   for ( $self->{'-ptree'}->children ) {\n      $text .= (ref $_) ? $_->raw_text : $_;\n   }\n   $text .= $self->{'-r"..., 4096) = 4096
22042 read(6, "  || 0);\n   return (wantarray) ? @loc : join(':', @loc);\n}\n\n##---------------------------------------------------------------------------\n\n=head2 Pod::InteriorSequence::B<DESTROY()>\n\nThis method performs any necessary cleanup for the interior-sequence.\nIf you override this method then it is B<imperative> that you invoke\nthe parent method from within your own method, otherwise\nI<interior-sequence storage will not be reclaimed upon destruction!>\n\n=cut\n\nsub DESTROY {\n   ## We need to get rid of all child->parent pointers throughout the\n   ## tree so their reference counts will go to zero and they can be\n   ## garbage-collected\n   _unset_child2parent_links(@_);\n}\n\n##---------------------------------------------------------------------------\n\n#############################################################################\n\npackage Pod::ParseTree;\n\n##---------------------------------------------------------------------------\n\n=head1 B<Pod::ParseTree>\n\nThis object corresponds to a tree of parsed POD text. As POD text is\nscanned from left to right, it is parsed into an ordered list of\ntext-strings and B<Pod::InteriorSequence> objects (in order of\nappearance). A B<Pod::ParseTree> object corresponds to this list of\nstrings and sequences. Each interior sequence in the parse-tree may\nitself contain a parse-tree (since interior sequences may be nested).\n\n=cut\n\n##---------------------------------------------------------------------------\n\n=head2 Pod::ParseTree-E<gt>B<new()>\n\n        my $ptree1 = Pod::ParseTree->new;\n        my $ptree2 = new Pod::ParseTree;\n        my $ptree4 = Pod::ParseTree->new($array_ref);\n        my $ptree3 = new Pod::ParseTree($array_ref);\n\nThis is a class method that constructs a C<Pod::Parse_tree> object and\nreturns a reference to the new parse-tree. If a single-argument is given,\nit must be a reference to an array, and is used to initialize the root\n(top) of the parse tree.\n\n=cut\n\nsub new {\n    ## Determine if we were called via an object-ref or a classname\n    my $this = shift;\n    my $class = ref($this)"..., 4096) = 4096
22042 read(6, "e vars qw(@ptree);  ## an alias used for performance reasons\n\nsub prepend {\n   my $self = shift;\n   local *ptree = $self;\n   for (@_) {\n      next  unless length;\n      if (@ptree && !(ref $ptree[0]) && !(ref $_)) {\n         $ptree[0] = $_ . $ptree[0];\n      }\n      else {\n         unshift @ptree, $_;\n      }\n   }\n}\n\n##---------------------------------------------------------------------------\n\n=head2 $ptree-E<gt>B<append()>\n\nThis method appends the given text or parse-tree to the current parse-tree.\nIf the last item on the parse-tree is text and the argument is also text,\nthen the text is appended to the last item (not added as a separate string).\nOtherwise the argument is added as a new string or parse-tree I<after>\nthe current one.\n\n=cut\n\nsub append {\n   my $self = shift;\n   local *ptree = $self;\n   my $can_append = @ptree && !(ref $ptree[-1]);\n   for (@_) {\n      if (ref) {\n         push @ptree, $_;\n      }\n      elsif(!length) {\n         next;\n      }\n      elsif ($can_append) {\n         $ptree[-1] .= $_;\n      }\n      else {\n         push @ptree, $_;\n      }\n   }\n}\n\n=head2 $ptree-E<gt>B<raw_text()>\n\n        my $ptree_raw_text = $ptree->raw_text();\n\nThis method will return the I<raw> text of the POD parse-tree\nexactly as it appeared in the input.\n\n=cut\n\nsub raw_text {\n   my $self = shift;\n   my $text = '';\n   for ( @$self ) {\n      $text .= (ref $_) ? $_->raw_text : $_;\n   }\n   return $text;\n}\n\n##---------------------------------------------------------------------------\n\n## Private routines to set/unset child->parent links\n\nsub _unset_child2parent_links {\n   my $self = shift;\n   local *ptree = $self;\n   for (@ptree) {\n       next  unless (defined and length  and  ref  and  ref ne 'SCALAR');\n       $_->_unset_child2parent_links()\n           if UNIVERSAL::isa($_, 'Pod::InteriorSequence');\n   }\n}\n\nsub _set_child2parent_links {\n    ## nothing to do, Pod::ParseTrees cant have parent pointers\n}\n\n=head2 Pod::ParseTree::B<DESTROY()>\n\nThis method performs any necessary cleanup for the parse-tree.\nIf you override thi"..., 4096) = 2689
22042 brk(0x83e5000)                    = 0x83e5000
22042 read(6, "", 4096)                 = 0
22042 close(6)                          = 0
22042 read(5, "ragraph (denoted by a line beginning with\n\"=\") is encountered. When such a POD directive is seen in the input,\nthis method is called and is passed:\n\n=over 3\n\n=item C<$cmd>\n\nthe name of the command for this POD paragraph\n\n=item C<$text>\n\nthe paragraph text for the given POD paragraph command.\n\n=item C<$line_num>\n\nthe line-number of the beginning of the paragraph\n\n=item C<$pod_para>\n\na reference to a C<Pod::Paragraph> object which contains further\ninformation about the paragraph command (see L<Pod::InputObjects>\nfor details).\n\n=back\n\nB<Note> that this method I<is> called for C<=pod> paragraphs.\n\nThe base class implementation of this method simply treats the raw POD\ncommand as normal block of paragraph text (invoking the B<textblock()>\nmethod with the command paragraph).\n\n=cut\n\nsub command {\n    my ($self, $cmd, $text, $line_num, $pod_para)  = @_;\n    ## Just treat this like a textblock\n    $self->textblock($pod_para->raw_text(), $line_num, $pod_para);\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<verbatim()>\n\n            $parser->verbatim($text,$line_num,$pod_para);\n\nThis method may be overridden by subclasses to take the appropriate\naction when a block of verbatim text is encountered. It is passed the\nfollowing parameters:\n\n=over 3\n\n=item C<$text>\n\nthe block of text for the verbatim paragraph\n\n=item C<$line_num>\n\nthe line-number of the beginning of the paragraph\n\n=item C<$pod_para>\n\na reference to a C<Pod::Paragraph> object which contains further\ninformation about the paragraph (see L<Pod::InputObjects>\nfor details).\n\n=back\n\nThe base class implementation of this method simply prints the textblock\n(unmodified) to the output filehandle.\n\n=cut\n\nsub verbatim {\n    my ($self, $text, $line_num, $pod_para) = @_;\n    my $out_fh = $self->{_OUTPUT};\n    print $out_fh $text;\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<textblock()>\n\n            $parser->textblock($text,$line_num,$pod_para);\n\nThis method may be overridden by subclasses "..., 4096) = 4096
22042 read(5, "putObjects> for details if you need to access this\nadditional information.\n\nSubclass implementations of this method may wish to invoke the \nB<nested()> method of C<$pod_seq> to see if it is nested inside\nsome other interior-sequence (and if so, which kind).\n\nThe base class implementation of the B<interior_sequence()> method\nsimply returns the raw text of the interior sequence (as it occurred\nin the input) to the caller.\n\n=cut\n\nsub interior_sequence {\n    my ($self, $seq_cmd, $seq_arg, $pod_seq) = @_;\n    ## Just return the raw text of the interior sequence\n    return  $pod_seq->raw_text();\n}\n\n#############################################################################\n\n=head1 OPTIONAL SUBROUTINE/METHOD OVERRIDES\n\nB<Pod::Parser> provides several methods which subclasses may want to override\nto perform any special pre/post-processing. These methods do I<not> have to\nbe overridden, but it may be useful for subclasses to take advantage of them.\n\n=cut\n\n##---------------------------------------------------------------------------\n\n=head1 B<new()>\n\n            my $parser = Pod::Parser->new();\n\nThis is the constructor for B<Pod::Parser> and its subclasses. You\nI<do not> need to override this method! It is capable of constructing\nsubclass objects as well as base class objects, provided you use\nany of the following constructor invocation styles:\n\n    my $parser1 = MyParser->new();\n    my $parser2 = new MyParser();\n    my $parser3 = $parser2->new();\n\nwhere C<MyParser> is some subclass of B<Pod::Parser>.\n\nUsing the syntax C<MyParser::new()> to invoke the constructor is I<not>\nrecommended, but if you insist on being able to do this, then the\nsubclass I<will> need to override the B<new()> constructor method. If\nyou do override the constructor, you I<must> be sure to invoke the\nB<initialize()> method of the newly blessed object.\n\nUsing any of the above invocations, the first argument to the\nconstructor is always the corresponding package name (or object\nreference). No other arguments are required, but if desired, an\nassociativ"..., 4096) = 4096
22042 read(5, "invoked by B<parse_from_filehandle()> immediately I<before>\nprocessing input from a filehandle. The base class implementation does\nnothing, however, subclasses may override it to perform any per-file\ninitializations.\n\nNote that if multiple files are parsed for a single POD document\n(perhaps the result of some future C<=include> directive) this method\nis invoked for every file that is parsed. If you wish to perform certain\ninitializations once per document, then you should use B<begin_pod()>.\n\n=cut\n\nsub begin_input {\n    #my $self = shift;\n    #return;\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<end_input()>\n\n            $parser->end_input();\n\nThis method is invoked by B<parse_from_filehandle()> immediately I<after>\nprocessing input from a filehandle. The base class implementation does\nnothing, however, subclasses may override it to perform any per-file\ncleanup actions.\n\nPlease note that if multiple files are parsed for a single POD document\n(perhaps the result of some kind of C<=include> directive) this method\nis invoked for every file that is parsed. If you wish to perform certain\ncleanup actions once per document, then you should use B<end_pod()>.\n\n=cut\n\nsub end_input {\n    #my $self = shift;\n    #return;\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<end_pod()>\n\n            $parser->end_pod();\n\nThis method is invoked at the end of processing for each POD document\nthat is encountered in the input. Subclasses should override this method\nto perform any per-document finalization.\n\n=cut\n\nsub end_pod {\n    #my $self = shift;\n    #return;\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<preprocess_line()>\n\n          $textline = $parser->preprocess_line($text, $line_num);\n\nThis method should be overridden by subclasses that wish to perform\nany kind of preprocessing for each I<line> of input (I<before> it has\nbeen determined whether or not it is part of a POD paragraph). The\nparameter C<$"..., 4096) = 4096
22042 read(5, ">\nthe B<preprocess_paragraph()> method. After all (possibly preprocessed)\nlines in a paragraph have been assembled together and either it has been\ndetermined that the paragraph is part of the POD documentation from one\nof the selected sections or the C<-want_nonPODs> option is true,\nthen B<preprocess_paragraph()> is invoked.\n\nThe base class implementation of this method returns the given text.\n\n=cut\n\nsub preprocess_paragraph {\n    my ($self, $text, $line_num) = @_;\n    return  $text;\n}\n\n#############################################################################\n\n=head1 METHODS FOR PARSING AND PROCESSING\n\nB<Pod::Parser> provides several methods to process input text. These\nmethods typically won't need to be overridden (and in some cases they\ncan't be overridden), but subclasses may want to invoke them to exploit\ntheir functionality.\n\n=cut\n\n##---------------------------------------------------------------------------\n\n=head1 B<parse_text()>\n\n            $ptree1 = $parser->parse_text($text, $line_num);\n            $ptree2 = $parser->parse_text({%opts}, $text, $line_num);\n            $ptree3 = $parser->parse_text(\\%opts, $text, $line_num);\n\nThis method is useful if you need to perform your own interpolation \nof interior sequences and can't rely upon B<interpolate> to expand\nthem in simple bottom-up order.\n\nThe parameter C<$text> is a string or block of text to be parsed\nfor interior sequences; and the parameter C<$line_num> is the\nline number corresponding to the beginning of C<$text>.\n\nB<parse_text()> will parse the given text into a parse-tree of \"nodes.\"\nand interior-sequences.  Each \"node\" in the parse tree is either a\ntext-string, or a B<Pod::InteriorSequence>.  The result returned is a\nparse-tree of type B<Pod::ParseTree>. Please see L<Pod::InputObjects>\nfor more information about B<Pod::InteriorSequence> and B<Pod::ParseTree>.\n\nIf desired, an optional hash-ref may be specified as the first argument\nto customize certain aspects of the parse-tree that is created and\nreturned. The set of recognized option keywo"..., 4096) = 4096
22042 read(5, "f>|I<method-name>\n\nRather than returning a C<Pod::ParseTree>, pass the parse-tree as an\nargument to the referenced subroutine (or named method of the parser\nobject) and return the result instead of the parse-tree object.\n\nIf a subroutine reference was given, it is invoked as:\n\n  &$code_ref( $parser, $ptree )\n\nand if a method-name was given, it is invoked as:\n\n  $parser->method_name( $ptree )\n\nwhere C<$parser> is a reference to the parser object, and C<$ptree>\nis a reference to the parse-tree object.\n\n=back\n\n=cut\n\nsub parse_text {\n    my $self = shift;\n    local $_ = '';\n\n    ## Get options and set any defaults\n    my %opts = (ref $_[0]) ? %{ shift() } : ();\n    my $expand_seq   = $opts{'-expand_seq'}   || undef;\n    my $expand_text  = $opts{'-expand_text'}  || undef;\n    my $expand_ptree = $opts{'-expand_ptree'} || undef;\n\n    my $text = shift;\n    my $line = shift;\n    my $file = $self->input_file();\n    my $cmd  = \"\";\n\n    ## Convert method calls into closures, for our convenience\n    my $xseq_sub   = $expand_seq;\n    my $xtext_sub  = $expand_text;\n    my $xptree_sub = $expand_ptree;\n    if (defined $expand_seq  and  $expand_seq eq 'interior_sequence') {\n        ## If 'interior_sequence' is the method to use, we have to pass\n        ## more than just the sequence object, we also need to pass the\n        ## sequence name and text.\n        $xseq_sub = sub {\n            my ($sself, $iseq) = @_;\n            my $args = join('', $iseq->parse_tree->children);\n            return  $sself->interior_sequence($iseq->name, $args, $iseq);\n        };\n    }\n    ref $xseq_sub    or  $xseq_sub   = sub { shift()->$expand_seq(@_) };\n    ref $xtext_sub   or  $xtext_sub  = sub { shift()->$expand_text(@_) };\n    ref $xptree_sub  or  $xptree_sub = sub { shift()->$expand_ptree(@_) };\n\n    ## Keep track of the \"current\" interior sequence, and maintain a stack\n    ## of \"in progress\" sequences.\n    ##\n    ## NOTE that we push our own \"accumulator\" at the very beginning of the\n    ## stack. It's really a parse-tree, not a sequence; but it"..., 4096) = 4096
22042 read(5, " forget to \"expand\" it if that's what the caller wanted\n                $seq->append($expand_text ? &$xtext_sub($self,$_,$seq) : $_);\n                $_ .= $seq_end;\n            }\n            if (length $seq_end) {\n                ## End of current sequence, record terminating delimiter\n                $seq->rdelim($seq_end);\n                ## Pop it off the stack of \"in progress\" sequences\n                pop @seq_stack;\n                ## Append result to its parent in current parse tree\n                $seq_stack[-1]->append($expand_seq ? &$xseq_sub($self,$seq)\n                                                   : $seq);\n                ## Remember the current cmd-name and left-delimiter\n                if(@seq_stack > 1) {\n                    $cmd = $seq_stack[-1]->name;\n                    $ldelim = $seq_stack[-1]->ldelim;\n                    $rdelim = $seq_stack[-1]->rdelim;\n                } else {\n                    $cmd = $ldelim = $rdelim = '';\n                }\n            }\n        }\n        elsif (length) {\n            ## In the middle of a sequence, append this text to it, and\n            ## dont forget to \"expand\" it if that's what the caller wanted\n            $seq->append($expand_text ? &$xtext_sub($self,$_,$seq) : $_);\n        }\n        ## Keep track of line count\n        $line += s/\\r*\\n//;\n        ## Remember the \"current\" sequence\n        $seq = $seq_stack[-1];\n    }\n\n    ## Handle unterminated sequences\n    my $errorsub = (@seq_stack > 1) ? $self->errorsub() : undef;\n    while (@seq_stack > 1) {\n       ($cmd, $file, $line) = ($seq->name, $seq->file_line);\n       $ldelim  = $seq->ldelim;\n       ($rdelim = $ldelim) =~ tr/</>/;\n       $rdelim  =~ s/^(\\S+)(\\s*)$/$2$1/;\n       pop @seq_stack;\n       my $errmsg = \"*** ERROR: unterminated ${cmd}${ldelim}...${rdelim}\".\n                    \" at line $line in file $file\\n\";\n       (ref $errorsub) and &{$errorsub}($errmsg)\n           or (defined $errorsub) and $self->$errorsub($errmsg)\n               or  carp($errmsg);\n       $seq_stack[-1]->append($e"..., 4096) = 4096
22042 read(5, "_CUTTING} = 0 if $text =~ /^={1,2}\\S/;\n\n    ## Perform any desired preprocessing if we wanted it this early\n    $wantNonPods  and  $text = $self->preprocess_paragraph($text, $line_num);\n\n    ## Ignore up until next POD directive if we are cutting\n    return if $myData{_CUTTING};\n\n    ## Now we know this is block of text in a POD section!\n\n    ##-----------------------------------------------------------------\n    ## This is a hook (hack ;-) for Pod::Select to do its thing without\n    ## having to override methods, but also without Pod::Parser assuming\n    ## $self is an instance of Pod::Select (if the _SELECTED_SECTIONS\n    ## field exists then we assume there is an is_selected() method for\n    ## us to invoke (calling $self->can('is_selected') could verify this\n    ## but that is more overhead than I want to incur)\n    ##-----------------------------------------------------------------\n\n    ## Ignore this block if it isnt in one of the selected sections\n    if (exists $myData{_SELECTED_SECTIONS}) {\n        $self->is_selected($text)  or  return ($myData{_CUTTING} = 1);\n    }\n\n    ## If we havent already, perform any desired preprocessing and\n    ## then re-check the \"cutting\" state\n    unless ($wantNonPods) {\n       $text = $self->preprocess_paragraph($text, $line_num);\n       return 1  unless ((defined $text) and (length $text));\n       return 1  if ($myData{_CUTTING});\n    }\n\n    ## Look for one of the three types of paragraphs\n    my ($pfx, $cmd, $arg, $sep) = ('', '', '', '');\n    my $pod_para = undef;\n    if ($text =~ /^(={1,2})(?=\\S)/) {\n        ## Looks like a command paragraph. Capture the command prefix used\n        ## (\"=\" or \"==\"), as well as the command-name, its paragraph text,\n        ## and whatever sequence of characters was used to separate them\n        $pfx = $1;\n        $_ = substr($text, length $pfx);\n        ($cmd, $sep, $text) = split /(\\s+)/, $_, 2;\n        ## If this is a \"cut\" directive then we dont need to do anything\n        ## except return to \"cutting\" mode.\n        if ($cmd eq 'cut')"..., 4096) = 4096
22042 read(5, "-------------------------------------------------------\n\n=head1 B<parse_from_filehandle()>\n\n            $parser->parse_from_filehandle($in_fh,$out_fh);\n\nThis method takes an input filehandle (which is assumed to already be\nopened for reading) and reads the entire input stream looking for blocks\n(paragraphs) of POD documentation to be processed. If no first argument\nis given the default input filehandle C<STDIN> is used.\n\nThe C<$in_fh> parameter may be any object that provides a B<getline()>\nmethod to retrieve a single line of input text (hence, an appropriate\nwrapper object could be used to parse PODs from a single string or an\narray of strings).\n\nUsing C<$in_fh-E<gt>getline()>, input is read line-by-line and assembled\ninto paragraphs or \"blocks\" (which are separated by lines containing\nnothing but whitespace). For each block of POD documentation\nencountered it will invoke a method to parse the given paragraph.\n\nIf a second argument is given then it should correspond to a filehandle where\noutput should be sent (otherwise the default output filehandle is\nC<STDOUT> if no output filehandle is currently in use).\n\nB<NOTE:> For performance reasons, this method caches the input stream at\nthe top of the stack in a local variable. Any attempts by clients to\nchange the stack contents during processing when in the midst executing\nof this method I<will not affect> the input stream used by the current\ninvocation of this method.\n\nThis method does I<not> usually need to be overridden by subclasses.\n\n=cut\n\nsub parse_from_filehandle {\n    my $self = shift;\n    my %opts = (ref $_[0] eq 'HASH') ? %{ shift() } : ();\n    my ($in_fh, $out_fh) = @_;\n    $in_fh = \\*STDIN  unless ($in_fh);\n    local *myData = $self;  ## alias to avoid deref-ing overhead\n    local *myOpts = ($myData{_PARSEOPTS} ||= {});  ## get parse-options\n    local $_;\n\n    ## Put this stream at the top of the stack and do beginning-of-input\n    ## processing. NOTE that $in_fh might be reset during this process.\n    my $topstream = $self->_push_input_stream($in_fh, $ou"..., 4096) = 4096
22042 read(5, "dles.\n\n=item *\n\ncloses the input and output files.\n\n=back\n\nIf the special input filename \"-\" or \"<&STDIN\" is given then the STDIN\nfilehandle is used for input (and no open or close is performed). If no\ninput filename is specified then \"-\" is implied. Filehandle references,\nor objects that support the regular IO operations (like C<E<lt>$fhE<gt>>\nor C<$fh-<Egt>getline>) are also accepted; the handles must already be \nopened.\n\nIf a second argument is given then it should be the name of the desired\noutput file. If the special output filename \"-\" or \">&STDOUT\" is given\nthen the STDOUT filehandle is used for output (and no open or close is\nperformed). If the special output filename \">&STDERR\" is given then the\nSTDERR filehandle is used for output (and no open or close is\nperformed). If no output filehandle is currently in use and no output\nfilename is specified, then \"-\" is implied.\nAlternatively, filehandle references or objects that support the regular\nIO operations (like C<print>, e.g. L<IO::String>) are also accepted;\nthe object must already be opened.\n\nThis method does I<not> usually need to be overridden by subclasses.\n\n=cut\n\nsub parse_from_file {\n    my $self = shift;\n    my %opts = (ref $_[0] eq 'HASH') ? %{ shift() } : ();\n    my ($infile, $outfile) = @_;\n    my ($in_fh,  $out_fh);\n    if ($] < 5.006) {\n      ($in_fh,  $out_fh) = (gensym(), gensym());\n    }\n    my ($close_input, $close_output) = (0, 0);\n    local *myData = $self;\n    local *_;\n\n    ## Is $infile a filename or a (possibly implied) filehandle\n    if (defined $infile && ref $infile) {\n        if (ref($infile) =~ /^(SCALAR|ARRAY|HASH|CODE|REF)$/) {\n            croak \"Input from $1 reference not supported!\\n\";\n        }\n        ## Must be a filehandle-ref (or else assume its a ref to an object\n        ## that supports the common IO read operations).\n        $myData{_INFILE} = ${$infile};\n        $in_fh = $infile;\n    }\n    elsif (!defined($infile) || !length($infile) || ($infile eq '-')\n        || ($infile =~ /^<&(?:STDIN|0)$/i))\n    {\n        ## N"..., 4096) = 4096
22042 read(5, "($outfile =~ /^>&(STDERR|2)$/i) {\n        ## Not a filename, just a string implying STDERR\n        $myData{_OUTFILE} = '<standard error>';\n        $out_fh  = \\*STDERR;\n    }\n    else {\n        ## We have a filename, open it for writing\n        $myData{_OUTFILE} = $outfile;\n        (-d $outfile) and croak \"$outfile is a directory, not POD input!\\n\";\n        open($out_fh, \"> $outfile\")  or\n             croak \"Can't open $outfile for writing: $!\\n\";\n        $close_output = 1;\n    }\n\n    ## Whew! That was a lot of work to set up reasonably/robust behavior\n    ## in the case of a non-filename for reading and writing. Now we just\n    ## have to parse the input and close the handles when we're finished.\n    $self->parse_from_filehandle(\\%opts, $in_fh, $out_fh);\n\n    $close_input  and\n        close($in_fh) || croak \"Can't close $infile after reading: $!\\n\";\n    $close_output  and\n        close($out_fh) || croak \"Can't close $outfile after writing: $!\\n\";\n}\n\n#############################################################################\n\n=head1 ACCESSOR METHODS\n\nClients of B<Pod::Parser> should use the following methods to access\ninstance data fields:\n\n=cut\n\n##---------------------------------------------------------------------------\n\n=head1 B<errorsub()>\n\n            $parser->errorsub(\"method_name\");\n            $parser->errorsub(\\&warn_user);\n            $parser->errorsub(sub { print STDERR, @_ });\n\nSpecifies the method or subroutine to use when printing error messages\nabout POD syntax. The supplied method/subroutine I<must> return TRUE upon\nsuccessful printing of the message. If C<undef> is given, then the B<carp>\nbuiltin is used to issue error messages (this is the default behavior).\n\n            my $errorsub = $parser->errorsub()\n            my $errmsg = \"This is an error message!\\n\"\n            (ref $errorsub) and &{$errorsub}($errmsg)\n                or (defined $errorsub) and $parser->$errorsub($errmsg)\n                    or  carp($errmsg);\n\nReturns a method name, or else a reference to the user-supplied subroutin"..., 4096) = 4096
22042 read(5, "s\nare lost.\n\n            ## Reset all options to default \n            $parser->parseopts( { } );\n\nSee L<\"PARSING OPTIONS\"> for more information on the name and meaning of each\nparse-option currently recognized.\n\n=cut\n\nsub parseopts {\n   local *myData = shift;\n   local *myOpts = ($myData{_PARSEOPTS} ||= {});\n   return %myOpts  if (@_ == 0);\n   if (@_ == 1) {\n      local $_ = shift;\n      return  ref($_)  ?  $myData{_PARSEOPTS} = $_  :  $myOpts{$_};\n   }\n   my @newOpts = (%myOpts, @_);\n   $myData{_PARSEOPTS} = { @newOpts };\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<output_file()>\n\n            $fname = $parser->output_file();\n\nReturns the name of the output file being written.\n\n=cut\n\nsub output_file {\n   return $_[0]->{_OUTFILE};\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<output_handle()>\n\n            $fhandle = $parser->output_handle();\n\nReturns the output filehandle object.\n\n=cut\n\nsub output_handle {\n   return $_[0]->{_OUTPUT};\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<input_file()>\n\n            $fname = $parser->input_file();\n\nReturns the name of the input file being read.\n\n=cut\n\nsub input_file {\n   return $_[0]->{_INFILE};\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<input_handle()>\n\n            $fhandle = $parser->input_handle();\n\nReturns the current input filehandle object.\n\n=cut\n\nsub input_handle {\n   return $_[0]->{_INPUT};\n}\n\n##---------------------------------------------------------------------------\n\n=begin __PRIVATE__\n\n=head1 B<input_streams()>\n\n            $listref = $parser->input_streams();\n\nReturns a reference to an array which corresponds to the stack of all\nthe input streams that are currently in the middle of being parsed.\n\nWhile parsing an input stream, it is possible to invoke\nB<parse_from_file()> or B<parse_from_filehandle()> to parse a new input\nstream and then return to parsing the previous input stream"..., 4096) = 4096
22042 read(5, "--------------------------------------------------\n\n=begin _PRIVATE_\n\n=head1 B<_push_input_stream()>\n\n            $hashref = $parser->_push_input_stream($in_fh,$out_fh);\n\nThis method will push the given input stream on the input stack and\nperform any necessary beginning-of-document or beginning-of-file\nprocessing. The argument C<$in_fh> is the input stream filehandle to\npush, and C<$out_fh> is the corresponding output filehandle to use (if\nit is not given or is undefined, then the current output stream is used,\nwhich defaults to standard output if it doesnt exist yet).\n\nThe value returned will be reference to the hash-table that represents\nthe new top of the input stream stack. I<Please Note> that it is\npossible for this method to use default values for the input and output\nfile handles. If this happens, you will need to look at the C<INPUT>\nand C<OUTPUT> instance data members to determine their new values.\n\n=end _PRIVATE_\n\n=cut\n\nsub _push_input_stream {\n    my ($self, $in_fh, $out_fh) = @_;\n    local *myData = $self;\n\n    ## Initialize stuff for the entire document if this is *not*\n    ## an included file.\n    ##\n    ## NOTE: we need to be *very* careful when \"defaulting\" the output\n    ## filehandle. We only want to use a default value if this is the\n    ## beginning of the entire document (but *not* if this is an included\n    ## file).\n    unless (defined  $myData{_TOP_STREAM}) {\n        $out_fh  = \\*STDOUT  unless (defined $out_fh);\n        $myData{_CUTTING}       = 1;   ## current \"cutting\" state\n        $myData{_INPUT_STREAMS} = [];  ## stack of all input streams\n    }\n\n    ## Initialize input indicators\n    $myData{_OUTFILE} = '(unknown)'  unless (defined  $myData{_OUTFILE});\n    $myData{_OUTPUT}  = $out_fh      if (defined  $out_fh);\n    $in_fh            = \\*STDIN      unless (defined  $in_fh);\n    $myData{_INFILE}  = '(unknown)'  unless (defined  $myData{_INFILE});\n    $myData{_INPUT}   = $in_fh;\n    my $input_top     = $myData{_TOP_STREAM}\n                      = new Pod::InputSource(\n                 "..., 4096) = 4096
22042 read(5, "XML) then you may need to take the\ntree-based approach. Rather than doing everything in one pass and\ncalling the B<interpolate()> method to expand sequences into text, it\nmay be desirable to instead create a parse-tree using the B<parse_text()>\nmethod to return a tree-like structure which may contain an ordered\nlist of children (each of which may be a text-string, or a similar\ntree-like structure).\n\nPay special attention to L<\"METHODS FOR PARSING AND PROCESSING\"> and\nto the objects described in L<Pod::InputObjects>. The former describes\nthe gory details and parameters for how to customize and extend the\nparsing behavior of B<Pod::Parser>. B<Pod::InputObjects> provides\nseveral objects that may all be used interchangeably as parse-trees. The\nmost obvious one is the B<Pod::ParseTree> object. It defines the basic\ninterface and functionality that all things trying to be a POD parse-tree\nshould do. A B<Pod::ParseTree> is defined such that each \"node\" may be a\ntext-string, or a reference to another parse-tree.  Each B<Pod::Paragraph>\nobject and each B<Pod::InteriorSequence> object also supports the basic\nparse-tree interface.\n\nThe B<parse_text()> method takes a given paragraph of text, and\nreturns a parse-tree that contains one or more children, each of which\nmay be a text-string, or an InteriorSequence object. There are also\ncallback-options that may be passed to B<parse_text()> to customize\nthe way it expands or transforms interior-sequences, as well as the\nreturned result. These callbacks can be used to create a parse-tree\nwith custom-made objects (which may or may not support the parse-tree\ninterface, depending on how you choose to do it).\n\nIf you wish to turn an entire POD document into a parse-tree, that process\nis fairly straightforward. The B<parse_text()> method is the key to doing\nthis successfully. Every paragraph-callback (i.e. the polymorphic methods\nfor B<command()>, B<verbatim()>, and B<textblock()> paragraphs) takes\na B<Pod::Paragraph> object as an argument. Each paragraph object has a\nB<parse_tree()> me"..., 4096) = 4096
22042 read(5, "\n        my $self = shift;\n        $self->{'-ptree'} = new Pod::ParseTree;  ## initialize parse-tree\n    }\n\n    sub parse_tree {\n        ## convenience method to get/set the parse-tree for the entire POD\n        (@_ > 1)  and  $_[0]->{'-ptree'} = $_[1];\n        return $_[0]->{'-ptree'};\n    }\n\n    sub command { \n        my ($parser, $command, $paragraph, $line_num, $pod_para) = @_;\n        my $ptree = $parser->parse_text({<<options>>}, $paragraph, ...);\n        $pod_para->parse_tree( $ptree );\n        $parser->parse_tree()->append( $pod_para );\n    }\n\n    sub verbatim { \n        my ($parser, $paragraph, $line_num, $pod_para) = @_;\n        $parser->parse_tree()->append( $pod_para );\n    }\n\n    sub textblock { \n        my ($parser, $paragraph, $line_num, $pod_para) = @_;\n        my $ptree = $parser->parse_text({<<options>>}, $paragraph, ...);\n        $pod_para->parse_tree( $ptree );\n        $parser->parse_tree()->append( $pod_para );\n    }\n\n    ...\n\n    package main;\n    ...\n    my $parser = new MyPodParserTree2(...);\n    $parser->parse_from_file(...);\n    my $ptree = $parser->parse_tree;\n    ...\n\nNow you have the entire POD document as one great big parse-tree. You\ncan even use the B<-expand_seq> option to B<parse_text> to insert\nwhole different kinds of objects. Just don't expect B<Pod::Parser>\nto know what to do with them after that. That will need to be in your\ncode. Or, alternatively, you can insert any object you like so long as\nit conforms to the B<Pod::ParseTree> interface.\n\nOne could use this to create subclasses of B<Pod::Paragraphs> and\nB<Pod::InteriorSequences> for specific commands (or to create your own\ncustom node-types in the parse-tree) and add some kind of B<emit()>\nmethod to each custom node/subclass object in the tree. Then all you'd\nneed to do is recursively walk the tree in the desired order, processing\nthe children (most likely from left to right) by formatting them if\nthey are text-strings, or by calling their B<emit()> method if they\nare objects/references.\n\n=head1 CAVEATS\n\nPlease note that"..., 4096) = 3988
22042 read(5, "", 4096)                 = 0
22042 close(5)                          = 0
22042 read(4, "ADINGS} = [];\n        for (my $i = 0; $i < $MAX_HEADING_LEVEL; ++$i) {\n            $section_headings[$i] = '';\n        }\n    }\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<curr_headings()>\n\n            ($head1, $head2, $head3, ...) = $parser->curr_headings();\n            $head1 = $parser->curr_headings(1);\n\nThis method returns a list of the currently active section headings and\nsubheadings in the document being parsed. The list of headings returned\ncorresponds to the most recently parsed paragraph of the input.\n\nIf an argument is given, it must correspond to the desired section\nheading number, in which case only the specified section heading is\nreturned. If there is no current section heading at the specified\nlevel, then C<undef> is returned.\n\n=cut\n\nsub curr_headings {\n    my $self = shift;\n    $self->_init_headings()  unless (defined $self->{_SECTION_HEADINGS});\n    my @headings = @{ $self->{_SECTION_HEADINGS} };\n    return (@_ > 0  and  $_[0] =~ /^\\d+$/) ? $headings[$_[0] - 1] : @headings;\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<select()>\n\n            $parser->select($section_spec1,$section_spec2,...);\n\nThis method is used to select the particular sections and subsections of\nPOD documentation that are to be printed and/or processed. The existing\nset of selected sections is I<replaced> with the given set of sections.\nSee B<add_selection()> for adding to the current set of selected\nsections.\n\nEach of the C<$section_spec> arguments should be a section specification\nas described in L<\"SECTION SPECIFICATIONS\">.  The section specifications\nare parsed by this method and the resulting regular expressions are\nstored in the invoking object.\n\nIf no C<$section_spec> arguments are given, then the existing set of\nselected sections is cleared out (which means C<all> sections will be\nprocessed).\n\nThis method should I<not> normally be overridden by subclasses.\n\n=cut\n\nsub select {\n    my ($self, @sections) = @_;\n    local *myData = $"..., 4096) = 4096
22042 read(4, "ions are\nstored in the invoking object.\n\nThis method should I<not> normally be overridden by subclasses.\n\n=cut\n\nsub add_selection {\n    my $self = shift;\n    return $self->select('+', @_);\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<clear_selections()>\n\n            $parser->clear_selections();\n\nThis method takes no arguments, it has the exact same effect as invoking\n<select()> with no arguments.\n\n=cut\n\nsub clear_selections {\n    my $self = shift;\n    return $self->select();\n}\n\n##---------------------------------------------------------------------------\n\n=head1 B<match_section()>\n\n            $boolean = $parser->match_section($heading1,$heading2,...);\n\nReturns a value of true if the given section and subsection heading\ntitles match any of the currently selected section specifications in\neffect from prior calls to B<select()> and B<add_selection()> (or if\nthere are no explicitly selected/deselected sections).\n\nThe arguments C<$heading1>, C<$heading2>, etc. are the heading titles of\nthe corresponding sections, subsections, etc. to try and match.  If\nC<$headingN> is omitted then it defaults to the current corresponding\nsection heading title in the input.\n\nThis method should I<not> normally be overridden by subclasses.\n\n=cut\n\nsub match_section {\n    my $self = shift;\n    my (@headings) = @_;\n    local *myData = $self;\n\n    ## Return true if no restrictions were explicitly specified\n    my $selections = (exists $myData{_SELECTED_SECTIONS})\n                       ?  $myData{_SELECTED_SECTIONS}  :  undef;\n    return  1  unless ((defined $selections) && @{$selections});\n\n    ## Default any unspecified sections to the current one\n    my @current_headings = $self->curr_headings();\n    for (my $i = 0; $i < $MAX_HEADING_LEVEL; ++$i) {\n        (defined $headings[$i])  or  $headings[$i] = $current_headings[$i];\n    }\n\n    ## Look for a match against the specified section expressions\n    for my $section_spec ( @{$selections} ) {\n        ##-------------------------------------------"..., 4096) = 4096
22042 read(4, "ECTION_HEADINGS}->[$level - 1] = $heading;\n        ## Reset subsection headings of this one to empty\n        for (my $i = $level; $i < $MAX_HEADING_LEVEL; ++$i) {\n            $myData{_SECTION_HEADINGS}->[$i] = '';\n        }\n    }\n\n    return  $self->match_section();\n}\n\n#############################################################################\n\n=head1 EXPORTED FUNCTIONS\n\nThe following functions are exported by this module. Please note that\nthese are functions (not methods) and therefore C<do not> take an\nimplicit first argument.\n\n=cut\n\n##---------------------------------------------------------------------------\n\n=head1 B<podselect()>\n\n            podselect(\\%options,@filelist);\n\nB<podselect> will print the raw (untranslated) POD paragraphs of all\nPOD sections in the given input files specified by C<@filelist>\naccording to the given options.\n\nIf any argument to B<podselect> is a reference to a hash\n(associative array) then the values with the following keys are\nprocessed as follows:\n\n=over 4\n\n=item B<-output>\n\nA string corresponding to the desired output file (or \">&STDOUT\"\nor \">&STDERR\"). The default is to use standard output.\n\n=item B<-sections>\n\nA reference to an array of sections specifications (as described in\nL<\"SECTION SPECIFICATIONS\">) which indicate the desired set of POD\nsections and subsections to be selected from input. If no section\nspecifications are given, then all sections of the PODs are used.\n\n=begin _NOT_IMPLEMENTED_\n\n=item B<-ranges>\n\nA reference to an array of range specifications (as described in\nL<\"RANGE SPECIFICATIONS\">) which indicate the desired range of POD\nparagraphs to be selected from the desired input sections. If no range\nspecifications are given, then all paragraphs of the desired sections\nare used.\n\n=end _NOT_IMPLEMENTED_\n\n=back\n\nAll other arguments should correspond to the names of input files\ncontaining POD sections. A file name of \"-\" or \"<&STDIN\" will\nbe interpreted to mean standard input (which is the default if no\nfilenames are given).\n\n=cut \n\nsub podselect {\n    my(@argv"..., 4096) = 4096
22042 brk(0x8406000)                    = 0x8406000
22042 read(4, "re briefly discussed here. Determined hackers may obtain further\ninformation about them by reading the B<Pod::Select> source code.\n\nPrivate data fields are stored in the hash-object whose reference is\nreturned by the B<new()> constructor for this class. The names of all\nprivate methods and data-fields used by B<Pod::Select> begin with a\nprefix of \"_\" and match the regular expression C</^_\\w+$/>.\n\n=cut\n\n##---------------------------------------------------------------------------\n\n=begin _PRIVATE_\n\n=head1 B<_compile_section_spec()>\n\n            $listref = $parser->_compile_section_spec($section_spec);\n\nThis function (note it is a function and I<not> a method) takes a\nsection specification (as described in L<\"SECTION SPECIFICATIONS\">)\ngiven in C<$section_sepc>, and compiles it into a list of regular\nexpressions. If C<$section_spec> has no syntax errors, then a reference\nto the list (array) of corresponding regular expressions is returned;\notherwise C<undef> is returned and an error message is printed (using\nB<carp>) for each invalid regex.\n\n=end _PRIVATE_\n\n=cut\n\nsub _compile_section_spec {\n    my ($section_spec) = @_;\n    my (@regexs, $negated);\n\n    ## Compile the spec into a list of regexs\n    local $_ = $section_spec;\n    s{\\\\\\\\}{\\001}g;  ## handle escaped backward slashes\n    s{\\\\/}{\\002}g;   ## handle escaped forward slashes\n\n    ## Parse the regexs for the heading titles\n    @regexs = split(/\\//, $_, $MAX_HEADING_LEVEL);\n\n    ## Set default regex for ommitted levels\n    for (my $i = 0; $i < $MAX_HEADING_LEVEL; ++$i) {\n        $regexs[$i]  = '.*'  unless ((defined $regexs[$i])\n                                     && (length $regexs[$i]));\n    }\n    ## Modify the regexs as needed and validate their syntax\n    my $bad_regexs = 0;\n    for (@regexs) {\n        $_ .= '.+'  if ($_ eq '!');\n        s{\\001}{\\\\\\\\}g;       ## restore escaped backward slashes\n        s{\\002}{\\\\/}g;        ## restore escaped forward slashes\n        $negated = s/^\\!//;   ## check for negation\n        eval \"m{$_}\";         ## check regex syn"..., 4096) = 3592
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/feature.pm", 0xbff096e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/feature.pmc", 0xbff09770) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/feature.pm", {st_mode=S_IFREG|0444, st_size=5863, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/feature.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff094b8) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package feature;\n\nour $VERSION = '1.16';\n\n# (feature name) => (internal name, used in %^H)\nmy %feature = (\n    switch          => 'feature_switch',\n    say             => \"feature_say\",\n    state           => \"feature_state\",\n    unicode_strings => \"feature_unicode\",\n);\n\n# This gets set (for now) in $^H as well as in %^H,\n# for runtime speed of the uc/lc/ucfirst/lcfirst functions.\n# See HINT_UNI_8_BIT in perl.h.\nour $hint_uni8bit = 0x00000800;\n\n# NB. the latest bundle must be loaded by the -E switch (see toke.c)\n\nmy %feature_bundle = (\n    \"5.10\" => [qw(switch say state)],\n    \"5.11\" => [qw(switch say state unicode_strings)],\n    \"5.12\" => [qw(switch say state unicode_strings)],\n);\n\n# special case\n$feature_bundle{\"5.9.5\"} = $feature_bundle{\"5.10\"};\n\n# TODO:\n# - think about versioned features (use feature switch => 2)\n\n=head1 NAME\n\nfeature - Perl pragma to enable new features\n\n=head1 SYNOPSIS\n\n    use feature qw(switch say);\n    given ($foo) {\n\twhen (1)\t  { say \"\\$foo == 1\" }\n\twhen ([2,3])\t  { say \"\\$foo == 2 || \\$foo == 3\" }\n\twhen (/^a[bc]d$/) { say \"\\$foo eq 'abd' || \\$foo eq 'acd'\" }\n\twhen ($_ > 100)   { say \"\\$foo > 100\" }\n\tdefault\t\t  { say \"None of the above\" }\n    }\n\n    use feature ':5.10'; # loads all features available in perl 5.10\n\n=head1 DESCRIPTION\n\nIt is usually impossible to add new syntax to Perl without breaking\nsome existing programs. This pragma provides a way to minimize that\nrisk. New syntactic constructs, or new semantic meanings to older\nconstructs, can be enabled by C<use feature 'foo'>, and will be parsed\nonly when the appropriate feature pragma is in scope.\n\n=head2 Lexical effect\n\nLike other pragmas (C<use strict>, for example), features have a lexical\neffect. C<use feature qw(foo)> will only make the feature \"foo\" available\nfrom that point to the end of the enclosing block.\n\n    {\n        use feature 'say';\n        say \"say is available here\";\n    }\n    print \"But not here.\\n\";\n\n=head2 C<no feature>\n\nFeatures can also be turned off by using C<no feature \"foo\">. This too\nhas lexical effect"..., 4096) = 4096
22042 read(4, "portability warnings (see L<perlfunc/use>), you may prefer:\n\n    use 5.010;\n\nwith the same effect.\n\n=back\n\n=cut\n\nsub import {\n    my $class = shift;\n    if (@_ == 0) {\n\tcroak(\"No features specified\");\n    }\n    while (@_) {\n\tmy $name = shift(@_);\n\tif (substr($name, 0, 1) eq \":\") {\n\t    my $v = substr($name, 1);\n\t    if (!exists $feature_bundle{$v}) {\n\t\t$v =~ s/^([0-9]+)\\.([0-9]+).[0-9]+$/$1.$2/;\n\t\tif (!exists $feature_bundle{$v}) {\n\t\t    unknown_feature_bundle(substr($name, 1));\n\t\t}\n\t    }\n\t    unshift @_, @{$feature_bundle{$v}};\n\t    next;\n\t}\n\tif (!exists $feature{$name}) {\n\t    unknown_feature($name);\n\t}\n\t$^H{$feature{$name}} = 1;\n        $^H |= $hint_uni8bit if $name eq 'unicode_strings';\n    }\n}\n\nsub unimport {\n    my $class = shift;\n\n    # A bare C<no feature> should disable *all* features\n    if (!@_) {\n\tdelete @^H{ values(%feature) };\n        $^H &= ~ $hint_uni8bit;\n\treturn;\n    }\n\n    while (@_) {\n\tmy $name = shift;\n\tif (substr($name, 0, 1) eq \":\") {\n\t    my $v = substr($name, 1);\n\t    if (!exists $feature_bundle{$v}) {\n\t\t$v =~ s/^([0-9]+)\\.([0-9]+).[0-9]+$/$1.$2/;\n\t\tif (!exists $feature_bundle{$v}) {\n\t\t    unknown_feature_bundle(substr($name, 1));\n\t\t}\n\t    }\n\t    unshift @_, @{$feature_bundle{$v}};\n\t    next;\n\t}\n\tif (!exists($feature{$name})) {\n\t    unknown_feature($name);\n\t}\n\telse {\n\t    delete $^H{$feature{$name}};\n            $^H &= ~ $hint_uni8bit if $name eq 'unicode_strings';\n\t}\n    }\n}\n\nsub unknown_feature {\n    my $feature = shift;\n    croak(sprintf('Feature \"%s\" is not supported by Perl %vd',\n\t    $feature, $^V));\n}\n\nsub unknown_feature_bundle {\n    my $feature = shift;\n    croak(sprintf('Feature bundle \"%s\" is not supported by Perl %vd',\n\t    $feature, $^V));\n}\n\nsub croak {\n    require Carp;\n    Carp::croak(@_);\n}\n\n1;\n", 4096) = 1767
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/utf8.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/utf8.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/utf8.pm", {st_mode=S_IFREG|0444, st_size=7785, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/utf8.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package utf8;\n\n$utf8::hint_bits = 0x00800000;\n\nour $VERSION = '1.08';\n\nsub import {\n    $^H |= $utf8::hint_bits;\n    $enc{caller()} = $_[1] if $_[1];\n}\n\nsub unimport {\n    $^H &= ~$utf8::hint_bits;\n}\n\nsub AUTOLOAD {\n    require \"utf8_heavy.pl\";\n    goto &$AUTOLOAD if defined &$AUTOLOAD;\n    require Carp;\n    Carp::croak(\"Undefined subroutine $AUTOLOAD called\");\n}\n\n1;\n__END__\n\n=head1 NAME\n\nutf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code\n\n=head1 SYNOPSIS\n\n    use utf8;\n    no utf8;\n\n    # Convert the internal representation of a Perl scalar to/from UTF-8.\n\n    $num_octets = utf8::upgrade($string);\n    $success    = utf8::downgrade($string[, FAIL_OK]);\n\n    # Change each character of a Perl scalar to/from a series of\n    # characters that represent the UTF-8 bytes of each original character.\n\n    utf8::encode($string);  # \"\\x{100}\"  becomes \"\\xc4\\x80\"\n    utf8::decode($string);  # \"\\xc4\\x80\" becomes \"\\x{100}\"\n\n    $flag = utf8::is_utf8(STRING); # since Perl 5.8.1\n    $flag = utf8::valid(STRING);\n\n=head1 DESCRIPTION\n\nThe C<use utf8> pragma tells the Perl parser to allow UTF-8 in the\nprogram text in the current lexical scope (allow UTF-EBCDIC on EBCDIC based\nplatforms).  The C<no utf8> pragma tells Perl to switch back to treating\nthe source text as literal bytes in the current lexical scope.\n\nB<Do not use this pragma for anything else than telling Perl that your\nscript is written in UTF-8.> The utility functions described below are\ndirectly usable without C<use utf8;>.\n\nBecause it is not possible to reliably tell UTF-8 from native 8 bit\nencodings, you need either a Byte Order Mark at the beginning of your\nsource code, or C<use utf8;>, to instruct perl.\n\nWhen UTF-8 becomes the standard source format, this pragma will\neffectively become a no-op.  For convenience in what follows the term\nI<UTF-X> is used to refer to UTF-8 on ASCII and ISO Latin based\nplatforms and UTF-EBCDIC on EBCDIC based platforms.\n\nSee also the effects of the C<-C> switch and its cousin, the\nC<$ENV{PERL_UNICODE}>, in L<perlr"..., 4096) = 4096
22042 _llseek(4, 378, [378], SEEK_SET)  = 0
22042 _llseek(4, 0, [378], SEEK_CUR)    = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/open.pm", 0xbff09b70) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/open.pmc", 0xbff09c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/open.pm", {st_mode=S_IFREG|0444, st_size=7740, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/open.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09948) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package open;\nuse warnings;\n\nour $VERSION = '1.07';\n\nrequire 5.008001; # for PerlIO::get_layers()\n\nmy $locale_encoding;\n\nsub _get_encname {\n    return ($1, Encode::resolve_alias($1)) if $_[0] =~ /^:?encoding\\((.+)\\)$/;\n    return;\n}\n\nsub croak {\n    require Carp; goto &Carp::croak;\n}\n\nsub _drop_oldenc {\n    # If by the time we arrive here there already is at the top of the\n    # perlio layer stack an encoding identical to what we would like\n    # to push via this open pragma, we will pop away the old encoding\n    # (+utf8) so that we can push ourselves in place (this is easier\n    # than ignoring pushing ourselves because of the way how ${^OPEN}\n    # works).  So we are looking for something like\n    #\n    #   stdio encoding(xxx) utf8\n    #\n    # in the existing layer stack, and in the new stack chunk for\n    #\n    #   :encoding(xxx)\n    #\n    # If we find a match, we pop the old stack (once, since\n    # the utf8 is just a flag on the encoding layer)\n    my ($h, @new) = @_;\n    return unless @new >= 1 && $new[-1] =~ /^:encoding\\(.+\\)$/;\n    my @old = PerlIO::get_layers($h);\n    return unless @old >= 3 &&\n\t          $old[-1] eq 'utf8' &&\n                  $old[-2] =~ /^encoding\\(.+\\)$/;\n    require Encode;\n    my ($loname, $lcname) = _get_encname($old[-2]);\n    unless (defined $lcname) { # Should we trust get_layers()?\n\tcroak(\"open: Unknown encoding '$loname'\");\n    }\n    my ($voname, $vcname) = _get_encname($new[-1]);\n    unless (defined $vcname) {\n\tcroak(\"open: Unknown encoding '$voname'\");\n    }\n    if ($lcname eq $vcname) {\n\tbinmode($h, \":pop\"); # utf8 is part of the encoding layer\n    }\n}\n\nsub import {\n    my ($class,@args) = @_;\n    croak(\"open: needs explicit list of PerlIO layers\") unless @args;\n    my $std;\n    my ($in,$out) = split(/\\0/,(${^OPEN} || \"\\0\"), -1);\n    while (@args) {\n\tmy $type = shift(@args);\n\tmy $dscp;\n\tif ($type =~ /^:?(utf8|locale|encoding\\(.+\\))$/) {\n\t    $type = 'IO';\n\t    $dscp = \":$1\";\n\t} elsif ($type eq ':std') {\n\t    $std = 1;\n\t    next;\n\t} else {\n\t    $dscp = shift(@args) || '';\n\t"..., 4096) = 4096
22042 _llseek(4, 3618, [3618], SEEK_SET) = 0
22042 _llseek(4, 0, [3618], SEEK_CUR)   = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/PerlIO.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/PerlIO.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/PerlIO.pm", {st_mode=S_IFREG|0444, st_size=11122, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/PerlIO.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09438) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package PerlIO;\n\nour $VERSION = '1.06';\n\n# Map layer name to package that defines it\nour %alias;\n\nsub import\n{\n my $class = shift;\n while (@_)\n  {\n   my $layer = shift;\n   if (exists $alias{$layer})\n    {\n     $layer = $alias{$layer}\n    }\n   else\n    {\n     $layer = \"${class}::$layer\";\n    }\n   eval \"require $layer\";\n   warn $@ if $@;\n  }\n}\n\nsub F_UTF8 () { 0x8000 }\n\n1;\n__END__\n\n=head1 NAME\n\nPerlIO - On demand loader for PerlIO layers and root of PerlIO::* name space\n\n=head1 SYNOPSIS\n\n  open($fh,\"<:crlf\", \"my.txt\"); # support platform-native and CRLF text files\n\n  open($fh,\"<\",\"his.jpg\");      # portably open a binary file for reading\n  binmode($fh);\n\n  Shell:\n    PERLIO=perlio perl ....\n\n=head1 DESCRIPTION\n\nWhen an undefined layer 'foo' is encountered in an C<open> or\nC<binmode> layer specification then C code performs the equivalent of:\n\n  use PerlIO 'foo';\n\nThe perl code in PerlIO.pm then attempts to locate a layer by doing\n\n  require PerlIO::foo;\n\nOtherwise the C<PerlIO> package is a place holder for additional\nPerlIO related functions.\n\nThe following layers are currently defined:\n\n=over 4\n\n=item :unix\n\nLowest level layer which provides basic PerlIO operations in terms of\nUNIX/POSIX numeric file descriptor calls\n(open(), read(), write(), lseek(), close()).\n\n=item :stdio\n\nLayer which calls C<fread>, C<fwrite> and C<fseek>/C<ftell> etc.  Note\nthat as this is \"real\" stdio it will ignore any layers beneath it and\ngo straight to the operating system via the C library as usual.\n\n=item :perlio\n\nA from scratch implementation of buffering for PerlIO. Provides fast\naccess to the buffer for C<sv_gets> which implements perl's readline/E<lt>E<gt>\nand in general attempts to minimize data copying.\n\nC<:perlio> will insert a C<:unix> layer below itself to do low level IO.\n\n=item :crlf\n\nA layer that implements DOS/Windows like CRLF line endings.  On read\nconverts pairs of CR,LF to a single \"\\n\" newline character.  On write\nconverts each \"\\n\" to a CR,LF pair.  Note that this layer likes to be\none of its kind: it silently ignor"..., 4096) = 4096
22042 _llseek(4, 382, [382], SEEK_SET)  = 0
22042 _llseek(4, 0, [382], SEEK_CUR)    = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/PerlIO/encoding.pm", 0xbff09660) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/PerlIO/encoding.pmc", 0xbff096f0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/PerlIO/encoding.pm", {st_mode=S_IFREG|0444, st_size=1239, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/PerlIO/encoding.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09438) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package PerlIO::encoding;\n\nuse strict;\nour $VERSION = '0.12';\nour $DEBUG = 0;\n$DEBUG and warn __PACKAGE__, \" called by \", join(\", \", caller), \"\\n\";\n\n#\n# Equivalent of this is done in encoding.xs - do not uncomment.\n#\n# use Encode ();\n\nuse XSLoader ();\nXSLoader::load(__PACKAGE__, $VERSION);\n\nour $fallback =\n    Encode::PERLQQ()|Encode::WARN_ON_ERR()|Encode::STOP_AT_PARTIAL();\n\n1;\n__END__\n\n=head1 NAME\n\nPerlIO::encoding - encoding layer\n\n=head1 SYNOPSIS\n\n  use PerlIO::encoding;\n\n  open($f, \"<:encoding(foo)\", \"infoo\");\n  open($f, \">:encoding(bar)\", \"outbar\");\n\n  use Encode qw(:fallbacks);\n  $PerlIO::encoding::fallback = FB_PERLQQ;\n\n=head1 DESCRIPTION\n\nThis PerlIO layer opens a filehandle with a transparent encoding filter.\n\nOn input, it converts the bytes expected to be in the specified\ncharacter set and encoding to Perl string data (Unicode and\nPerl's internal Unicode encoding, UTF-8).  On output, it converts\nPerl string data into the specified character set and encoding.\n\nWhen the layer is pushed, the current value of C<$PerlIO::encoding::fallback>\nis saved and used as the CHECK argument when calling the Encode methods\nencode() and decode().\n\n=head1 SEE ALSO\n\nL<open>, L<Encode>, L<perlfunc/binmode>, L<perluniintro>\n\n=cut\n", 4096) = 1239
22042 _llseek(4, 390, [390], SEEK_SET)  = 0
22042 _llseek(4, 0, [390], SEEK_CUR)    = 0
22042 close(4)                          = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/PerlIO/encoding/encoding.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/PerlIO/encoding/encoding.so", {st_mode=S_IFREG|0555, st_size=22216, ...}) = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/PerlIO/encoding/encoding.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/5.12.4/i686-linux/auto/PerlIO/encoding/encoding.so", O_RDONLY|O_CLOEXEC) = 4
22042 read(4, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\320\36\0\0004\0\0\0\270R\0\0\0\0\0\0004\0 \0\6\0(\0\32\0\31\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\244M\0\0\244M\0\0\5\0\0\0\0\20\0\0\1\0\0\0\310N\0\0\310^\0\0\310^\0\0\350\2\0\0\360\2\0\0\6\0\0\0\0\20\0\0\2\0\0\0\334N\0\0\334^\0\0\334^\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\310N\0\0\310^\0\0\310^\0\0008\1\0\0008\1\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\344\0\0\0t\0\0\0\0\0\0\0\0\0\0\0\v\0\0\0\0\0\0\0p\0\0\0)\0\0\0R\0\0\0\0\0\0\0\"\0\0\0Y\0\0\0'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0\0\0\0\0\0\0o\0\0\0\0\0\0\0009\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0C\0\0\0K\0\0\0\0\0\0\0P\0\0\0\0\0\0\0\0\0\0\0<\0\0\0\37\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0F\0\0\0e\0\0\0\0\0\0\0006\0\0\0=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0d\0\0\0\23\0\0\0\0\0\0\0h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\0\0\0\0\0\0\0\0\0\0\0002\0\0\0O\0\0\0\0\0\0\0\5\0\0\0]\0\0\0\0\0\0\0n\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0", 512) = 512
22042 fstat64(4, {st_mode=S_IFREG|0555, st_size=22216, ...}) = 0
22042 mmap2(NULL, 25016, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0xb7209000
22042 mmap2(0xb720e000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x4) = 0xb720e000
22042 close(4)                          = 0
22042 mprotect(0xb720e000, 4096, PROT_READ) = 0
22042 stat64("/etc/perl/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode.pm", {st_mode=S_IFREG|0444, st_size=29731, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Encode.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f58) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "#\n# $Id: Encode.pm,v 2.39 2009/11/26 09:23:48 dankogai Exp $\n#\npackage Encode;\nuse strict;\nuse warnings;\nour $VERSION = sprintf \"%d.%02d\", q$Revision: 2.39 $ =~ /(\\d+)/g;\nsub DEBUG () { 0 }\nuse XSLoader ();\nXSLoader::load( __PACKAGE__, $VERSION );\n\nrequire Exporter;\nuse base qw/Exporter/;\n\n# Public, encouraged API is exported by default\n\nour @EXPORT = qw(\n  decode  decode_utf8  encode  encode_utf8 str2bytes bytes2str\n  encodings  find_encoding clone_encoding\n);\nour @FB_FLAGS = qw(\n  DIE_ON_ERR WARN_ON_ERR RETURN_ON_ERR LEAVE_SRC\n  PERLQQ HTMLCREF XMLCREF STOP_AT_PARTIAL\n);\nour @FB_CONSTS = qw(\n  FB_DEFAULT FB_CROAK FB_QUIET FB_WARN\n  FB_PERLQQ FB_HTMLCREF FB_XMLCREF\n);\nour @EXPORT_OK = (\n    qw(\n      _utf8_off _utf8_on define_encoding from_to is_16bit is_8bit\n      is_utf8 perlio_ok resolve_alias utf8_downgrade utf8_upgrade\n      ),\n    @FB_FLAGS, @FB_CONSTS,\n);\n\nour %EXPORT_TAGS = (\n    all          => [ @EXPORT,    @EXPORT_OK ],\n    default      => [ @EXPORT ],\n    fallbacks    => [ @FB_CONSTS ],\n    fallback_all => [ @FB_CONSTS, @FB_FLAGS ],\n);\n\n# Documentation moved after __END__ for speed - NI-S\n\nour $ON_EBCDIC = ( ord(\"A\") == 193 );\n\nuse Encode::Alias;\n\n# Make a %Encoding package variable to allow a certain amount of cheating\nour %Encoding;\nour %ExtModule;\nrequire Encode::Config;\n#  See\n#  https://bugzilla.redhat.com/show_bug.cgi?id=435505#c2\n#  to find why sig handers inside eval{} are disabled.\neval {\n    local $SIG{__DIE__};\n    local $SIG{__WARN__};\n    require Encode::ConfigLocal;\n};\n\nsub encodings {\n    my $class = shift;\n    my %enc;\n    if ( @_ and $_[0] eq \":all\" ) {\n        %enc = ( %Encoding, %ExtModule );\n    }\n    else {\n        %enc = %Encoding;\n        for my $mod ( map { m/::/o ? $_ : \"Encode::$_\" } @_ ) {\n            DEBUG and warn $mod;\n            for my $enc ( keys %ExtModule ) {\n                $ExtModule{$enc} eq $mod and $enc{$enc} = $mod;\n            }\n        }\n    }\n    return sort { lc $a cmp lc $b }\n      grep      { !/^(?:Internal|Unicode|Guess)$/o } keys %enc;\n}\n\nsub perlio_ok"..., 4096) = 4096
22042 stat64("/etc/perl/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/Alias.pm", 0xbff08c80) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/Alias.pmc", 0xbff08d10) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/Alias.pm", {st_mode=S_IFREG|0444, st_size=11735, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Encode/Alias.pm", O_RDONLY|O_LARGEFILE) = 5
22042 ioctl(5, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08a58) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(5, 0, [0], SEEK_CUR)      = 0
22042 read(5, "package Encode::Alias;\nuse strict;\nuse warnings;\nno warnings 'redefine';\nour $VERSION = do { my @r = ( q$Revision: 2.12 $ =~ /\\d+/g ); sprintf \"%d.\" . \"%02d\" x $#r, @r };\nsub DEBUG () { 0 }\n\nuse base qw(Exporter);\n\n# Public, encouraged API is exported by default\n\nour @EXPORT =\n  qw (\n  define_alias\n  find_alias\n);\n\nour @Alias;    # ordered matching list\nour %Alias;    # cached known aliases\n\nsub find_alias {\n    require Encode;\n    my $class = shift;\n    my $find  = shift;\n    unless ( exists $Alias{$find} ) {\n        $Alias{$find} = undef;    # Recursion guard\n        for ( my $i = 0 ; $i < @Alias ; $i += 2 ) {\n            my $alias = $Alias[$i];\n            my $val   = $Alias[ $i + 1 ];\n            my $new;\n            if ( ref($alias) eq 'Regexp' && $find =~ $alias ) {\n                DEBUG and warn \"eval $val\";\n                $new = eval $val;\n                DEBUG and $@ and warn \"$val, $@\";\n            }\n            elsif ( ref($alias) eq 'CODE' ) {\n                DEBUG and warn \"$alias\", \"->\", \"($find)\";\n                $new = $alias->($find);\n            }\n            elsif ( lc($find) eq lc($alias) ) {\n                $new = $val;\n            }\n            if ( defined($new) ) {\n                next if $new eq $find;    # avoid (direct) recursion on bugs\n                DEBUG and warn \"$alias, $new\";\n                my $enc =\n                  ( ref($new) ) ? $new : Encode::find_encoding($new);\n                if ($enc) {\n                    $Alias{$find} = $enc;\n                    last;\n                }\n            }\n        }\n\n        # case insensitive search when canonical is not in all lowercase\n        # RT ticket #7835\n        unless ( $Alias{$find} ) {\n            my $lcfind = lc($find);\n            for my $name ( keys %Encode::Encoding, keys %Encode::ExtModule )\n            {\n                $lcfind eq lc($name) or next;\n                $Alias{$find} = Encode::find_encoding($name);\n                DEBUG and warn \"$find => $name\";\n            }\n        }\n    }\n    if (DEBUG) {\n        my $nam"..., 4096) = 4096
22042 brk(0x8427000)                    = 0x8427000
22042 read(5, "UTF-?(16|32)-?BE$/i => '\"UTF-$1BE\"',\n        qr/^UTF-?(16|32)-?LE$/i => '\"UTF-$1LE\"',\n        qr/^UTF-?(16|32)$/i     => '\"UTF-$1\"',\n    );\n\n    # ASCII\n    define_alias( qr/^(?:US-?)ascii$/i       => '\"ascii\"' );\n    define_alias( 'C'                        => 'ascii' );\n    define_alias( qr/\\b(?:ISO[-_]?)?646(?:[-_]?US)?$/i => '\"ascii\"' );\n\n    # Allow variants of iso-8859-1 etc.\n    define_alias( qr/\\biso[-_]?(\\d+)[-_](\\d+)$/i => '\"iso-$1-$2\"' );\n\n    # At least HP-UX has these.\n    define_alias( qr/\\biso8859(\\d+)$/i => '\"iso-8859-$1\"' );\n\n    # More HP stuff.\n    define_alias(\n        qr/\\b(?:hp-)?(arabic|greek|hebrew|kana|roman|thai|turkish)8$/i =>\n          '\"${1}8\"' );\n\n    # The Official name of ASCII.\n    define_alias( qr/\\bANSI[-_]?X3\\.4[-_]?1968$/i => '\"ascii\"' );\n\n    # This is a font issue, not an encoding issue.\n    # (The currency symbol of the Latin 1 upper half\n    #  has been redefined as the euro symbol.)\n    define_alias( qr/^(.+)\\@euro$/i => '\"$1\"' );\n\n    define_alias( qr/\\b(?:iso[-_]?)?latin[-_]?(\\d+)$/i =>\n'defined $Encode::Alias::Latin2iso[$1] ? \"iso-8859-$Encode::Alias::Latin2iso[$1]\" : undef'\n    );\n\n    define_alias(\n        qr/\\bwin(latin[12]|cyrillic|baltic|greek|turkish|\n             hebrew|arabic|baltic|vietnamese)$/ix =>\n          '\"cp\" . $Encode::Alias::Winlatin2cp{lc($1)}'\n    );\n\n    # Common names for non-latin preferred MIME names\n    define_alias(\n        'ascii'    => 'US-ascii',\n        'cyrillic' => 'iso-8859-5',\n        'arabic'   => 'iso-8859-6',\n        'greek'    => 'iso-8859-7',\n        'hebrew'   => 'iso-8859-8',\n        'thai'     => 'iso-8859-11',\n    );\n    # RT #20781\n    define_alias(qr/\\btis-?620\\b/i  => '\"iso-8859-11\"');\n\n    # At least AIX has IBM-NNN (surprisingly...) instead of cpNNN.\n    # And Microsoft has their own naming (again, surprisingly).\n    # And windows-* is registered in IANA!\n    define_alias(\n        qr/\\b(?:cp|ibm|ms|windows)[-_ ]?(\\d{2,4})$/i => '\"cp$1\"' );\n\n    # Sometimes seen with a leading zero.\n    # define_alias( qr/\\bcp037\\b/i => '\""..., 4096) = 4096
22042 read(5, "' );\n        define_alias( qr/\\bbig5-?hk(?:scs)?$/i    => '\"big5-hkscs\"' );\n        define_alias( qr/\\bhk(?:scs)?[-_]?big5$/i => '\"big5-hkscs\"' );\n    }\n\n    # utf8 is blessed :)\n    define_alias( qr/\\bUTF-8$/i => '\"utf-8-strict\"' );\n\n    # At last, Map white space and _ to '-'\n    define_alias( qr/^(\\S+)[\\s_]+(.*)$/i => '\"$1-$2\"' );\n}\n\n1;\n__END__\n\n# TODO: HP-UX '8' encodings arabic8 greek8 hebrew8 kana8 thai8 turkish8\n# TODO: HP-UX '15' encodings japanese15 korean15 roi15\n# TODO: Cyrillic encoding ISO-IR-111 (useful?)\n# TODO: Armenian encoding ARMSCII-8\n# TODO: Hebrew encoding ISO-8859-8-1\n# TODO: Thai encoding TCVN\n# TODO: Vietnamese encodings VPS\n# TODO: Mac Asian+African encodings: Arabic Armenian Bengali Burmese\n#       ChineseSimp ChineseTrad Devanagari Ethiopic ExtArabic\n#       Farsi Georgian Gujarati Gurmukhi Hebrew Japanese\n#       Kannada Khmer Korean Laotian Malayalam Mongolian\n#       Oriya Sinhalese Symbol Tamil Telugu Tibetan Vietnamese\n\n=head1 NAME\n\nEncode::Alias - alias definitions to encodings\n\n=head1 SYNOPSIS\n\n  use Encode;\n  use Encode::Alias;\n  define_alias( newName => ENCODING);\n\n=head1 DESCRIPTION\n\nAllows newName to be used as an alias for ENCODING. ENCODING may be\neither the name of an encoding or an encoding object (as described \nin L<Encode>).\n\nCurrently I<newName> can be specified in the following ways:\n\n=over 4\n\n=item As a simple string.\n\n=item As a qr// compiled regular expression, e.g.:\n\n  define_alias( qr/^iso8859-(\\d+)$/i => '\"iso-8859-$1\"' );\n\nIn this case, if I<ENCODING> is not a reference, it is C<eval>-ed\nin order to allow C<$1> etc. to be substituted.  The example is one\nway to alias names as used in X11 fonts to the MIME names for the\niso-8859-* family.  Note the double quotes inside the single quotes.\n\n(or, you don't have to do this yourself because this example is predefined)\n\nIf you are using a regex here, you have to use the quotes as shown or\nit won't work.  Also note that regex handling is tricky even for the\nexperienced.  Use this feature with caution.\n\n=item As a code"..., 4096) = 3543
22042 _llseek(5, 8542, [8542], SEEK_SET) = 0
22042 _llseek(5, 0, [8542], SEEK_CUR)   = 0
22042 close(5)                          = 0
22042 read(4, "$check and !ref $check and !( $check & LEAVE_SRC() );\n    return $octets;\n}\n*str2bytes = \\&encode;\n\nsub decode($$;$) {\n    my ( $name, $octets, $check ) = @_;\n    return undef unless defined $octets;\n    $octets .= '' if ref $octets;\n    $check ||= 0;\n    my $enc = find_encoding($name);\n    unless ( defined $enc ) {\n        require Carp;\n        Carp::croak(\"Unknown encoding '$name'\");\n    }\n    my $string = $enc->decode( $octets, $check );\n    $_[1] = $octets if $check and !ref $check and !( $check & LEAVE_SRC() );\n    return $string;\n}\n*bytes2str = \\&decode;\n\nsub from_to($$$;$) {\n    my ( $string, $from, $to, $check ) = @_;\n    return undef unless defined $string;\n    $check ||= 0;\n    my $f = find_encoding($from);\n    unless ( defined $f ) {\n        require Carp;\n        Carp::croak(\"Unknown encoding '$from'\");\n    }\n    my $t = find_encoding($to);\n    unless ( defined $t ) {\n        require Carp;\n        Carp::croak(\"Unknown encoding '$to'\");\n    }\n    my $uni = $f->decode($string);\n    $_[0] = $string = $t->encode( $uni, $check );\n    return undef if ( $check && length($uni) );\n    return defined( $_[0] ) ? length($string) : undef;\n}\n\nsub encode_utf8($) {\n    my ($str) = @_;\n    utf8::encode($str);\n    return $str;\n}\n\nsub decode_utf8($;$) {\n    my ( $str, $check ) = @_;\n    return $str if is_utf8($str);\n    if ($check) {\n        return decode( \"utf8\", $str, $check );\n    }\n    else {\n        return decode( \"utf8\", $str );\n        return $str;\n    }\n}\n\npredefine_encodings(1);\n\n#\n# This is to restore %Encoding if really needed;\n#\n\nsub predefine_encodings {\n    require Encode::Encoding;\n    no warnings 'redefine';\n    my $use_xs = shift;\n    if ($ON_EBCDIC) {\n\n        # was in Encode::UTF_EBCDIC\n        package Encode::UTF_EBCDIC;\n        push @Encode::UTF_EBCDIC::ISA, 'Encode::Encoding';\n        *decode = sub {\n            my ( $obj, $str, $chk ) = @_;\n            my $res = '';\n            for ( my $i = 0 ; $i < length($str) ; $i++ ) {\n                $res .=\n                  chr(\n                    utf8::un"..., 4096) = 4096
22042 brk(0x8448000)                    = 0x8448000
22042 read(4, "rrently ignores $chk\n            my ( $obj, undef, undef, $pos, $trm ) = @_;\n            my ( $rdst, $rsrc, $rpos ) = \\@_[ 1, 2, 3 ];\n            use bytes;\n            if ( ( my $npos = index( $$rsrc, $trm, $pos ) ) >= 0 ) {\n                $$rdst .=\n                  substr( $$rsrc, $pos, $npos - $pos + length($trm) );\n                $$rpos = $npos + length($trm);\n                return 1;\n            }\n            $$rdst .= substr( $$rsrc, $pos );\n            $$rpos = length($$rsrc);\n            return '';\n        };\n        $Encode::Encoding{utf8} =\n          bless { Name => \"utf8\" } => \"Encode::utf8\";\n        $Encode::Encoding{\"utf-8-strict\"} =\n          bless { Name => \"utf-8-strict\", strict_utf8 => 1 } =>\n          \"Encode::utf8\";\n    }\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nEncode - character encodings\n\n=head1 SYNOPSIS\n\n    use Encode;\n\n=head2 Table of Contents\n\nEncode consists of a collection of modules whose details are too big\nto fit in one document.  This POD itself explains the top-level APIs\nand general topics at a glance.  For other topics and more details,\nsee the PODs below:\n\n  Name\t\t\t        Description\n  --------------------------------------------------------\n  Encode::Alias         Alias definitions to encodings\n  Encode::Encoding      Encode Implementation Base Class\n  Encode::Supported     List of Supported Encodings\n  Encode::CN            Simplified Chinese Encodings\n  Encode::JP            Japanese Encodings\n  Encode::KR            Korean Encodings\n  Encode::TW            Traditional Chinese Encodings\n  --------------------------------------------------------\n\n=head1 DESCRIPTION\n\nThe C<Encode> module provides the interfaces between Perl's strings\nand the rest of the system.  Perl strings are sequences of\nB<characters>.\n\nThe repertoire of characters that Perl can represent is at least that\ndefined by the Unicode Consortium. On most platforms the ordinal\nvalues of the characters (as returned by C<ord(ch)>) is the \"Unicode\ncodepoint\" for the character (the exceptions are those platforms where\nthe le"..., 4096) = 4096
22042 _llseek(4, 8962, [8962], SEEK_SET) = 0
22042 _llseek(4, 0, [8962], SEEK_CUR)   = 0
22042 close(4)                          = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Encode/Encode.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Encode/Encode.so", {st_mode=S_IFREG|0555, st_size=34384, ...}) = 0
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/auto/Encode/Encode.bs", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 open("/usr/lib/perl5/5.12.4/i686-linux/auto/Encode/Encode.so", O_RDONLY|O_CLOEXEC) = 4
22042 read(4, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0@#\0\0004\0\0\0\30\202\0\0\0\0\0\0004\0 \0\6\0(\0\33\0\32\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\244t\0\0\244t\0\0\5\0\0\0\0\20\0\0\1\0\0\0\304|\0\0\304\214\0\0\304\214\0\0D\4\0\0L\4\0\0\6\0\0\0\0\20\0\0\2\0\0\0X~\0\0X\216\0\0X\216\0\0\310\0\0\0\310\0\0\0\6\0\0\0\4\0\0\0Q\345td\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\4\0\0\0R\345td\304|\0\0\304\214\0\0\304\214\0\0<\3\0\0<\3\0\0\4\0\0\0\1\0\0\0\200\25\4e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0\0\4\0\0\0\361\0\0\0{\0\0\0\f\0\0\0\27\0\0\0\34\0\0\0\0\0\0\0\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0006\0\0\0D\0\0\0\24\0\0\0\0\0\0\0\0\0\0\0003\0\0\0u\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\4\0\0\0\v\0\0\0\0\0\0\0\0\0\0\0r\0\0\0\0\0\0\0t\0\0\0'\0\0\0e\0\0\0\26\0\0\0v\0\0\0\0\0\0\0\25\0\0\0\0\0\0\0\0\0\0\0s\0\0\0\0\0\0\0x\0\0\0\37\0\0\0!\0\0\0\0\0\0\0p\0\0\0?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0y\0\0\0^\0\0\0\1\0\0\0\0\0\0\0U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\0\0\0\0\0\0a\0\0\0\0\0\0\0*\0\0\0\0\0\0\0P\0\0\0\0\0\0\0\0\0\0\0", 512) = 512
22042 fstat64(4, {st_mode=S_IFREG|0555, st_size=34384, ...}) = 0
22042 mmap2(NULL, 37136, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0xb71ff000
22042 mmap2(0xb7207000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x7) = 0xb7207000
22042 close(4)                          = 0
22042 mprotect(0xb7207000, 4096, PROT_READ) = 0
22042 stat64("/etc/perl/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/Config.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/Config.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/Config.pm", {st_mode=S_IFREG|0444, st_size=6065, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Encode/Config.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f58) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "#\n# Demand-load module list\n#\npackage Encode::Config;\nour $VERSION = do { my @r = ( q$Revision: 2.5 $ =~ /\\d+/g ); sprintf \"%d.\" . \"%02d\" x $#r, @r };\n\nuse strict;\nuse warnings;\n\nour %ExtModule = (\n\n    # Encode::Byte\n    #iso-8859-1 is in Encode.pm itself\n    'iso-8859-2'            => 'Encode::Byte',\n    'iso-8859-3'            => 'Encode::Byte',\n    'iso-8859-4'            => 'Encode::Byte',\n    'iso-8859-5'            => 'Encode::Byte',\n    'iso-8859-6'            => 'Encode::Byte',\n    'iso-8859-7'            => 'Encode::Byte',\n    'iso-8859-8'            => 'Encode::Byte',\n    'iso-8859-9'            => 'Encode::Byte',\n    'iso-8859-10'           => 'Encode::Byte',\n    'iso-8859-11'           => 'Encode::Byte',\n    'iso-8859-13'           => 'Encode::Byte',\n    'iso-8859-14'           => 'Encode::Byte',\n    'iso-8859-15'           => 'Encode::Byte',\n    'iso-8859-16'           => 'Encode::Byte',\n    'koi8-f'                => 'Encode::Byte',\n    'koi8-r'                => 'Encode::Byte',\n    'koi8-u'                => 'Encode::Byte',\n    'viscii'                => 'Encode::Byte',\n    'cp424'                 => 'Encode::Byte',\n    'cp437'                 => 'Encode::Byte',\n    'cp737'                 => 'Encode::Byte',\n    'cp775'                 => 'Encode::Byte',\n    'cp850'                 => 'Encode::Byte',\n    'cp852'                 => 'Encode::Byte',\n    'cp855'                 => 'Encode::Byte',\n    'cp856'                 => 'Encode::Byte',\n    'cp857'                 => 'Encode::Byte',\n    'cp858'                 => 'Encode::Byte',\n    'cp860'                 => 'Encode::Byte',\n    'cp861'                 => 'Encode::Byte',\n    'cp862'                 => 'Encode::Byte',\n    'cp863'                 => 'Encode::Byte',\n    'cp864'                 => 'Encode::Byte',\n    'cp865'                 => 'Encode::Byte',\n    'cp866'                 => 'Encode::Byte',\n    'cp869'                 => 'Encode::Byte',\n    'cp874'                 => 'Encode::Byte',\n    'cp1006'                => 'Encode::Byte',\n    '"..., 4096) = 4096
22042 read(4, "16LE' => 'Encode::Unicode',\n    'UTF-32'   => 'Encode::Unicode',\n    'UTF-32BE' => 'Encode::Unicode',\n    'UTF-32LE' => 'Encode::Unicode',\n    'UTF-7'    => 'Encode::Unicode::UTF7',\n);\n\nunless ( ord(\"A\") == 193 ) {\n    %ExtModule = (\n        %ExtModule,\n        'euc-cn'         => 'Encode::CN',\n        'gb12345-raw'    => 'Encode::CN',\n        'gb2312-raw'     => 'Encode::CN',\n        'hz'             => 'Encode::CN',\n        'iso-ir-165'     => 'Encode::CN',\n        'cp936'          => 'Encode::CN',\n        'MacChineseSimp' => 'Encode::CN',\n\n        '7bit-jis'      => 'Encode::JP',\n        'euc-jp'        => 'Encode::JP',\n        'iso-2022-jp'   => 'Encode::JP',\n        'iso-2022-jp-1' => 'Encode::JP',\n        'jis0201-raw'   => 'Encode::JP',\n        'jis0208-raw'   => 'Encode::JP',\n        'jis0212-raw'   => 'Encode::JP',\n        'cp932'         => 'Encode::JP',\n        'MacJapanese'   => 'Encode::JP',\n        'shiftjis'      => 'Encode::JP',\n\n        'euc-kr'      => 'Encode::KR',\n        'iso-2022-kr' => 'Encode::KR',\n        'johab'       => 'Encode::KR',\n        'ksc5601-raw' => 'Encode::KR',\n        'cp949'       => 'Encode::KR',\n        'MacKorean'   => 'Encode::KR',\n\n        'big5-eten'      => 'Encode::TW',\n        'big5-hkscs'     => 'Encode::TW',\n        'cp950'          => 'Encode::TW',\n        'MacChineseTrad' => 'Encode::TW',\n\n        #'big5plus'           => 'Encode::HanExtra',\n        #'euc-tw'             => 'Encode::HanExtra',\n        #'gb18030'            => 'Encode::HanExtra',\n\n        'MIME-Header' => 'Encode::MIME::Header',\n        'MIME-B'      => 'Encode::MIME::Header',\n        'MIME-Q'      => 'Encode::MIME::Header',\n\n        'MIME-Header-ISO_2022_JP' => 'Encode::MIME::Header::ISO_2022_JP',\n    );\n}\n\n#\n# Why not export ? to keep ConfigLocal Happy!\n#\nwhile ( my ( $enc, $mod ) = each %ExtModule ) {\n    $Encode::ExtModule{$enc} = $mod;\n}\n\n1;\n__END__\n\n=head1 NAME\n\nEncode::Config -- internally used by Encode\n\n=cut\n", 4096) = 1969
22042 _llseek(4, 6001, [6001], SEEK_SET) = 0
22042 _llseek(4, 0, [6001], SEEK_CUR)   = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/ConfigLocal.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/ConfigLocal.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/ConfigLocal.pm", {st_mode=S_IFREG|0644, st_size=172, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Encode/ConfigLocal.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f58) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "#\n# Local demand-load module list\n#\n# You should not edit this file by hand!  use \"enc2xs -C\"\n# \npackage Encode::ConfigLocal;\nour $VERSION = 1319403797;\n\nuse strict;\n\n\n\n1;\n", 4096) = 172
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/etc/perl/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/Encode/Encoding.pm", 0xbff09180) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/Encoding.pmc", 0xbff09210) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/Encode/Encoding.pm", {st_mode=S_IFREG|0444, st_size=9095, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/i686-linux/Encode/Encoding.pm", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff08f58) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package Encode::Encoding;\n\n# Base class for classes which implement encodings\nuse strict;\nuse warnings;\nour $VERSION = do { my @r = ( q$Revision: 2.5 $ =~ /\\d+/g ); sprintf \"%d.\" . \"%02d\" x $#r, @r };\n\nrequire Encode;\n\nsub DEBUG { 0 }\n\nsub Define {\n    my $obj       = shift;\n    my $canonical = shift;\n    $obj = bless { Name => $canonical }, $obj unless ref $obj;\n\n    # warn \"$canonical => $obj\\n\";\n    Encode::define_encoding( $obj, $canonical, @_ );\n}\n\nsub name { return shift->{'Name'} }\n\nsub mime_name{\n    require Encode::MIME::Name;\n    return Encode::MIME::Name::get_mime_name(shift->name);\n}\n\n# sub renew { return $_[0] }\n\nsub renew {\n    my $self = shift;\n    my $clone = bless {%$self} => ref($self);\n    $clone->{renewed}++;    # so the caller can see it\n    DEBUG and warn $clone->{renewed};\n    return $clone;\n}\n\nsub renewed { return $_[0]->{renewed} || 0 }\n\n*new_sequence = \\&renew;\n\nsub needs_lines { 0 }\n\nsub perlio_ok {\n    eval { require PerlIO::encoding };\n    return $@ ? 0 : 1;\n}\n\n# (Temporary|legacy) methods\n\nsub toUnicode   { shift->decode(@_) }\nsub fromUnicode { shift->encode(@_) }\n\n#\n# Needs to be overloaded or just croak\n#\n\nsub encode {\n    require Carp;\n    my $obj = shift;\n    my $class = ref($obj) ? ref($obj) : $obj;\n    Carp::croak( $class . \"->encode() not defined!\" );\n}\n\nsub decode {\n    require Carp;\n    my $obj = shift;\n    my $class = ref($obj) ? ref($obj) : $obj;\n    Carp::croak( $class . \"->encode() not defined!\" );\n}\n\nsub DESTROY { }\n\n1;\n__END__\n\n=head1 NAME\n\nEncode::Encoding - Encode Implementation Base Class\n\n=head1 SYNOPSIS\n\n  package Encode::MyEncoding;\n  use base qw(Encode::Encoding);\n\n  __PACKAGE__->Define(qw(myCanonical myAlias));\n\n=head1 DESCRIPTION\n\nAs mentioned in L<Encode>, encodings are (in the current\nimplementation at least) defined as objects. The mapping of encoding\nname to object is via the C<%Encode::Encoding> hash.  Though you can\ndirectly manipulate this hash, it is strongly encouraged to use this\nbase class module and add encode() and decode() methods.\n\n=head2 Method"..., 4096) = 4096
22042 _llseek(4, 1496, [1496], SEEK_SET) = 0
22042 _llseek(4, 0, [1496], SEEK_CUR)   = 0
22042 close(4)                          = 0
22042 read(3, " by File::Find\342\200\231s find(), only pass existing directories.\n@searchdirs = grep { -d $_ } @searchdirs;\n\nfind(\n    {\n        wanted => sub {\n            return unless substr($_, -1 * length('.desktop')) eq '.desktop';\n            my $relative = $File::Find::name;\n\n            # + 1 for the trailing /, which is missing in ::topdir.\n            substr($relative, 0, length($File::Find::topdir) + 1) = '';\n\n            # Don\342\200\231t overwrite files with the same relative path, we search in\n            # descending order of importance.\n            return if exists($desktops{$relative});\n\n            $desktops{$relative} = $File::Find::name;\n        },\n        no_chdir => 1,\n    },\n    @searchdirs\n);\n\nmy %apps;\n\nfor my $file (values %desktops) {\n    my $base = basename($file);\n\n    # _ is an invalid character for a key, so we can use it for our own keys.\n    $apps{$base}->{_Location} = $file;\n\n    # Extract all \342\200\234Name\342\200\235 and \342\200\234Exec\342\200\235 keys from the [Desktop Entry] group\n    # and store them in $apps{$base}.\n    my %names;\n    my $content = slurp($file);\n    next unless defined($content);\n    my @lines = split(\"\\n\", $content);\n    for my $line (@lines) {\n        my $first = substr($line, 0, 1);\n        next if $line eq '' || $first eq '#';\n        next unless ($line eq '[Desktop Entry]' ..\n                     ($first eq '[' &&\n                      substr($line, -1) eq ']' &&\n                      $line ne '[Desktop Entry]'));\n        next if $first eq '[';\n\n        my ($key, $value) = ($line =~ /^\n          (\n            [A-Za-z0-9-]+  # the spec specifies these as valid key characters\n            (?:\\[[^]]+\\])? # possibly, there as a locale suffix\n          )\n          \\s* = \\s*        # whitespace around = should be ignored\n          (.*)             # no restrictions on the values\n          $/x);\n\n        if ($key =~ /^Name/) {\n            $names{$key} = $value;\n        } elsif ($key eq 'Exec' ||\n                 $key eq 'TryExec' ||\n                 $key eq 'Type') {\n            $apps{$base}->{$key} = $value;\n        } "..., 4096) = 4096
22042 read(3, " Exec key).\n    if (!exists($apps{$app}->{Exec}) ||\n        $apps{$app}->{Exec} eq '') {\n        warn 'File ' . $apps{$app}->{_Location} . ' is broken: it contains Type=Application, but no Exec key/value pair.';\n        next;\n    }\n\n    # Don\342\200\231t offer apps which have NoDisplay == true or Hidden == true.\n    # See http://wiki.xfce.org/howto/customize-menu#hide_menu_entries\n    # for the difference between NoDisplay and Hidden.\n    next if (exists($apps{$app}->{NoDisplay}) && $apps{$app}->{NoDisplay}) ||\n            (exists($apps{$app}->{Hidden}) && $apps{$app}->{Hidden});\n\n    if (exists($apps{$app}->{TryExec})) {\n        my $tryexec = $apps{$app}->{TryExec};\n        if (substr($tryexec, 0, 1) eq '/') {\n            # Skip if absolute path is not executable.\n            next unless -x $tryexec;\n        } else {\n            # Search in $PATH for the executable.\n            my $found = 0;\n            for my $path (split(':', $ENV{PATH})) {\n                next unless -x \"$path/$tryexec\";\n                $found = 1;\n                last;\n            }\n            next unless $found;\n        }\n    }\n\n    if ('name' ~~ @entry_types) {\n        if (exists($choices{$name})) {\n            # There are two .desktop files which contain the same \342\200\234Name\342\200\235 value.\n            # I\342\200\231m not sure if that is allowed to happen, but we disambiguate the\n            # situation by appending \342\200\234 (2)\342\200\235, \342\200\234 (3)\342\200\235, etc. to the name.\n            #\n            # An example of this happening is exo-file-manager.desktop and\n            # thunar-settings.desktop, both of which contain \342\200\234Name=File Manager\342\200\235.\n            my $inc = 2;\n            $inc++ while exists($choices{\"$name ($inc)\"});\n            $name = \"$name ($inc)\";\n        }\n\n        $choices{$name} = $app;\n    }\n\n    if ('command' ~~ @entry_types) {\n        my ($command) = split(' ', $apps{$app}->{Exec});\n\n        # Don\342\200\231t add \342\200\234geany\342\200\235 if \342\200\234Geany\342\200\235 is already present.\n        my @keys = map { lc } keys %choices;\n        next if lc(basename($command)) ~~ @keys;\n\n        $cho"..., 4096) = 4096
22042 read(3, "nd arguments.\n        $choice =~ s/^\\s//g;\n        last;\n    }\n    if (!defined($app)) {\n        die \"Invalid input: \342\200\234$choice\342\200\235 does not match any application.\";\n    }\n}\n\nn# \342\224\203 Make i3 start the chosen application.                                     \342\224\203\nn\nmy $name = $app->{Name};\nmy $exec = $app->{Exec};\nmy $location = $app->{_Location};\n\n# Quote as described by \342\200\234The Exec key\342\200\235:\n# http://standards.freedesktop.org/desktop-entry-spec/latest/ar01s06.html\nsub quote {\n    my ($str) = @_;\n    $str =~ s/(\"|`|\\$|\\\\)/\\\\$1/g;\n    $str = qq|\"$str\"| if $str ne \"\";\n    return $str;\n}\n\n$choice = quote($choice);\n$location = quote($location);\n\n# Remove deprecated field codes, as the spec dictates.\n$exec =~ s/%[dDnNvm]//g;\n\n# Replace filename field codes with the rest of the command line.\n# Note that we assume the user uses precisely one file name,\n# not multiple file names.\n$exec =~ s/%[fF]/$choice/g;\n\n# If the program works with URLs,\n# we assume the user provided a URL instead of a filename.\n# As per the spec, there must be at most one of %f, %u, %F or %U present.\n$exec =~ s/%[uU]/$choice/g;\n\n# The translated name of the application.\n$exec =~ s/%c/$name/g;\n\n# XXX: Icons are not implemented. Is the complexity (looking up the path if\n# only a name is given) actually worth it?\n#$exec =~ s/%i/--icon $icon/g;\n$exec =~ s/%i//g;\n\n# location of .desktop file\n$exec =~ s/%k/$location/g;\n\n# Literal % characters are represented as %%.\n$exec =~ s/%%/%/g;\n\nmy $nosn = '';\nmy $cmd;\nif (exists($app->{Terminal}) && $app->{Terminal}) {\n    # For applications which specify \342\200\234Termi"..., 4096) = 4096
22042 stat64("/etc/perl/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/utf8_heavy.pl", 0xbff09780) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/utf8_heavy.pl", {st_mode=S_IFREG|0444, st_size=20125, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/utf8_heavy.pl", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09558) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "package utf8;\nuse strict;\nuse warnings;\n\nsub DEBUG () { 0 }\n\nsub DESTROY {}\n\nmy %Cache;\n\nsub croak { require Carp; Carp::croak(@_) }\n\n##\n## \"SWASH\" == \"SWATCH HASH\". A \"swatch\" is a swatch of the Unicode landscape.\n## It's a data structure that encodes a set of Unicode characters.\n##\n\n{\n    # If a floating point number is within this distance from the value of a\n    # fraction, it is considered to be that fraction, even if many more digits\n    # are specified that don't exactly match.\n    my $min_floating_slop;\n\n    sub SWASHNEW {\n        my ($class, $type, $list, $minbits, $none) = @_;\n        local $^D = 0 if $^D;\n\n        print STDERR __LINE__, \": \", join(\", \", @_), \"\\n\" if DEBUG;\n\n        ##\n        ## Get the list of codepoints for the type.\n        ## Called from swash_init (see utf8.c) or SWASHNEW itself.\n        ##\n        ## Callers of swash_init:\n        ##     op.c:pmtrans             -- for tr/// and y///\n        ##     regexec.c:regclass_swash -- for /[]/, \\p, and \\P\n        ##     utf8.c:is_utf8_common    -- for common Unicode properties\n        ##     utf8.c:to_utf8_case      -- for lc, uc, ucfirst, etc. and //i\n        ##\n        ## Given a $type, our goal is to fill $list with the set of codepoint\n        ## ranges. If $type is false, $list passed is used.\n        ##\n        ## $minbits:\n        ##     For binary properties, $minbits must be 1.\n        ##     For character mappings (case and transliteration), $minbits must\n        ##     be a number except 1.\n        ##\n        ## $list (or that filled according to $type):\n        ##     Refer to perlunicode.pod, \"User-Defined Character Properties.\"\n        ##     \n        ##     For binary properties, only characters with the property value\n        ##     of True should be listed. The 3rd column, if any, will be ignored\n        ##\n        ## $none is undocumented, so I'm (khw) trying to do some documentation\n        ## of it now.  It appears to be if there is a mapping in an input file\n        ## that maps to 'XXXX', then that is replaced by $no"..., 4096) = 4096
22042 read(4, " whole value is the table.\n                    $table = $property;\n                    $prefix = $property = \"\";\n                } else {\n                    print STDERR __LINE__, \": $property\\n\" if DEBUG;\n\n                    # Here it is the compound property=table form.  The property\n                    # name is always loosely matched, which means remove any of\n                    # these:\n                    $property =~ s/[_\\s-]//g;\n\n                    # And convert to canonical form.  Quit if not valid.\n                    $property = $utf8::loose_property_name_of{$property};\n                    return $type unless defined $property;\n\n                    $prefix = \"$property=\";\n\n                    # If the rhs looks like it is a number...\n                    print STDERR __LINE__, \": table=$table\\n\" if DEBUG;\n                    if ($table =~ qr{ ^ [ \\s 0-9 _  + / . -]+ $ }x) {\n                        print STDERR __LINE__, \": table=$table\\n\" if DEBUG;\n\n                        # Don't allow leading nor trailing slashes \n                        return $type if $table =~ / ^ \\/ | \\/ $ /x;\n\n                        # Split on slash, in case it is a rational, like \\p{1/5}\n                        my @parts = split qr{ \\s* / \\s* }x, $table, -1;\n                        print __LINE__, \": $type\\n\" if @parts > 2 && DEBUG;\n\n                        # Can have maximum of one slash\n                        return $type if @parts > 2;\n\n                        foreach my $part (@parts) {\n                            print __LINE__, \": part=$part\\n\" if DEBUG;\n\n                            $part =~ s/^\\+\\s*//;    # Remove leading plus\n                            $part =~ s/^-\\s*/-/;    # Remove blanks after unary\n                                                    # minus\n\n                            # Remove underscores between digits.\n                            $part =~ s/( ?<= [0-9] ) _ (?= [0-9] ) //xg;\n\n                            # No leading zeros (but don't make a single '0'\n                            # into a nul"..., 4096) = 4096
22042 brk(0x8469000)                    = 0x8469000
22042 read(4, "       # necessary.  (Note the hard-coded property name.\n                            # This could fail if other properties eventually\n                            # had fractions as well; perhaps the cjk ones\n                            # could evolve to do that.  This hard-coding could\n                            # be fixed by mktables generating a list of\n                            # properties that could have fractions.)\n                            $table = $parts[0];\n                        } else {\n\n                            # Here is a floating point numeric_value.  Try to\n                            # convert to rational.  First see if is in the list\n                            # of known ones.\n                            if (exists $utf8::nv_floating_to_rational{$parts[0]}) {\n                                $table = $utf8::nv_floating_to_rational{$parts[0]};\n                            } else {\n\n                                # Here not in the list.  See if is close\n                                # enough to something in the list.  First\n                                # determine what 'close enough' means.  It has\n                                # to be as tight as what mktables says is the\n                                # maximum slop, and as tight as how many\n                                # digits we were passed.  That is, if the user\n                                # said .667, .6667, .66667, etc.  we match as\n                                # many digits as they passed until get to\n                                # where it doesn't matter any more due to the\n                                # machine's precision.  If they said .6666668,\n                                # we fail.\n                                (my $fraction = $parts[0]) =~ s/^.*\\.//;\n                                my $epsilon = 10 ** - (length($fraction));\n                                if ($epsilon > $utf8::max_floating_slop) {\n                                    $epsilon = $utf8::max_floating_slop;\n                         "..., 4096) = 4096
22042 read(4, "            undef $table;\n\n                                # And for each possible rational in the table,\n                                # see if it is within epsilon of the input.\n                                foreach my $official\n                                        (keys %utf8::nv_floating_to_rational)\n                                {\n                                    print STDERR __LINE__, \": epsilon=$epsilon, official=$official, diff=\", abs($parts[0] - $official), \"\\n\" if DEBUG;\n                                    if (abs($parts[0] - $official) < $epsilon) {\n                                      $table =\n                                      $utf8::nv_floating_to_rational{$official};\n                                        last;\n                                    }\n                                }\n\n                                # Quit if didn't find one.\n                                return $type unless defined $table;\n                            }\n                        }\n                        print STDERR __LINE__, \": $property=$table\\n\" if DEBUG;\n                    }\n                }\n\n                # Combine lhs (if any) and rhs to get something that matches\n                # the syntax of the lookups.\n                $property_and_table = \"$prefix$table\";\n                print STDERR __LINE__, \": $property_and_table\\n\" if DEBUG;\n\n                # First try stricter matching.\n                $file = $utf8::stricter_to_file_of{$property_and_table};\n\n                # If didn't find it, try again with looser matching by editing\n                # out the applicable characters on the rhs and looking up\n                # again.\n                if (! defined $file) {\n                    $table =~ s/ [_\\s-] //xg;\n                    $property_and_table = \"$prefix$table\";\n                    print STDERR __LINE__, \": $property_and_table\\n\" if DEBUG;\n                    $file = $utf8::loose_to_file_of{$property_and_table};\n                }\n\n                # Add the constant and go fetch it"..., 4096) = 4096
22042 read(4, "dy.\n                ## If we have, return the cached results. The cache key is the\n                ## class and file to load.\n                ##\n                my $found = $Cache{$class, $file};\n                if ($found and ref($found) eq $class) {\n                    print STDERR __LINE__, \": Returning cached '$file' for \\\\p{$type}\\n\" if DEBUG;\n                    return $found;\n                }\n\n                local $@;\n                local $!;\n                $list = do $file; die $@ if $@;\n            }\n\n            $ListSorted = 1; ## we know that these lists are sorted\n        }\n\n        my $extras;\n        my $bits = $minbits;\n\n        my $ORIG = $list;\n        if ($list) {\n            my @tmp = split(/^/m, $list);\n            my %seen;\n            no warnings;\n            $extras = join '', grep /^[^0-9a-fA-F]/, @tmp;\n            $list = join '',\n                map  { $_->[1] }\n                sort { $a->[0] <=> $b->[0] }\n                map  { /^([0-9a-fA-F]+)/; [ CORE::hex($1), $_ ] }\n                grep { /^([0-9a-fA-F]+)/ and not $seen{$1}++ } @tmp; # XXX doesn't do ranges right\n        }\n\n        if ($none) {\n            my $hextra = sprintf \"%04x\", $none + 1;\n            $list =~ s/\\tXXXX$/\\t$hextra/mg;\n        }\n\n        if ($minbits != 1 && $minbits < 32) { # not binary property\n            my $top = 0;\n            while ($list =~ /^([0-9a-fA-F]+)(?:[\\t]([0-9a-fA-F]+)?)(?:[ \\t]([0-9a-fA-F]+))?/mg) {\n                my $min = CORE::hex $1;\n                my $max = defined $2 ? CORE::hex $2 : $min;\n                my $val = defined $3 ? CORE::hex $3 : 0;\n                $val += $max - $min if defined $3;\n                $top = $val if $val > $top;\n            }\n            my $topbits =\n                $top > 0xffff ? 32 :\n                $top > 0xff ? 16 : 8;\n            $bits = $topbits if $bits < $topbits;\n        }\n\n        my @extras;\n        if ($extras) {\n            for my $x ($extras) {\n                pos $x = 0;\n                while ($x =~ /^([^0-9a-fA-F\\n])(.*)/mg) {\n          "..., 4096) = 3741
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 stat64("/etc/perl/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/unicore/Heavy.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/unicore/Heavy.pl", {st_mode=S_IFREG|0444, st_size=100385, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/unicore/Heavy.pl", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff093a8) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!\n# This file is machine-generated by lib/unicore/mktables from the Unicode\n# database, Version 5.2.0.  Any changes made here will be lost!\n\n\n# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!\n# This file is for internal use by the Perl program only.  The format and even\n# the name or existence of this file are subject to change without notice.\n# Don't use it directly.\n\n\n# This file is for the use of utf8_heavy.pl\n\n# Maps property names in loose standard form to its standard name\n%utf8::loose_property_name_of = (\n    'age' => 'age',\n    'ahex' => 'ahex',\n    'alpha' => 'alpha',\n    'alphabetic' => 'alpha',\n    'asciihexdigit' => 'ahex',\n    'bc' => 'bc',\n    'bidic' => 'bidic',\n    'bidiclass' => 'bc',\n    'bidicontrol' => 'bidic',\n    'bidim' => 'bidim',\n    'bidimirrored' => 'bidim',\n    'blk' => 'blk',\n    'block' => 'blk',\n    'canonicalcombiningclass' => 'ccc',\n    'cased' => 'cased',\n    'caseignorable' => 'ci',\n    'category' => 'gc',\n    'ccc' => 'ccc',\n    'ce' => 'ce',\n    'changeswhencasefolded' => 'cwcf',\n    'changeswhencasemapped' => 'cwcm',\n    'changeswhenlowercased' => 'cwl',\n    'changeswhennfkccasefolded' => 'cwkcf',\n    'changeswhentitlecased' => 'cwt',\n    'changeswhenuppercased' => 'cwu',\n    'ci' => 'ci',\n    'compex' => 'compex',\n    'compositionexclusion' => 'ce',\n    'cwcf' => 'cwcf',\n    'cwcm' => 'cwcm',\n    'cwkcf' => 'cwkcf',\n    'cwl' => 'cwl',\n    'cwt' => 'cwt',\n    'cwu' => 'cwu',\n    'dash' => 'dash',\n    'decompositiontype' => 'dt',\n    'defaultignorablecodepoint' => 'di',\n    'dep' => 'dep',\n    'deprecated' => 'dep',\n    'di' => 'di',\n    'dia' => 'dia',\n    'diacritic' => 'dia',\n    'dt' => 'dt',\n    'ea' => 'ea',\n    'eastasianwidth' => 'ea',\n    'ext' => 'ext',\n    'extender' => 'ext',\n    'fullcompositionexclusion' => 'compex',\n    'gc' => 'gc',\n    'gcb' => 'gcb',\n    'generalcategory' => 'gc',\n    'graphemebase' => 'grbase',\n    'graphemeclusterbreak' => 'gcb',\n    'graphemeextend' => 'grext',\n    'grbase' => 'grbase',\n    'grext' => "..., 4096) = 4096
22042 read(4, "e' => 'hst',\n    'ishex' => 'hex',\n    'ishexdigit' => 'hex',\n    'ishst' => 'hst',\n    'ishyphen' => 'hyphen',\n    'isidc' => 'idc',\n    'isidcontinue' => 'idc',\n    'isideo' => 'ideo',\n    'isideographic' => 'ideo',\n    'isids' => 'ids',\n    'isidsb' => 'idsb',\n    'isidsbinaryoperator' => 'idsb',\n    'isidst' => 'idst',\n    'isidstart' => 'ids',\n    'isidstrinaryoperator' => 'idst',\n    'isjg' => 'jg',\n    'isjoinc' => 'joinc',\n    'isjoincontrol' => 'joinc',\n    'isjoininggroup' => 'jg',\n    'isjoiningtype' => 'jt',\n    'isjt' => 'jt',\n    'islb' => 'lb',\n    'islinebreak' => 'lb',\n    'isloe' => 'loe',\n    'islogicalorderexception' => 'loe',\n    'islower' => 'lower',\n    'islowercase' => 'lower',\n    'ismath' => 'math',\n    'isnchar' => 'nchar',\n    'isnfcqc' => 'nfcqc',\n    'isnfcquickcheck' => 'nfcqc',\n    'isnfdqc' => 'nfdqc',\n    'isnfdquickcheck' => 'nfdqc',\n    'isnfkcqc' => 'nfkcqc',\n    'isnfkcquickcheck' => 'nfkcqc',\n    'isnfkdqc' => 'nfkdqc',\n    'isnfkdquickcheck' => 'nfkdqc',\n    'isnoncharactercodepoint' => 'nchar',\n    'isnt' => 'nt',\n    'isnumerictype' => 'nt',\n    'isnumericvalue' => 'nv',\n    'isnv' => 'nv',\n    'isoalpha' => 'oalpha',\n    'isodi' => 'odi',\n    'isogrext' => 'ogrext',\n    'isoidc' => 'oidc',\n    'isoids' => 'oids',\n    'isolower' => 'olower',\n    'isomath' => 'omath',\n    'isotheralphabetic' => 'oalpha',\n    'isotherdefaultignorablecodepoint' => 'odi',\n    'isothergraphemeextend' => 'ogrext',\n    'isotheridcontinue' => 'oidc',\n    'isotheridstart' => 'oids',\n    'isotherlowercase' => 'olower',\n    'isothermath' => 'omath',\n    'isotheruppercase' => 'oupper',\n    'isoupper' => 'oupper',\n    'ispatsyn' => 'patsyn',\n    'ispatternsyntax' => 'patsyn',\n    'ispatternwhitespace' => 'patws',\n    'ispatws' => 'patws',\n    'isqmark' => 'qmark',\n    'isquotationmark' => 'qmark',\n    'isradical' => 'radical',\n    'issb' => 'sb',\n    'issc' => 'sc',\n    'isscript' => 'sc',\n    'issd' => 'sd',\n    'issentencebreak' => 'sb',\n    'issoftdotted' => 'sd',\n    'isspace' => 'wspace',\n    'is"..., 4096) = 4096
22042 read(4, " => 'sb',\n    'softdotted' => 'sd',\n    'space' => 'wspace',\n    'sterm' => 'sterm',\n    'term' => 'term',\n    'terminalpunctuation' => 'term',\n    'uideo' => 'uideo',\n    'unifiedideograph' => 'uideo',\n    'upper' => 'upper',\n    'uppercase' => 'upper',\n    'variationselector' => 'vs',\n    'vs' => 'vs',\n    'wb' => 'wb',\n    'whitespace' => 'wspace',\n    'wordbreak' => 'wb',\n    'wspace' => 'wspace',\n    'xidc' => 'xidc',\n    'xidcontinue' => 'xidc',\n    'xids' => 'xids',\n    'xidstart' => 'xids',\n);\n\n# Maps property, table to file for those using stricter matching\n%utf8::stricter_to_file_of = (\n    '_canondcij' => 'SD/Y',\n    '_case_ignorable' => 'CI/Y',\n    '_combabove' => 'Ccc/A',\n    '_x_begin' => 'Perl/_XBegin',\n    '_x_extend' => 'Perl/_XExtend',\n    '_x_lv_lvt_v' => 'Perl/_XLVLVTV',\n    'age=1.1' => 'Age/1_1',\n    'age=2' => 'Age/2_0',\n    'age=2.0' => 'Age/2_0',\n    'age=2.1' => 'Age/2_1',\n    'age=3' => 'Age/3_0',\n    'age=3.0' => 'Age/3_0',\n    'age=3.1' => 'Age/3_1',\n    'age=3.2' => 'Age/3_2',\n    'age=4' => 'Age/4_0',\n    'age=4.0' => 'Age/4_0',\n    'age=4.1' => 'Age/4_1',\n    'age=5' => 'Age/5_0',\n    'age=5.0' => 'Age/5_0',\n    'age=5.1' => 'Age/5_1',\n    'age=5.2' => 'Age/5_2',\n    'ccc=0' => 'Ccc/NR',\n    'ccc=1' => 'Ccc/OV',\n    'ccc=10' => 'Ccc/10',\n    'ccc=103' => 'Ccc/103',\n    'ccc=107' => 'Ccc/107',\n    'ccc=11' => 'Ccc/11',\n    'ccc=118' => 'Ccc/118',\n    'ccc=12' => 'Ccc/12',\n    'ccc=122' => 'Ccc/122',\n    'ccc=129' => 'Ccc/129',\n    'ccc=13' => 'Ccc/13',\n    'ccc=130' => 'Ccc/130',\n    'ccc=132' => 'Ccc/132',\n    'ccc=14' => 'Ccc/14',\n    'ccc=15' => 'Ccc/15',\n    'ccc=16' => 'Ccc/16',\n    'ccc=17' => 'Ccc/17',\n    'ccc=18' => 'Ccc/18',\n    'ccc=19' => 'Ccc/19',\n    'ccc=20' => 'Ccc/20',\n    'ccc=200' => 'Ccc/ATBL',\n    'ccc=202' => 'Ccc/ATB',\n    'ccc=21' => 'Ccc/21',\n    'ccc=214' => 'Ccc/ATA',\n    'ccc=216' => 'Ccc/ATAR',\n    'ccc=218' => 'Ccc/BL',\n    'ccc=22' => 'Ccc/22',\n    'ccc=220' => 'Ccc/B',\n    'ccc=222' => 'Ccc/BR',\n    'ccc=224' => 'Ccc/L',\n    'ccc=226' => 'Ccc/R',\n    "..., 4096) = 4096
22042 read(4, "0' => 'Nv/2000',\n    'nv=20000' => 'Nv/20000',\n    'nv=21' => 'Nv/21',\n    'nv=22' => 'Nv/22',\n    'nv=23' => 'Nv/23',\n    'nv=24' => 'Nv/24',\n    'nv=25' => 'Nv/25',\n    'nv=26' => 'Nv/26',\n    'nv=27' => 'Nv/27',\n    'nv=28' => 'Nv/28',\n    'nv=29' => 'Nv/29',\n    'nv=3' => 'Nv/3',\n    'nv=3/16' => 'Nv/3_16',\n    'nv=3/2' => 'Nv/3_2',\n    'nv=3/4' => 'Nv/3_4',\n    'nv=3/5' => 'Nv/3_5',\n    'nv=3/8' => 'Nv/3_8',\n    'nv=30' => 'Nv/30',\n    'nv=300' => 'Nv/300',\n    'nv=3000' => 'Nv/3000',\n    'nv=30000' => 'Nv/30000',\n    'nv=31' => 'Nv/31',\n    'nv=32' => 'Nv/32',\n    'nv=33' => 'Nv/33',\n    'nv=34' => 'Nv/34',\n    'nv=35' => 'Nv/35',\n    'nv=36' => 'Nv/36',\n    'nv=37' => 'Nv/37',\n    'nv=38' => 'Nv/38',\n    'nv=39' => 'Nv/39',\n    'nv=4' => 'Nv/4',\n    'nv=4/5' => 'Nv/4_5',\n    'nv=40' => 'Nv/40',\n    'nv=400' => 'Nv/400',\n    'nv=4000' => 'Nv/4000',\n    'nv=40000' => 'Nv/40000',\n    'nv=41' => 'Nv/41',\n    'nv=42' => 'Nv/42',\n    'nv=43' => 'Nv/43',\n    'nv=44' => 'Nv/44',\n    'nv=45' => 'Nv/45',\n    'nv=46' => 'Nv/46',\n    'nv=47' => 'Nv/47',\n    'nv=48' => 'Nv/48',\n    'nv=49' => 'Nv/49',\n    'nv=5' => 'Nv/5',\n    'nv=5/2' => 'Nv/5_2',\n    'nv=5/6' => 'Nv/5_6',\n    'nv=5/8' => 'Nv/5_8',\n    'nv=50' => 'Nv/50',\n    'nv=500' => 'Nv/500',\n    'nv=5000' => 'Nv/5000',\n    'nv=50000' => 'Nv/50000',\n    'nv=6' => 'Nv/6',\n    'nv=60' => 'Nv/60',\n    'nv=600' => 'Nv/600',\n    'nv=6000' => 'Nv/6000',\n    'nv=60000' => 'Nv/60000',\n    'nv=7' => 'Nv/7',\n    'nv=7/2' => 'Nv/7_2',\n    'nv=7/8' => 'Nv/7_8',\n    'nv=70' => 'Nv/70',\n    'nv=700' => 'Nv/700',\n    'nv=7000' => 'Nv/7000',\n    'nv=70000' => 'Nv/70000',\n    'nv=8' => 'Nv/8',\n    'nv=80' => 'Nv/80',\n    'nv=800' => 'Nv/800',\n    'nv=8000' => 'Nv/8000',\n    'nv=80000' => 'Nv/80000',\n    'nv=9' => 'Nv/9',\n    'nv=9/2' => 'Nv/9_2',\n    'nv=90' => 'Nv/90',\n    'nv=900' => 'Nv/900',\n    'nv=9000' => 'Nv/9000',\n    'nv=90000' => 'Nv/90000',\n);\n\n# Maps property, table to file for those using loose matching\n%utf8::loose_to_file_of = (\n    'aegeannumbers' => 'Blk/AegeanN"..., 4096) = 4096
22042 read(4, "\n    'bc=lro' => 'Bc/LRO',\n    'bc=nonspacingmark' => 'Bc/NSM',\n    'bc=nsm' => 'Bc/NSM',\n    'bc=on' => 'Bc/ON',\n    'bc=otherneutral' => 'Bc/ON',\n    'bc=paragraphseparator' => 'Bc/B',\n    'bc=pdf' => 'Bc/PDF',\n    'bc=popdirectionalformat' => 'Bc/PDF',\n    'bc=r' => 'Bc/R',\n    'bc=righttoleft' => 'Bc/R',\n    'bc=righttoleftembedding' => 'Bc/RLE',\n    'bc=righttoleftoverride' => 'Bc/RLO',\n    'bc=rle' => 'Bc/RLE',\n    'bc=rlo' => 'Bc/RLO',\n    'bc=s' => 'Bc/S',\n    'bc=segmentseparator' => 'Bc/S',\n    'bc=whitespace' => 'Bc/WS',\n    'bc=ws' => 'Bc/WS',\n    'beng' => 'Sc/Beng',\n    'bengali' => 'Sc/Beng',\n    'bidic' => 'BidiC/Y',\n    'bidic=f' => 'BidiC/N',\n    'bidic=false' => 'BidiC/N',\n    'bidic=n' => 'BidiC/N',\n    'bidic=no' => 'BidiC/N',\n    'bidic=t' => 'BidiC/Y',\n    'bidic=true' => 'BidiC/Y',\n    'bidic=y' => 'BidiC/Y',\n    'bidic=yes' => 'BidiC/Y',\n    'bidicontrol' => 'BidiC/Y',\n    'bidim' => 'BidiM/Y',\n    'bidim=f' => 'BidiM/N',\n    'bidim=false' => 'BidiM/N',\n    'bidim=n' => 'BidiM/N',\n    'bidim=no' => 'BidiM/N',\n    'bidim=t' => 'BidiM/Y',\n    'bidim=true' => 'BidiM/Y',\n    'bidim=y' => 'BidiM/Y',\n    'bidim=yes' => 'BidiM/Y',\n    'bidimirrored' => 'BidiM/Y',\n    'blank' => 'Perl/Blank',\n    'blk=aegeannumbers' => 'Blk/AegeanNu',\n    'blk=alphabeticpresentationforms' => 'Blk/Alphabet',\n    'blk=ancientgreekmusicalnotation' => 'Blk/Ancient2',\n    'blk=ancientgreeknumbers' => 'Blk/AncientG',\n    'blk=ancientsymbols' => 'Blk/AncientS',\n    'blk=arabic' => 'Blk/Arabic',\n    'blk=arabicpresentationformsa' => 'Blk/ArabicPr',\n    'blk=arabicpresentationformsb' => 'Blk/ArabicP2',\n    'blk=arabicsupplement' => 'Blk/ArabicSu',\n    'blk=armenian' => 'Blk/Armenian',\n    'blk=arrows' => 'Blk/Arrows',\n    'blk=ascii' => 'Blk/ASCII',\n    'blk=avestan' => 'Blk/Avestan',\n    'blk=balinese' => 'Blk/Balinese',\n    'blk=bamum' => 'Blk/Bamum',\n    'blk=basiclatin' => 'Blk/ASCII',\n    'blk=bengali' => 'Blk/Bengali',\n    'blk=blockelements' => 'Blk/BlockEle',\n    'blk=bopomofo' => 'Blk/Bopomofo',\n    'blk=bopomofo"..., 4096) = 4096
22042 brk(0x848a000)                    = 0x848a000
22042 read(4, "es' => 'Blk/DominoTi',\n    'blk=egyptianhieroglyphs' => 'Blk/Egyptian',\n    'blk=enclosedalphanumerics' => 'Blk/Enclosed',\n    'blk=enclosedalphanumericsupplement' => 'Blk/Enclose4',\n    'blk=enclosedcjklettersandmonths' => 'Blk/Enclose2',\n    'blk=enclosedideographicsupplement' => 'Blk/Enclose3',\n    'blk=ethiopic' => 'Blk/Ethiopic',\n    'blk=ethiopicextended' => 'Blk/Ethiopi2',\n    'blk=ethiopicsupplement' => 'Blk/Ethiopi3',\n    'blk=generalpunctuation' => 'Blk/GeneralP',\n    'blk=geometricshapes' => 'Blk/Geometri',\n    'blk=georgian' => 'Blk/Georgian',\n    'blk=georgiansupplement' => 'Blk/Georgia2',\n    'blk=glagolitic' => 'Blk/Glagolit',\n    'blk=gothic' => 'Blk/Gothic',\n    'blk=greek' => 'Blk/Greek',\n    'blk=greekandcoptic' => 'Blk/Greek',\n    'blk=greekextended' => 'Blk/GreekExt',\n    'blk=gujarati' => 'Blk/Gujarati',\n    'blk=gurmukhi' => 'Blk/Gurmukhi',\n    'blk=halfwidthandfullwidthforms' => 'Blk/Halfwidt',\n    'blk=hangulcompatibilityjamo' => 'Blk/HangulCo',\n    'blk=hanguljamo' => 'Blk/HangulJa',\n    'blk=hanguljamoextendeda' => 'Blk/HangulJ2',\n    'blk=hanguljamoextendedb' => 'Blk/HangulJ3',\n    'blk=hangulsyllables' => 'Blk/HangulSy',\n    'blk=hanunoo' => 'Blk/Hanunoo',\n    'blk=hebrew' => 'Blk/Hebrew',\n    'blk=highprivateusesurrogates' => 'Blk/HighPriv',\n    'blk=highsurrogates' => 'Blk/HighSurr',\n    'blk=hiragana' => 'Blk/Hiragana',\n    'blk=ideographicdescriptioncharacters' => 'Blk/Ideograp',\n    'blk=imperialaramaic' => 'Blk/Imperial',\n    'blk=inscriptionalpahlavi' => 'Blk/Inscript',\n    'blk=inscriptionalparthian' => 'Blk/Inscrip2',\n    'blk=ipaextensions' => 'Blk/IPAExten',\n    'blk=javanese' => 'Blk/Javanese',\n    'blk=kaithi' => 'Blk/Kaithi',\n    'blk=kanbun' => 'Blk/Kanbun',\n    'blk=kangxiradicals' => 'Blk/KangxiRa',\n    'blk=kannada' => 'Blk/Kannada',\n    'blk=katakana' => 'Blk/Katakana',\n    'blk=katakanaphoneticextensions' => 'Blk/Katakan2',\n    'blk=kayahli' => 'Blk/KayahLi',\n    'blk=kharoshthi' => 'Blk/Kharosht',\n    'blk=khmer' => 'Blk/Khmer',\n    'blk=khmersymbols' => 'Blk/Khme"..., 4096) = 4096
22042 read(4, "k=phoneticextensions' => 'Blk/Phonetic',\n    'blk=phoneticextensionssupplement' => 'Blk/Phoneti2',\n    'blk=privateuse' => 'Blk/PrivateU',\n    'blk=privateusearea' => 'Blk/PrivateU',\n    'blk=rejang' => 'Blk/Rejang',\n    'blk=ruminumeralsymbols' => 'Blk/RumiNume',\n    'blk=runic' => 'Blk/Runic',\n    'blk=samaritan' => 'Blk/Samarita',\n    'blk=saurashtra' => 'Blk/Saurasht',\n    'blk=shavian' => 'Blk/Shavian',\n    'blk=sinhala' => 'Blk/Sinhala',\n    'blk=smallformvariants' => 'Blk/SmallFor',\n    'blk=spacingmodifierletters' => 'Blk/SpacingM',\n    'blk=specials' => 'Blk/Specials',\n    'blk=sundanese' => 'Blk/Sundanes',\n    'blk=superscriptsandsubscripts' => 'Blk/Superscr',\n    'blk=supplementalarrowsa' => 'Blk/Suppleme',\n    'blk=supplementalarrowsb' => 'Blk/Supplem2',\n    'blk=supplementalmathematicaloperators' => 'Blk/Supplem6',\n    'blk=supplementalpunctuation' => 'Blk/Supplem3',\n    'blk=supplementaryprivateuseareaa' => 'Blk/Supplem4',\n    'blk=supplementaryprivateuseareab' => 'Blk/Supplem5',\n    'blk=sylotinagri' => 'Blk/SylotiNa',\n    'blk=syriac' => 'Blk/Syriac',\n    'blk=tagalog' => 'Blk/Tagalog',\n    'blk=tagbanwa' => 'Blk/Tagbanwa',\n    'blk=tags' => 'Blk/Tags',\n    'blk=taile' => 'Blk/TaiLe',\n    'blk=taitham' => 'Blk/TaiTham',\n    'blk=taiviet' => 'Blk/TaiViet',\n    'blk=taixuanjingsymbols' => 'Blk/TaiXuanJ',\n    'blk=tamil' => 'Blk/Tamil',\n    'blk=telugu' => 'Blk/Telugu',\n    'blk=thaana' => 'Blk/Thaana',\n    'blk=thai' => 'Blk/Thai',\n    'blk=tibetan' => 'Blk/Tibetan',\n    'blk=tifinagh' => 'Blk/Tifinagh',\n    'blk=ugaritic' => 'Blk/Ugaritic',\n    'blk=unifiedcanadianaboriginalsyllabics' => 'Blk/Canadian',\n    'blk=unifiedcanadianaboriginalsyllabicsextended' => 'Blk/UnifiedC',\n    'blk=vai' => 'Blk/Vai',\n    'blk=variationselectors' => 'Blk/Variatio',\n    'blk=variationselectorssupplement' => 'Blk/Variati2',\n    'blk=vedicextensions' => 'Blk/VedicExt',\n    'blk=verticalforms' => 'Blk/Vertical',\n    'blk=yijinghexagramsymbols' => 'Blk/YijingHe',\n    'blk=yiradicals' => 'Blk/YiRadica',\n    'blk=yisyllab"..., 4096) = 4096
22042 read(4, "ay' => 'Ccc/OV',\n    'ccc=r' => 'Ccc/R',\n    'ccc=right' => 'Ccc/R',\n    'ccc=virama' => 'Ccc/VR',\n    'ccc=vr' => 'Ccc/VR',\n    'ce' => 'CE/Y',\n    'ce=f' => 'CE/N',\n    'ce=false' => 'CE/N',\n    'ce=n' => 'CE/N',\n    'ce=no' => 'CE/N',\n    'ce=t' => 'CE/Y',\n    'ce=true' => 'CE/Y',\n    'ce=y' => 'CE/Y',\n    'ce=yes' => 'CE/Y',\n    'cf' => 'Gc/Cf',\n    'cham' => 'Sc/Cham',\n    'changeswhencasefolded' => 'CWCF/Y',\n    'changeswhencasemapped' => 'CWCM/Y',\n    'changeswhenlowercased' => 'CWL/Y',\n    'changeswhennfkccasefolded' => 'CWKCF/Y',\n    'changeswhentitlecased' => 'CWT/Y',\n    'changeswhenuppercased' => 'CWU/Y',\n    'cher' => 'Sc/Cher',\n    'cherokee' => 'Sc/Cher',\n    'ci' => 'CI/Y',\n    'ci=f' => 'CI/N',\n    'ci=false' => 'CI/N',\n    'ci=n' => 'CI/N',\n    'ci=no' => 'CI/N',\n    'ci=t' => 'CI/Y',\n    'ci=true' => 'CI/Y',\n    'ci=y' => 'CI/Y',\n    'ci=yes' => 'CI/Y',\n    'cjkcompatibility' => 'Blk/CJKCompa',\n    'cjkcompatibilityforms' => 'Blk/CJKComp2',\n    'cjkcompatibilityideographs' => 'Blk/CJKComp3',\n    'cjkcompatibilityideographssupplement' => 'Blk/CJKComp4',\n    'cjkradicalssupplement' => 'Blk/CJKRadic',\n    'cjkstrokes' => 'Blk/CJKStrok',\n    'cjksymbolsandpunctuation' => 'Blk/CJKSymbo',\n    'cjkunifiedideographs' => 'Blk/CJKUnifi',\n    'cjkunifiedideographsextensiona' => 'Blk/CJKUnif2',\n    'cjkunifiedideographsextensionb' => 'Blk/CJKUnif3',\n    'cjkunifiedideographsextensionc' => 'Blk/CJKUnif4',\n    'closepunctuation' => 'Gc/Pe',\n    'cn' => 'Gc/Cn',\n    'cntrl' => 'Gc/Cc',\n    'co' => 'Gc/Co',\n    'combiningdiacriticalmarks' => 'Blk/Combini3',\n    'combiningdiacriticalmarksforsymbols' => 'Blk/Combini2',\n    'combiningdiacriticalmarkssupplement' => 'Blk/Combini4',\n    'combininghalfmarks' => 'Blk/Combinin',\n    'combiningmarksforsymbols' => 'Blk/Combini2',\n    'common' => 'Sc/Zyyy',\n    'commonindicnumberforms' => 'Blk/CommonIn',\n    'compex' => 'CompEx/Y',\n    'compex=f' => 'CompEx/N',\n    'compex=false' => 'CompEx/N',\n    'compex=n' => 'CompEx/N',\n    'compex=no' => 'CompEx/N',\n    'compex=t' =>"..., 4096) = 4096
22042 read(4, "rillic' => 'Sc/Cyrl',\n    'cyrillicextendeda' => 'Blk/Cyrilli2',\n    'cyrillicextendedb' => 'Blk/Cyrilli3',\n    'cyrillicsupplement' => 'Blk/Cyrilli4',\n    'cyrillicsupplementary' => 'Blk/Cyrilli4',\n    'cyrl' => 'Sc/Cyrl',\n    'dash' => 'Dash/Y',\n    'dash=f' => 'Dash/N',\n    'dash=false' => 'Dash/N',\n    'dash=n' => 'Dash/N',\n    'dash=no' => 'Dash/N',\n    'dash=t' => 'Dash/Y',\n    'dash=true' => 'Dash/Y',\n    'dash=y' => 'Dash/Y',\n    'dash=yes' => 'Dash/Y',\n    'dashpunctuation' => 'Gc/Pd',\n    'decimalnumber' => 'Nt/De',\n    'defaultignorablecodepoint' => 'DI/Y',\n    'dep' => 'Dep/Y',\n    'dep=f' => 'Dep/N',\n    'dep=false' => 'Dep/N',\n    'dep=n' => 'Dep/N',\n    'dep=no' => 'Dep/N',\n    'dep=t' => 'Dep/Y',\n    'dep=true' => 'Dep/Y',\n    'dep=y' => 'Dep/Y',\n    'dep=yes' => 'Dep/Y',\n    'deprecated' => 'Dep/Y',\n    'deseret' => 'Blk/Deseret',\n    'deva' => 'Sc/Deva',\n    'devanagari' => 'Sc/Deva',\n    'devanagariextended' => 'Blk/Devanag2',\n    'di' => 'DI/Y',\n    'di=f' => 'DI/N',\n    'di=false' => 'DI/N',\n    'di=n' => 'DI/N',\n    'di=no' => 'DI/N',\n    'di=t' => 'DI/Y',\n    'di=true' => 'DI/Y',\n    'di=y' => 'DI/Y',\n    'di=yes' => 'DI/Y',\n    'dia' => 'Dia/Y',\n    'dia=f' => 'Dia/N',\n    'dia=false' => 'Dia/N',\n    'dia=n' => 'Dia/N',\n    'dia=no' => 'Dia/N',\n    'dia=t' => 'Dia/Y',\n    'dia=true' => 'Dia/Y',\n    'dia=y' => 'Dia/Y',\n    'dia=yes' => 'Dia/Y',\n    'diacritic' => 'Dia/Y',\n    'digit' => 'Nt/De',\n    'dingbats' => 'Blk/Dingbats',\n    'dominotiles' => 'Blk/DominoTi',\n    'dsrt' => 'Blk/Deseret',\n    'dt=can' => 'NFDQC/N',\n    'dt=canonical' => 'NFDQC/N',\n    'dt=circle' => 'Dt/Enc',\n    'dt=com' => 'Dt/Com',\n    'dt=compat' => 'Dt/Com',\n    'dt=enc' => 'Dt/Enc',\n    'dt=fin' => 'Dt/Fin',\n    'dt=final' => 'Dt/Fin',\n    'dt=font' => 'Dt/Font',\n    'dt=fra' => 'Dt/Fra',\n    'dt=fraction' => 'Dt/Fra',\n    'dt=init' => 'Dt/Init',\n    'dt=initial' => 'Dt/Init',\n    'dt=iso' => 'Dt/Iso',\n    'dt=isolated' => 'Dt/Iso',\n    'dt=med' => 'Dt/Med',\n    'dt=medial' => 'Dt/Med',\n    'dt=nar' => 'Dt/Nar',\n"..., 4096) = 4096
22042 read(4, "',\n    'gc=finalpunctuation' => 'Gc/Pf',\n    'gc=format' => 'Gc/Cf',\n    'gc=initialpunctuation' => 'Gc/Pi',\n    'gc=l' => 'Gc/L',\n    'gc=l&' => 'Gc/LC',\n    'gc=l_' => 'Gc/LC',\n    'gc=lc' => 'Gc/LC',\n    'gc=letter' => 'Gc/L',\n    'gc=letternumber' => 'Gc/Nl',\n    'gc=lineseparator' => 'Gc/Zl',\n    'gc=ll' => 'Gc/Ll',\n    'gc=lm' => 'Gc/Lm',\n    'gc=lo' => 'Gc/Lo',\n    'gc=lowercaseletter' => 'Gc/Ll',\n    'gc=lt' => 'Gc/Lt',\n    'gc=lu' => 'Gc/Lu',\n    'gc=m' => 'Gc/M',\n    'gc=mark' => 'Gc/M',\n    'gc=mathsymbol' => 'Gc/Sm',\n    'gc=mc' => 'Gc/Mc',\n    'gc=me' => 'Gc/Me',\n    'gc=mn' => 'Gc/Mn',\n    'gc=modifierletter' => 'Gc/Lm',\n    'gc=modifiersymbol' => 'Gc/Sk',\n    'gc=n' => 'Gc/N',\n    'gc=nd' => 'Nt/De',\n    'gc=nl' => 'Gc/Nl',\n    'gc=no' => 'Gc/No',\n    'gc=nonspacingmark' => 'Gc/Mn',\n    'gc=number' => 'Gc/N',\n    'gc=openpunctuation' => 'Gc/Ps',\n    'gc=other' => 'Gc/C',\n    'gc=otherletter' => 'Gc/Lo',\n    'gc=othernumber' => 'Gc/No',\n    'gc=otherpunctuation' => 'Gc/Po',\n    'gc=othersymbol' => 'Gc/So',\n    'gc=p' => 'Gc/P',\n    'gc=paragraphseparator' => 'Gc/Zp',\n    'gc=pc' => 'WB/EX',\n    'gc=pd' => 'Gc/Pd',\n    'gc=pe' => 'Gc/Pe',\n    'gc=pf' => 'Gc/Pf',\n    'gc=pi' => 'Gc/Pi',\n    'gc=po' => 'Gc/Po',\n    'gc=privateuse' => 'Gc/Co',\n    'gc=ps' => 'Gc/Ps',\n    'gc=punct' => 'Gc/P',\n    'gc=punctuation' => 'Gc/P',\n    'gc=s' => 'Gc/S',\n    'gc=sc' => 'Gc/Sc',\n    'gc=separator' => 'Gc/Z',\n    'gc=sk' => 'Gc/Sk',\n    'gc=sm' => 'Gc/Sm',\n    'gc=so' => 'Gc/So',\n    'gc=spaceseparator' => 'Gc/Zs',\n    'gc=spacingmark' => 'Gc/Mc',\n    'gc=surrogate' => 'Gc/Cs',\n    'gc=symbol' => 'Gc/S',\n    'gc=titlecaseletter' => 'Gc/Lt',\n    'gc=unassigned' => 'Gc/Cn',\n    'gc=uppercaseletter' => 'Gc/Lu',\n    'gc=z' => 'Gc/Z',\n    'gc=zl' => 'Gc/Zl',\n    'gc=zp' => 'Gc/Zp',\n    'gc=zs' => 'Gc/Zs',\n    'gcb=cn' => 'GCB/CN',\n    'gcb=control' => 'GCB/CN',\n    'gcb=cr' => 'GCB/CR',\n    'gcb=ex' => 'GCB/EX',\n    'gcb=extend' => 'GCB/EX',\n    'gcb=l' => 'GCB/L',\n    'gcb=lf' => 'GCB/LF',\n    'gcb=lv' => 'GCB/LV',\n  "..., 4096) = 4096
22042 read(4, "ex/Y',\n    'hex=y' => 'Hex/Y',\n    'hex=yes' => 'Hex/Y',\n    'hexdigit' => 'Hex/Y',\n    'highprivateusesurrogates' => 'Blk/HighPriv',\n    'highsurrogates' => 'Blk/HighSurr',\n    'hira' => 'Sc/Hira',\n    'hiragana' => 'Sc/Hira',\n    'horizspace' => 'Perl/Blank',\n    'hst=l' => 'GCB/L',\n    'hst=leadingjamo' => 'GCB/L',\n    'hst=lv' => 'GCB/LV',\n    'hst=lvsyllable' => 'GCB/LV',\n    'hst=lvt' => 'GCB/LVT',\n    'hst=lvtsyllable' => 'GCB/LVT',\n    'hst=na' => 'Hst/NA',\n    'hst=notapplicable' => 'Hst/NA',\n    'hst=t' => 'GCB/T',\n    'hst=trailingjamo' => 'GCB/T',\n    'hst=v' => 'GCB/V',\n    'hst=voweljamo' => 'GCB/V',\n    'hyphen' => 'Hyphen/Y',\n    'hyphen=f' => 'Hyphen/N',\n    'hyphen=false' => 'Hyphen/N',\n    'hyphen=n' => 'Hyphen/N',\n    'hyphen=no' => 'Hyphen/N',\n    'hyphen=t' => 'Hyphen/Y',\n    'hyphen=true' => 'Hyphen/Y',\n    'hyphen=y' => 'Hyphen/Y',\n    'hyphen=yes' => 'Hyphen/Y',\n    'idc' => 'IDC/Y',\n    'idc=f' => 'IDC/N',\n    'idc=false' => 'IDC/N',\n    'idc=n' => 'IDC/N',\n    'idc=no' => 'IDC/N',\n    'idc=t' => 'IDC/Y',\n    'idc=true' => 'IDC/Y',\n    'idc=y' => 'IDC/Y',\n    'idc=yes' => 'IDC/Y',\n    'idcontinue' => 'IDC/Y',\n    'ideo' => 'Ideo/Y',\n    'ideo=f' => 'Ideo/N',\n    'ideo=false' => 'Ideo/N',\n    'ideo=n' => 'Ideo/N',\n    'ideo=no' => 'Ideo/N',\n    'ideo=t' => 'Ideo/Y',\n    'ideo=true' => 'Ideo/Y',\n    'ideo=y' => 'Ideo/Y',\n    'ideo=yes' => 'Ideo/Y',\n    'ideographic' => 'Ideo/Y',\n    'ideographicdescriptioncharacters' => 'Blk/Ideograp',\n    'ids' => 'IDS/Y',\n    'ids=f' => 'IDS/N',\n    'ids=false' => 'IDS/N',\n    'ids=n' => 'IDS/N',\n    'ids=no' => 'IDS/N',\n    'ids=t' => 'IDS/Y',\n    'ids=true' => 'IDS/Y',\n    'ids=y' => 'IDS/Y',\n    'ids=yes' => 'IDS/Y',\n    'idsb' => 'IDSB/Y',\n    'idsb=f' => 'IDSB/N',\n    'idsb=false' => 'IDSB/N',\n    'idsb=n' => 'IDSB/N',\n    'idsb=no' => 'IDSB/N',\n    'idsb=t' => 'IDSB/Y',\n    'idsb=true' => 'IDSB/Y',\n    'idsb=y' => 'IDSB/Y',\n    'idsb=yes' => 'IDSB/Y',\n    'idsbinaryoperator' => 'IDSB/Y',\n    'idst' => 'IDST/Y',\n    'idst=f' => 'IDST/N',\n    'idst=f"..., 4096) = 4096
22042 read(4, "mbiningdiacriticalmarks' => 'Blk/Combini3',\n    'incombiningdiacriticalmarksforsymbols' => 'Blk/Combini2',\n    'incombiningdiacriticalmarkssupplement' => 'Blk/Combini4',\n    'incombininghalfmarks' => 'Blk/Combinin',\n    'incombiningmarksforsymbols' => 'Blk/Combini2',\n    'incommonindicnumberforms' => 'Blk/CommonIn',\n    'incontrolpictures' => 'Blk/ControlP',\n    'incoptic' => 'Blk/Coptic',\n    'incountingrodnumerals' => 'Blk/Counting',\n    'incuneiform' => 'Blk/Cuneifor',\n    'incuneiformnumbersandpunctuation' => 'Blk/Cuneifo2',\n    'incurrencysymbols' => 'Blk/Currency',\n    'incypriotsyllabary' => 'Blk/CypriotS',\n    'incyrillic' => 'Blk/Cyrillic',\n    'incyrillicextendeda' => 'Blk/Cyrilli2',\n    'incyrillicextendedb' => 'Blk/Cyrilli3',\n    'incyrillicsupplement' => 'Blk/Cyrilli4',\n    'incyrillicsupplementary' => 'Blk/Cyrilli4',\n    'indeseret' => 'Blk/Deseret',\n    'indevanagari' => 'Blk/Devanaga',\n    'indevanagariextended' => 'Blk/Devanag2',\n    'indingbats' => 'Blk/Dingbats',\n    'indominotiles' => 'Blk/DominoTi',\n    'inegyptianhieroglyphs' => 'Blk/Egyptian',\n    'inenclosedalphanumerics' => 'Blk/Enclosed',\n    'inenclosedalphanumericsupplement' => 'Blk/Enclose4',\n    'inenclosedcjklettersandmonths' => 'Blk/Enclose2',\n    'inenclosedideographicsupplement' => 'Blk/Enclose3',\n    'inethiopic' => 'Blk/Ethiopic',\n    'inethiopicextended' => 'Blk/Ethiopi2',\n    'inethiopicsupplement' => 'Blk/Ethiopi3',\n    'ingeneralpunctuation' => 'Blk/GeneralP',\n    'ingeometricshapes' => 'Blk/Geometri',\n    'ingeorgian' => 'Blk/Georgian',\n    'ingeorgiansupplement' => 'Blk/Georgia2',\n    'inglagolitic' => 'Blk/Glagolit',\n    'ingothic' => 'Blk/Gothic',\n    'ingreek' => 'Blk/Greek',\n    'ingreekandcoptic' => 'Blk/Greek',\n    'ingreekextended' => 'Blk/GreekExt',\n    'ingujarati' => 'Blk/Gujarati',\n    'ingurmukhi' => 'Blk/Gurmukhi',\n    'inhalfwidthandfullwidthforms' => 'Blk/Halfwidt',\n    'inhangulcompatibilityjamo' => 'Blk/HangulCo',\n    'inhanguljamo' => 'Blk/HangulJa',\n    'inhanguljamoextendeda' => 'Blk/HangulJ2',\n    'in"..., 4096) = 4096
22042 brk(0x84ab000)                    = 0x84ab000
22042 read(4, "llaneoussymbolsandarrows' => 'Blk/Miscell3',\n    'inmiscellaneoustechnical' => 'Blk/Miscell2',\n    'inmodifiertoneletters' => 'Blk/Modifier',\n    'inmongolian' => 'Blk/Mongolia',\n    'inmusicalsymbols' => 'Blk/MusicalS',\n    'inmyanmar' => 'Blk/Myanmar',\n    'inmyanmarextendeda' => 'Blk/MyanmarE',\n    'innewtailue' => 'Blk/NewTaiLu',\n    'innko' => 'Blk/NKo',\n    'innoblock' => 'Blk/NoBlock',\n    'innumberforms' => 'Blk/NumberFo',\n    'inogham' => 'Blk/Ogham',\n    'inolchiki' => 'Blk/OlChiki',\n    'inolditalic' => 'Blk/OldItali',\n    'inoldpersian' => 'Blk/OldPersi',\n    'inoldsoutharabian' => 'Blk/OldSouth',\n    'inoldturkic' => 'Blk/OldTurki',\n    'inopticalcharacterrecognition' => 'Blk/OpticalC',\n    'inoriya' => 'Blk/Oriya',\n    'inosmanya' => 'Blk/Osmanya',\n    'inphagspa' => 'Blk/PhagsPa',\n    'inphaistosdisc' => 'Blk/Phaistos',\n    'inphoenician' => 'Blk/Phoenici',\n    'inphoneticextensions' => 'Blk/Phonetic',\n    'inphoneticextensionssupplement' => 'Blk/Phoneti2',\n    'inprivateuse' => 'Blk/PrivateU',\n    'inprivateusearea' => 'Blk/PrivateU',\n    'inrejang' => 'Blk/Rejang',\n    'inruminumeralsymbols' => 'Blk/RumiNume',\n    'inrunic' => 'Blk/Runic',\n    'insamaritan' => 'Blk/Samarita',\n    'insaurashtra' => 'Blk/Saurasht',\n    'inscriptionalpahlavi' => 'Sc/Phli',\n    'inscriptionalparthian' => 'Sc/Prti',\n    'inshavian' => 'Blk/Shavian',\n    'insinhala' => 'Blk/Sinhala',\n    'insmallformvariants' => 'Blk/SmallFor',\n    'inspacingmodifierletters' => 'Blk/SpacingM',\n    'inspecials' => 'Blk/Specials',\n    'insundanese' => 'Blk/Sundanes',\n    'insuperscriptsandsubscripts' => 'Blk/Superscr',\n    'insupplementalarrowsa' => 'Blk/Suppleme',\n    'insupplementalarrowsb' => 'Blk/Supplem2',\n    'insupplementalmathematicaloperators' => 'Blk/Supplem6',\n    'insupplementalpunctuation' => 'Blk/Supplem3',\n    'insupplementaryprivateuseareaa' => 'Blk/Supplem4',\n    'insupplementaryprivateuseareab' => 'Blk/Supplem5',\n    'insylotinagri' => 'Blk/SylotiNa',\n    'insyriac' => 'Blk/Syriac',\n    'intagalog' => 'Blk/Tagalog',\n   "..., 4096) = 4096
22042 read(4, "dic' => 'BidiC/Y',\n    'isbidicontrol' => 'BidiC/Y',\n    'isbidim' => 'BidiM/Y',\n    'isbidimirrored' => 'BidiM/Y',\n    'isblank' => 'Perl/Blank',\n    'isblockelements' => 'Blk/BlockEle',\n    'isbopo' => 'Sc/Bopo',\n    'isbopomofo' => 'Sc/Bopo',\n    'isbopomofoextended' => 'Blk/Bopomof2',\n    'isboxdrawing' => 'Blk/BoxDrawi',\n    'isbrai' => 'Blk/BrailleP',\n    'isbraille' => 'Blk/BrailleP',\n    'isbraillepatterns' => 'Blk/BrailleP',\n    'isbugi' => 'Sc/Bugi',\n    'isbuginese' => 'Sc/Bugi',\n    'isbuhd' => 'Sc/Buhd',\n    'isbuhid' => 'Sc/Buhd',\n    'isbyzantinemusicalsymbols' => 'Blk/Byzantin',\n    'isc' => 'Gc/C',\n    'iscanadianaboriginal' => 'Sc/Cans',\n    'iscanadiansyllabics' => 'Blk/Canadian',\n    'iscans' => 'Sc/Cans',\n    'iscari' => 'Sc/Cari',\n    'iscarian' => 'Sc/Cari',\n    'iscased' => 'Cased/Y',\n    'iscasedletter' => 'Gc/LC',\n    'iscaseignorable' => 'CI/Y',\n    'iscc' => 'Gc/Cc',\n    'isce' => 'CE/Y',\n    'iscf' => 'Gc/Cf',\n    'ischam' => 'Sc/Cham',\n    'ischangeswhencasefolded' => 'CWCF/Y',\n    'ischangeswhencasemapped' => 'CWCM/Y',\n    'ischangeswhenlowercased' => 'CWL/Y',\n    'ischangeswhennfkccasefolded' => 'CWKCF/Y',\n    'ischangeswhentitlecased' => 'CWT/Y',\n    'ischangeswhenuppercased' => 'CWU/Y',\n    'ischer' => 'Sc/Cher',\n    'ischerokee' => 'Sc/Cher',\n    'isci' => 'CI/Y',\n    'iscjkcompatibility' => 'Blk/CJKCompa',\n    'iscjkcompatibilityforms' => 'Blk/CJKComp2',\n    'iscjkcompatibilityideographs' => 'Blk/CJKComp3',\n    'iscjkcompatibilityideographssupplement' => 'Blk/CJKComp4',\n    'iscjkradicalssupplement' => 'Blk/CJKRadic',\n    'iscjkstrokes' => 'Blk/CJKStrok',\n    'iscjksymbolsandpunctuation' => 'Blk/CJKSymbo',\n    'iscjkunifiedideographs' => 'Blk/CJKUnifi',\n    'iscjkunifiedideographsextensiona' => 'Blk/CJKUnif2',\n    'iscjkunifiedideographsextensionb' => 'Blk/CJKUnif3',\n    'iscjkunifiedideographsextensionc' => 'Blk/CJKUnif4',\n    'isclosepunctuation' => 'Gc/Pe',\n    'iscn' => 'Gc/Cn',\n    'iscntrl' => 'Gc/Cc',\n    'isco' => 'Gc/Co',\n    'iscombiningdiacriticalmarks' => 'Blk/Combi"..., 4096) = 4096
22042 read(4, "lose2',\n    'isenclosedideographicsupplement' => 'Blk/Enclose3',\n    'isenclosingmark' => 'Gc/Me',\n    'isethi' => 'Sc/Ethi',\n    'isethiopic' => 'Sc/Ethi',\n    'isethiopicextended' => 'Blk/Ethiopi2',\n    'isethiopicsupplement' => 'Blk/Ethiopi3',\n    'isext' => 'Ext/Y',\n    'isextender' => 'Ext/Y',\n    'isfinalpunctuation' => 'Gc/Pf',\n    'isformat' => 'Gc/Cf',\n    'isfullcompositionexclusion' => 'CompEx/Y',\n    'isgeneralpunctuation' => 'Blk/GeneralP',\n    'isgeometricshapes' => 'Blk/Geometri',\n    'isgeor' => 'Sc/Geor',\n    'isgeorgian' => 'Sc/Geor',\n    'isgeorgiansupplement' => 'Blk/Georgia2',\n    'isglag' => 'Sc/Glag',\n    'isglagolitic' => 'Sc/Glag',\n    'isgoth' => 'Sc/Goth',\n    'isgothic' => 'Sc/Goth',\n    'isgraph' => 'Perl/Graph',\n    'isgraphemebase' => 'GrBase/Y',\n    'isgraphemeextend' => 'GrExt/Y',\n    'isgrbase' => 'GrBase/Y',\n    'isgreek' => 'Sc/Grek',\n    'isgreekandcoptic' => 'Blk/Greek',\n    'isgreekextended' => 'Blk/GreekExt',\n    'isgrek' => 'Sc/Grek',\n    'isgrext' => 'GrExt/Y',\n    'isgujarati' => 'Sc/Gujr',\n    'isgujr' => 'Sc/Gujr',\n    'isgurmukhi' => 'Sc/Guru',\n    'isguru' => 'Sc/Guru',\n    'ishalfwidthandfullwidthforms' => 'Blk/Halfwidt',\n    'ishan' => 'Sc/Han',\n    'ishang' => 'Sc/Hang',\n    'ishangul' => 'Sc/Hang',\n    'ishangulcompatibilityjamo' => 'Blk/HangulCo',\n    'ishanguljamo' => 'Blk/HangulJa',\n    'ishanguljamoextendeda' => 'Blk/HangulJ2',\n    'ishanguljamoextendedb' => 'Blk/HangulJ3',\n    'ishangulsyllables' => 'Blk/HangulSy',\n    'ishani' => 'Sc/Han',\n    'ishano' => 'Sc/Hano',\n    'ishanunoo' => 'Sc/Hano',\n    'ishebr' => 'Sc/Hebr',\n    'ishebrew' => 'Sc/Hebr',\n    'ishex' => 'Hex/Y',\n    'ishexdigit' => 'Hex/Y',\n    'ishighprivateusesurrogates' => 'Blk/HighPriv',\n    'ishighsurrogates' => 'Blk/HighSurr',\n    'ishira' => 'Sc/Hira',\n    'ishiragana' => 'Sc/Hira',\n    'ishorizspace' => 'Perl/Blank',\n    'ishyphen' => 'Hyphen/Y',\n    'isidc' => 'IDC/Y',\n    'isidcontinue' => 'IDC/Y',\n    'isideo' => 'Ideo/Y',\n    'isideographic' => 'Ideo/Y',\n    'isideographicdescription"..., 4096) = 4096
22042 read(4, "Lisu',\n    'isll' => 'Gc/Ll',\n    'islm' => 'Gc/Lm',\n    'islo' => 'Gc/Lo',\n    'isloe' => 'GCB/PP',\n    'islogicalorderexception' => 'GCB/PP',\n    'islower' => 'Lower/Y',\n    'islowercase' => 'Lower/Y',\n    'islowercaseletter' => 'Gc/Ll',\n    'islowsurrogates' => 'Blk/LowSurro',\n    'islt' => 'Gc/Lt',\n    'islu' => 'Gc/Lu',\n    'islyci' => 'Sc/Lyci',\n    'islycian' => 'Sc/Lyci',\n    'islydi' => 'Sc/Lydi',\n    'islydian' => 'Sc/Lydi',\n    'ism' => 'Gc/M',\n    'ismahjongtiles' => 'Blk/MahjongT',\n    'ismalayalam' => 'Sc/Mlym',\n    'ismark' => 'Gc/M',\n    'ismath' => 'Math/Y',\n    'ismathematicalalphanumericsymbols' => 'Blk/Mathema2',\n    'ismathematicaloperators' => 'Blk/Mathemat',\n    'ismathsymbol' => 'Gc/Sm',\n    'ismc' => 'Gc/Mc',\n    'isme' => 'Gc/Me',\n    'ismeeteimayek' => 'Sc/Mtei',\n    'ismiscellaneousmathematicalsymbolsa' => 'Blk/Miscell4',\n    'ismiscellaneousmathematicalsymbolsb' => 'Blk/Miscell5',\n    'ismiscellaneoussymbols' => 'Blk/Miscella',\n    'ismiscellaneoussymbolsandarrows' => 'Blk/Miscell3',\n    'ismiscellaneoustechnical' => 'Blk/Miscell2',\n    'ismlym' => 'Sc/Mlym',\n    'ismn' => 'Gc/Mn',\n    'ismodifierletter' => 'Gc/Lm',\n    'ismodifiersymbol' => 'Gc/Sk',\n    'ismodifiertoneletters' => 'Blk/Modifier',\n    'ismong' => 'Sc/Mong',\n    'ismongolian' => 'Sc/Mong',\n    'ismtei' => 'Sc/Mtei',\n    'ismusicalsymbols' => 'Blk/MusicalS',\n    'ismyanmar' => 'Sc/Mymr',\n    'ismyanmarextendeda' => 'Blk/MyanmarE',\n    'ismymr' => 'Sc/Mymr',\n    'isn' => 'Gc/N',\n    'isnchar' => 'NChar/Y',\n    'isnd' => 'Nt/De',\n    'isnewtailue' => 'Sc/Talu',\n    'isnko' => 'Sc/Nko',\n    'isnkoo' => 'Sc/Nko',\n    'isnl' => 'Gc/Nl',\n    'isno' => 'Gc/No',\n    'isnoblock' => 'Blk/NoBlock',\n    'isnoncharactercodepoint' => 'NChar/Y',\n    'isnonspacingmark' => 'Gc/Mn',\n    'isnumber' => 'Gc/N',\n    'isnumberforms' => 'Blk/NumberFo',\n    'isoalpha' => 'OAlpha/Y',\n    'isodi' => 'ODI/Y',\n    'isogam' => 'Sc/Ogam',\n    'isogham' => 'Sc/Ogam',\n    'isogrext' => 'OGrExt/Y',\n    'isoidc' => 'OIDC/Y',\n    'isoids' => 'OIDS/Y',\n    "..., 4096) = 4096
22042 read(4, "ace' => 'Perl/PosixSpa',\n    'isposixupper' => 'Perl/PosixUpp',\n    'isprint' => 'Perl/Print',\n    'isprivateuse' => 'Gc/Co',\n    'isprivateusearea' => 'Blk/PrivateU',\n    'isprti' => 'Sc/Prti',\n    'isps' => 'Gc/Ps',\n    'ispunct' => 'Gc/P',\n    'ispunctuation' => 'Gc/P',\n    'isqaac' => 'Sc/Copt',\n    'isqaai' => 'Sc/Zinh',\n    'isqmark' => 'QMark/Y',\n    'isquotationmark' => 'QMark/Y',\n    'isradical' => 'Radical/Y',\n    'isrejang' => 'Sc/Rjng',\n    'isrjng' => 'Sc/Rjng',\n    'isruminumeralsymbols' => 'Blk/RumiNume',\n    'isrunic' => 'Sc/Runr',\n    'isrunr' => 'Sc/Runr',\n    'iss' => 'Gc/S',\n    'issamaritan' => 'Sc/Samr',\n    'issamr' => 'Sc/Samr',\n    'issarb' => 'Blk/OldSouth',\n    'issaur' => 'Sc/Saur',\n    'issaurashtra' => 'Sc/Saur',\n    'issc' => 'Gc/Sc',\n    'issd' => 'SD/Y',\n    'isseparator' => 'Gc/Z',\n    'isshavian' => 'Blk/Shavian',\n    'isshaw' => 'Blk/Shavian',\n    'issinh' => 'Sc/Sinh',\n    'issinhala' => 'Sc/Sinh',\n    'issk' => 'Gc/Sk',\n    'issm' => 'Gc/Sm',\n    'issmallformvariants' => 'Blk/SmallFor',\n    'isso' => 'Gc/So',\n    'issoftdotted' => 'SD/Y',\n    'isspace' => 'Space/Y',\n    'isspaceperl' => 'Perl/SpacePer',\n    'isspaceseparator' => 'Gc/Zs',\n    'isspacingmark' => 'Gc/Mc',\n    'isspacingmodifierletters' => 'Blk/SpacingM',\n    'isspecials' => 'Blk/Specials',\n    'issterm' => 'STerm/Y',\n    'issund' => 'Sc/Sund',\n    'issundanese' => 'Sc/Sund',\n    'issuperscriptsandsubscripts' => 'Blk/Superscr',\n    'issupplementalarrowsa' => 'Blk/Suppleme',\n    'issupplementalarrowsb' => 'Blk/Supplem2',\n    'issupplementalmathematicaloperators' => 'Blk/Supplem6',\n    'issupplementalpunctuation' => 'Blk/Supplem3',\n    'issupplementaryprivateuseareaa' => 'Blk/Supplem4',\n    'issupplementaryprivateuseareab' => 'Blk/Supplem5',\n    'issurrogate' => 'Gc/Cs',\n    'issylo' => 'Sc/Sylo',\n    'issylotinagri' => 'Sc/Sylo',\n    'issymbol' => 'Gc/S',\n    'issyrc' => 'Sc/Syrc',\n    'issyriac' => 'Sc/Syrc',\n    'istagalog' => 'Sc/Tglg',\n    'istagb' => 'Sc/Tagb',\n    'istagbanwa' => 'Sc/Tagb',\n    'istags' => '"..., 4096) = 4096
22042 read(4, "'iszzzz' => 'Sc/Zzzz',\n    'ital' => 'Sc/Ital',\n    'java' => 'Sc/Java',\n    'javanese' => 'Sc/Java',\n    'jg=ain' => 'Jg/Ain',\n    'jg=alaph' => 'Jg/Alaph',\n    'jg=alef' => 'Jg/Alef',\n    'jg=beh' => 'Jg/Beh',\n    'jg=beth' => 'Jg/Beth',\n    'jg=burushaskiyehbarree' => 'Jg/Burushas',\n    'jg=dal' => 'Jg/Dal',\n    'jg=dalathrish' => 'Jg/DalathRi',\n    'jg=e' => 'Jg/E',\n    'jg=farsiyeh' => 'Jg/FarsiYeh',\n    'jg=fe' => 'Jg/Fe',\n    'jg=feh' => 'Jg/Feh',\n    'jg=finalsemkath' => 'Jg/FinalSem',\n    'jg=gaf' => 'Jg/Gaf',\n    'jg=gamal' => 'Jg/Gamal',\n    'jg=hah' => 'Jg/Hah',\n    'jg=hamzaonhehgoal' => 'Jg/HamzaOnH',\n    'jg=he' => 'Jg/He',\n    'jg=heh' => 'Jg/Heh',\n    'jg=hehgoal' => 'Jg/HehGoal',\n    'jg=heth' => 'Jg/Heth',\n    'jg=kaf' => 'Jg/Kaf',\n    'jg=kaph' => 'Jg/Kaph',\n    'jg=khaph' => 'Jg/Khaph',\n    'jg=knottedheh' => 'Jg/KnottedH',\n    'jg=lam' => 'Jg/Lam',\n    'jg=lamadh' => 'Jg/Lamadh',\n    'jg=meem' => 'Jg/Meem',\n    'jg=mim' => 'Jg/Mim',\n    'jg=nojoininggroup' => 'Jg/NoJoinin',\n    'jg=noon' => 'Jg/Noon',\n    'jg=nun' => 'Jg/Nun',\n    'jg=nya' => 'Jg/Nya',\n    'jg=pe' => 'Jg/Pe',\n    'jg=qaf' => 'Jg/Qaf',\n    'jg=qaph' => 'Jg/Qaph',\n    'jg=reh' => 'Jg/Reh',\n    'jg=reversedpe' => 'Jg/Reversed',\n    'jg=sad' => 'Jg/Sad',\n    'jg=sadhe' => 'Jg/Sadhe',\n    'jg=seen' => 'Jg/Seen',\n    'jg=semkath' => 'Jg/Semkath',\n    'jg=shin' => 'Jg/Shin',\n    'jg=swashkaf' => 'Jg/SwashKaf',\n    'jg=syriacwaw' => 'Jg/SyriacWa',\n    'jg=tah' => 'Jg/Tah',\n    'jg=taw' => 'Jg/Taw',\n    'jg=tehmarbuta' => 'Jg/TehMarbu',\n    'jg=teth' => 'Jg/Teth',\n    'jg=waw' => 'Jg/Waw',\n    'jg=yeh' => 'Jg/Yeh',\n    'jg=yehbarree' => 'Jg/YehBarre',\n    'jg=yehwithtail' => 'Jg/YehWithT',\n    'jg=yudh' => 'Jg/Yudh',\n    'jg=yudhhe' => 'Jg/YudhHe',\n    'jg=zain' => 'Jg/Zain',\n    'jg=zhain' => 'Jg/Zhain',\n    'joinc' => 'JoinC/Y',\n    'joinc=f' => 'JoinC/N',\n    'joinc=false' => 'JoinC/N',\n    'joinc=n' => 'JoinC/N',\n    'joinc=no' => 'JoinC/N',\n    'joinc=t' => 'JoinC/Y',\n    'joinc=true' => 'JoinC/Y',\n    'joinc=y' => 'JoinC/Y',\n  "..., 4096) = 4096
22042 read(4, " 'lb=exclamation' => 'Lb/EX',\n    'lb=gl' => 'Lb/GL',\n    'lb=glue' => 'Lb/GL',\n    'lb=h2' => 'GCB/LV',\n    'lb=h3' => 'GCB/LVT',\n    'lb=hy' => 'Lb/HY',\n    'lb=hyphen' => 'Lb/HY',\n    'lb=id' => 'Lb/ID',\n    'lb=ideographic' => 'Lb/ID',\n    'lb=in' => 'Lb/IN',\n    'lb=infixnumeric' => 'Lb/IS',\n    'lb=inseparable' => 'Lb/IN',\n    'lb=inseperable' => 'Lb/IN',\n    'lb=is' => 'Lb/IS',\n    'lb=jl' => 'GCB/L',\n    'lb=jt' => 'GCB/T',\n    'lb=jv' => 'GCB/V',\n    'lb=lf' => 'GCB/LF',\n    'lb=linefeed' => 'GCB/LF',\n    'lb=mandatorybreak' => 'Lb/BK',\n    'lb=nextline' => 'Lb/NL',\n    'lb=nl' => 'Lb/NL',\n    'lb=nonstarter' => 'Lb/NS',\n    'lb=ns' => 'Lb/NS',\n    'lb=nu' => 'Lb/NU',\n    'lb=numeric' => 'Lb/NU',\n    'lb=op' => 'Lb/OP',\n    'lb=openpunctuation' => 'Lb/OP',\n    'lb=po' => 'Lb/PO',\n    'lb=postfixnumeric' => 'Lb/PO',\n    'lb=pr' => 'Lb/PR',\n    'lb=prefixnumeric' => 'Lb/PR',\n    'lb=qu' => 'Lb/QU',\n    'lb=quotation' => 'Lb/QU',\n    'lb=sa' => 'Lb/SA',\n    'lb=sg' => 'Lb/SG',\n    'lb=sp' => 'Lb/SP',\n    'lb=space' => 'Lb/SP',\n    'lb=surrogate' => 'Lb/SG',\n    'lb=sy' => 'Lb/SY',\n    'lb=unknown' => 'Lb/XX',\n    'lb=wj' => 'Lb/WJ',\n    'lb=wordjoiner' => 'Lb/WJ',\n    'lb=xx' => 'Lb/XX',\n    'lb=zw' => 'Lb/ZW',\n    'lb=zwspace' => 'Lb/ZW',\n    'lc' => 'Gc/LC',\n    'lepc' => 'Sc/Lepc',\n    'lepcha' => 'Sc/Lepc',\n    'letter' => 'Gc/L',\n    'letterlikesymbols' => 'Blk/Letterli',\n    'letternumber' => 'Gc/Nl',\n    'limb' => 'Sc/Limb',\n    'limbu' => 'Sc/Limb',\n    'linb' => 'Sc/Linb',\n    'linearb' => 'Sc/Linb',\n    'linearbideograms' => 'Blk/LinearBI',\n    'linearbsyllabary' => 'Blk/LinearBS',\n    'lineseparator' => 'Gc/Zl',\n    'lisu' => 'Blk/Lisu',\n    'll' => 'Gc/Ll',\n    'lm' => 'Gc/Lm',\n    'lo' => 'Gc/Lo',\n    'loe' => 'GCB/PP',\n    'loe=f' => 'LOE/N',\n    'loe=false' => 'LOE/N',\n    'loe=n' => 'LOE/N',\n    'loe=no' => 'LOE/N',\n    'loe=t' => 'GCB/PP',\n    'loe=true' => 'GCB/PP',\n    'loe=y' => 'GCB/PP',\n    'loe=yes' => 'GCB/PP',\n    'logicalorderexception' => 'GCB/PP',\n    'lower' => 'Lower/Y',\n    'l"..., 4096) = 4096
22042 brk(0x84cc000)                    = 0x84cc000
22042 brk(0x84cb000)                    = 0x84cb000
22042 read(4, "e' => 'NFKCQC/M',\n    'nfcqc=n' => 'CompEx/Y',\n    'nfcqc=no' => 'CompEx/Y',\n    'nfcqc=y' => 'NFCQC/Y',\n    'nfcqc=yes' => 'NFCQC/Y',\n    'nfdqc=n' => 'NFDQC/N',\n    'nfdqc=no' => 'NFDQC/N',\n    'nfdqc=y' => 'NFDQC/Y',\n    'nfdqc=yes' => 'NFDQC/Y',\n    'nfkcqc=m' => 'NFKCQC/M',\n    'nfkcqc=maybe' => 'NFKCQC/M',\n    'nfkcqc=n' => 'NFKCQC/N',\n    'nfkcqc=no' => 'NFKCQC/N',\n    'nfkcqc=y' => 'NFKCQC/Y',\n    'nfkcqc=yes' => 'NFKCQC/Y',\n    'nfkdqc=n' => 'NFKDQC/N',\n    'nfkdqc=no' => 'NFKDQC/N',\n    'nfkdqc=y' => 'Dt/None',\n    'nfkdqc=yes' => 'Dt/None',\n    'nko' => 'Sc/Nko',\n    'nkoo' => 'Sc/Nko',\n    'nl' => 'Gc/Nl',\n    'no' => 'Gc/No',\n    'noblock' => 'Blk/NoBlock',\n    'noncharactercodepoint' => 'NChar/Y',\n    'nonspacingmark' => 'Gc/Mn',\n    'nt=de' => 'Nt/De',\n    'nt=decimal' => 'Nt/De',\n    'nt=di' => 'Nt/Di',\n    'nt=digit' => 'Nt/Di',\n    'nt=none' => 'Nv/NaN',\n    'nt=nu' => 'Nt/Nu',\n    'nt=numeric' => 'Nt/Nu',\n    'number' => 'Gc/N',\n    'numberforms' => 'Blk/NumberFo',\n    'nv=nan' => 'Nv/NaN',\n    'oalpha' => 'OAlpha/Y',\n    'oalpha=f' => 'OAlpha/N',\n    'oalpha=false' => 'OAlpha/N',\n    'oalpha=n' => 'OAlpha/N',\n    'oalpha=no' => 'OAlpha/N',\n    'oalpha=t' => 'OAlpha/Y',\n    'oalpha=true' => 'OAlpha/Y',\n    'oalpha=y' => 'OAlpha/Y',\n    'oalpha=yes' => 'OAlpha/Y',\n    'odi' => 'ODI/Y',\n    'odi=f' => 'ODI/N',\n    'odi=false' => 'ODI/N',\n    'odi=n' => 'ODI/N',\n    'odi=no' => 'ODI/N',\n    'odi=t' => 'ODI/Y',\n    'odi=true' => 'ODI/Y',\n    'odi=y' => 'ODI/Y',\n    'odi=yes' => 'ODI/Y',\n    'ogam' => 'Sc/Ogam',\n    'ogham' => 'Sc/Ogam',\n    'ogrext' => 'OGrExt/Y',\n    'ogrext=f' => 'OGrExt/N',\n    'ogrext=false' => 'OGrExt/N',\n    'ogrext=n' => 'OGrExt/N',\n    'ogrext=no' => 'OGrExt/N',\n    'ogrext=t' => 'OGrExt/Y',\n    'ogrext=true' => 'OGrExt/Y',\n    'ogrext=y' => 'OGrExt/Y',\n    'ogrext=yes' => 'OGrExt/Y',\n    'oidc' => 'OIDC/Y',\n    'oidc=f' => 'OIDC/N',\n    'oidc=false' => 'OIDC/N',\n    'oidc=n' => 'OIDC/N',\n    'oidc=no' => 'OIDC/N',\n    'oidc=t' => 'OIDC/Y',\n    'oidc=true' => 'OIDC/Y',\n    "..., 4096) = 4096
22042 read(4, " 'patsyn=f' => 'PatSyn/N',\n    'patsyn=false' => 'PatSyn/N',\n    'patsyn=n' => 'PatSyn/N',\n    'patsyn=no' => 'PatSyn/N',\n    'patsyn=t' => 'PatSyn/Y',\n    'patsyn=true' => 'PatSyn/Y',\n    'patsyn=y' => 'PatSyn/Y',\n    'patsyn=yes' => 'PatSyn/Y',\n    'patternsyntax' => 'PatSyn/Y',\n    'patternwhitespace' => 'PatWS/Y',\n    'patws' => 'PatWS/Y',\n    'patws=f' => 'PatWS/N',\n    'patws=false' => 'PatWS/N',\n    'patws=n' => 'PatWS/N',\n    'patws=no' => 'PatWS/N',\n    'patws=t' => 'PatWS/Y',\n    'patws=true' => 'PatWS/Y',\n    'patws=y' => 'PatWS/Y',\n    'patws=yes' => 'PatWS/Y',\n    'pc' => 'WB/EX',\n    'pd' => 'Gc/Pd',\n    'pe' => 'Gc/Pe',\n    'perlspace' => 'Perl/PerlSpac',\n    'perlword' => 'Perl/PerlWord',\n    'pf' => 'Gc/Pf',\n    'phag' => 'Sc/Phag',\n    'phagspa' => 'Sc/Phag',\n    'phaistosdisc' => 'Blk/Phaistos',\n    'phli' => 'Sc/Phli',\n    'phnx' => 'Sc/Phnx',\n    'phoenician' => 'Sc/Phnx',\n    'phoneticextensions' => 'Blk/Phonetic',\n    'phoneticextensionssupplement' => 'Blk/Phoneti2',\n    'pi' => 'Gc/Pi',\n    'po' => 'Gc/Po',\n    'posixalnum' => 'Perl/PosixAln',\n    'posixalpha' => 'Perl/PosixAlp',\n    'posixblank' => 'Perl/PosixBla',\n    'posixcntrl' => 'Perl/PosixCnt',\n    'posixdigit' => 'Perl/PosixDig',\n    'posixgraph' => 'Perl/PosixGra',\n    'posixlower' => 'Perl/PosixLow',\n    'posixprint' => 'Perl/PosixPri',\n    'posixpunct' => 'Perl/PosixPun',\n    'posixspace' => 'Perl/PosixSpa',\n    'posixupper' => 'Perl/PosixUpp',\n    'print' => 'Perl/Print',\n    'privateuse' => 'Gc/Co',\n    'privateusearea' => 'Blk/PrivateU',\n    'prti' => 'Sc/Prti',\n    'ps' => 'Gc/Ps',\n    'punct' => 'Gc/P',\n    'punctuation' => 'Gc/P',\n    'qaac' => 'Sc/Copt',\n    'qaai' => 'Sc/Zinh',\n    'qmark' => 'QMark/Y',\n    'qmark=f' => 'QMark/N',\n    'qmark=false' => 'QMark/N',\n    'qmark=n' => 'QMark/N',\n    'qmark=no' => 'QMark/N',\n    'qmark=t' => 'QMark/Y',\n    'qmark=true' => 'QMark/Y',\n    'qmark=y' => 'QMark/Y',\n    'qmark=yes' => 'QMark/Y',\n    'quotationmark' => 'QMark/Y',\n    'radical' => 'Radical/Y',\n    'radical=f' => 'Radi"..., 4096) = 4096
22042 read(4, "   'sc=cher' => 'Sc/Cher',\n    'sc=cherokee' => 'Sc/Cher',\n    'sc=common' => 'Sc/Zyyy',\n    'sc=copt' => 'Sc/Copt',\n    'sc=coptic' => 'Sc/Copt',\n    'sc=cprt' => 'Sc/Cprt',\n    'sc=cuneiform' => 'Sc/Xsux',\n    'sc=cypriot' => 'Sc/Cprt',\n    'sc=cyrillic' => 'Sc/Cyrl',\n    'sc=cyrl' => 'Sc/Cyrl',\n    'sc=deseret' => 'Blk/Deseret',\n    'sc=deva' => 'Sc/Deva',\n    'sc=devanagari' => 'Sc/Deva',\n    'sc=dsrt' => 'Blk/Deseret',\n    'sc=egyp' => 'Sc/Egyp',\n    'sc=egyptianhieroglyphs' => 'Sc/Egyp',\n    'sc=ethi' => 'Sc/Ethi',\n    'sc=ethiopic' => 'Sc/Ethi',\n    'sc=geor' => 'Sc/Geor',\n    'sc=georgian' => 'Sc/Geor',\n    'sc=glag' => 'Sc/Glag',\n    'sc=glagolitic' => 'Sc/Glag',\n    'sc=goth' => 'Sc/Goth',\n    'sc=gothic' => 'Sc/Goth',\n    'sc=greek' => 'Sc/Grek',\n    'sc=grek' => 'Sc/Grek',\n    'sc=gujarati' => 'Sc/Gujr',\n    'sc=gujr' => 'Sc/Gujr',\n    'sc=gurmukhi' => 'Sc/Guru',\n    'sc=guru' => 'Sc/Guru',\n    'sc=han' => 'Sc/Han',\n    'sc=hang' => 'Sc/Hang',\n    'sc=hangul' => 'Sc/Hang',\n    'sc=hani' => 'Sc/Han',\n    'sc=hano' => 'Sc/Hano',\n    'sc=hanunoo' => 'Sc/Hano',\n    'sc=hebr' => 'Sc/Hebr',\n    'sc=hebrew' => 'Sc/Hebr',\n    'sc=hira' => 'Sc/Hira',\n    'sc=hiragana' => 'Sc/Hira',\n    'sc=imperialaramaic' => 'Sc/Armi',\n    'sc=inherited' => 'Sc/Zinh',\n    'sc=inscriptionalpahlavi' => 'Sc/Phli',\n    'sc=inscriptionalparthian' => 'Sc/Prti',\n    'sc=ital' => 'Sc/Ital',\n    'sc=java' => 'Sc/Java',\n    'sc=javanese' => 'Sc/Java',\n    'sc=kaithi' => 'Sc/Kthi',\n    'sc=kali' => 'Blk/KayahLi',\n    'sc=kana' => 'Sc/Kana',\n    'sc=kannada' => 'Sc/Knda',\n    'sc=katakana' => 'Sc/Kana',\n    'sc=kayahli' => 'Blk/KayahLi',\n    'sc=khar' => 'Sc/Khar',\n    'sc=kharoshthi' => 'Sc/Khar',\n    'sc=khmer' => 'Sc/Khmr',\n    'sc=khmr' => 'Sc/Khmr',\n    'sc=knda' => 'Sc/Knda',\n    'sc=kthi' => 'Sc/Kthi',\n    'sc=lana' => 'Sc/Lana',\n    'sc=lao' => 'Sc/Lao',\n    'sc=laoo' => 'Sc/Lao',\n    'sc=latin' => 'Sc/Latn',\n    'sc=latn' => 'Sc/Latn',\n    'sc=lepc' => 'Sc/Lepc',\n    'sc=lepcha' => 'Sc/Lepc',\n    'sc=limb' => 'Sc/Limb',\n    'sc="..., 4096) = 4096
22042 read(4, "  'sc=taml' => 'Sc/Taml',\n    'sc=tavt' => 'Sc/Tavt',\n    'sc=telu' => 'Sc/Telu',\n    'sc=telugu' => 'Sc/Telu',\n    'sc=tfng' => 'Sc/Tfng',\n    'sc=tglg' => 'Sc/Tglg',\n    'sc=thaa' => 'Sc/Thaa',\n    'sc=thaana' => 'Sc/Thaa',\n    'sc=thai' => 'Sc/Thai',\n    'sc=tibetan' => 'Sc/Tibt',\n    'sc=tibt' => 'Sc/Tibt',\n    'sc=tifinagh' => 'Sc/Tfng',\n    'sc=ugar' => 'Sc/Ugar',\n    'sc=ugaritic' => 'Sc/Ugar',\n    'sc=unknown' => 'Sc/Zzzz',\n    'sc=vai' => 'Sc/Vai',\n    'sc=vaii' => 'Sc/Vai',\n    'sc=xpeo' => 'Sc/Xpeo',\n    'sc=xsux' => 'Sc/Xsux',\n    'sc=yi' => 'Sc/Yi',\n    'sc=yiii' => 'Sc/Yi',\n    'sc=zinh' => 'Sc/Zinh',\n    'sc=zyyy' => 'Sc/Zyyy',\n    'sc=zzzz' => 'Sc/Zzzz',\n    'sd' => 'SD/Y',\n    'sd=f' => 'SD/N',\n    'sd=false' => 'SD/N',\n    'sd=n' => 'SD/N',\n    'sd=no' => 'SD/N',\n    'sd=t' => 'SD/Y',\n    'sd=true' => 'SD/Y',\n    'sd=y' => 'SD/Y',\n    'sd=yes' => 'SD/Y',\n    'separator' => 'Gc/Z',\n    'shavian' => 'Blk/Shavian',\n    'shaw' => 'Blk/Shavian',\n    'sinh' => 'Sc/Sinh',\n    'sinhala' => 'Sc/Sinh',\n    'sk' => 'Gc/Sk',\n    'sm' => 'Gc/Sm',\n    'smallformvariants' => 'Blk/SmallFor',\n    'so' => 'Gc/So',\n    'softdotted' => 'SD/Y',\n    'space' => 'Space/Y',\n    'spaceperl' => 'Perl/SpacePer',\n    'spaceseparator' => 'Gc/Zs',\n    'spacingmark' => 'Gc/Mc',\n    'spacingmodifierletters' => 'Blk/SpacingM',\n    'specials' => 'Blk/Specials',\n    'sterm' => 'STerm/Y',\n    'sterm=f' => 'STerm/N',\n    'sterm=false' => 'STerm/N',\n    'sterm=n' => 'STerm/N',\n    'sterm=no' => 'STerm/N',\n    'sterm=t' => 'STerm/Y',\n    'sterm=true' => 'STerm/Y',\n    'sterm=y' => 'STerm/Y',\n    'sterm=yes' => 'STerm/Y',\n    'sund' => 'Sc/Sund',\n    'sundanese' => 'Sc/Sund',\n    'superscriptsandsubscripts' => 'Blk/Superscr',\n    'supplementalarrowsa' => 'Blk/Suppleme',\n    'supplementalarrowsb' => 'Blk/Supplem2',\n    'supplementalmathematicaloperators' => 'Blk/Supplem6',\n    'supplementalpunctuation' => 'Blk/Supplem3',\n    'supplementaryprivateuseareaa' => 'Blk/Supplem4',\n    'supplementaryprivateuseareab' => 'Blk/Supplem5',\n    'surr"..., 4096) = 4096
22042 read(4, "S/Y',\n    'variationselectors' => 'Blk/Variatio',\n    'variationselectorssupplement' => 'Blk/Variati2',\n    'vedicextensions' => 'Blk/VedicExt',\n    'verticalforms' => 'Blk/Vertical',\n    'vertspace' => 'Perl/VertSpac',\n    'vs' => 'VS/Y',\n    'vs=f' => 'VS/N',\n    'vs=false' => 'VS/N',\n    'vs=n' => 'VS/N',\n    'vs=no' => 'VS/N',\n    'vs=t' => 'VS/Y',\n    'vs=true' => 'VS/Y',\n    'vs=y' => 'VS/Y',\n    'vs=yes' => 'VS/Y',\n    'wb=aletter' => 'WB/LE',\n    'wb=cr' => 'GCB/CR',\n    'wb=ex' => 'WB/EX',\n    'wb=extend' => 'SB/EX',\n    'wb=extendnumlet' => 'WB/EX',\n    'wb=fo' => 'WB/FO',\n    'wb=format' => 'WB/FO',\n    'wb=ka' => 'WB/KA',\n    'wb=katakana' => 'WB/KA',\n    'wb=le' => 'WB/LE',\n    'wb=lf' => 'GCB/LF',\n    'wb=mb' => 'WB/MB',\n    'wb=midletter' => 'WB/ML',\n    'wb=midnum' => 'WB/MN',\n    'wb=midnumlet' => 'WB/MB',\n    'wb=ml' => 'WB/ML',\n    'wb=mn' => 'WB/MN',\n    'wb=newline' => 'WB/NL',\n    'wb=nl' => 'WB/NL',\n    'wb=nu' => 'WB/NU',\n    'wb=numeric' => 'WB/NU',\n    'wb=other' => 'WB/XX',\n    'wb=xx' => 'WB/XX',\n    'whitespace' => 'Space/Y',\n    'word' => 'Perl/Word',\n    'wspace' => 'Space/Y',\n    'wspace=f' => 'Space/N',\n    'wspace=false' => 'Space/N',\n    'wspace=n' => 'Space/N',\n    'wspace=no' => 'Space/N',\n    'wspace=t' => 'Space/Y',\n    'wspace=true' => 'Space/Y',\n    'wspace=y' => 'Space/Y',\n    'wspace=yes' => 'Space/Y',\n    'xdigit' => 'Hex/Y',\n    'xidc' => 'XIDC/Y',\n    'xidc=f' => 'XIDC/N',\n    'xidc=false' => 'XIDC/N',\n    'xidc=n' => 'XIDC/N',\n    'xidc=no' => 'XIDC/N',\n    'xidc=t' => 'XIDC/Y',\n    'xidc=true' => 'XIDC/Y',\n    'xidc=y' => 'XIDC/Y',\n    'xidc=yes' => 'XIDC/Y',\n    'xidcontinue' => 'XIDC/Y',\n    'xids' => 'XIDS/Y',\n    'xids=f' => 'XIDS/N',\n    'xids=false' => 'XIDS/N',\n    'xids=n' => 'XIDS/N',\n    'xids=no' => 'XIDS/N',\n    'xids=t' => 'XIDS/Y',\n    'xids=true' => 'XIDS/Y',\n    'xids=y' => 'XIDS/Y',\n    'xids=yes' => 'XIDS/Y',\n    'xidstart' => 'XIDS/Y',\n    'xpeo' => 'Sc/Xpeo',\n    'xsux' => 'Sc/Xsux',\n    'yi' => 'Sc/Yi',\n    'yiii' => 'Sc/Yi',\n    'yijinghexagram"..., 4096) = 4096
22042 read(4, " be used stand-alone',\n    'ODI/Y' => 'Used by Unicode internally for generating the Default_Ignorable_Code_Point property (which should be used instead) and not intended to be used stand-alone',\n    'OGrExt/N' => 'Used by Unicode internally for generating the Grapheme_Extend property (which should be used instead) and not intended to be used stand-alone',\n    'OGrExt/Y' => 'Used by Unicode internally for generating the Grapheme_Extend property (which should be used instead) and not intended to be used stand-alone',\n    'OIDC/N' => 'Used by Unicode internally for generating the ID_Continue property (which should be used instead) and not intended to be used stand-alone',\n    'OIDC/Y' => 'Used by Unicode internally for generating the ID_Continue property (which should be used instead) and not intended to be used stand-alone',\n    'OIDS/N' => 'Used by Unicode internally for generating the ID_Start property (which should be used instead) and not intended to be used stand-alone',\n    'OIDS/Y' => 'Used by Unicode internally for generating the ID_Start property (which should be used instead) and not intended to be used stand-alone',\n    'OLower/N' => 'Used by Unicode internally for generating the Lowercase property (which should be used instead) and not intended to be used stand-alone',\n    'OLower/Y' => 'Used by Unicode internally for generating the Lowercase property (which should be used instead) and not intended to be used stand-alone',\n    'OMath/N' => 'Used by Unicode internally for generating the Math property (which should be used instead) and not intended to be used stand-alone',\n    'OMath/Y' => 'Used by Unicode internally for generating the Math property (which should be used instead) and not intended to be used stand-alone',\n    'OUpper/N' => 'Used by Unicode internally for generating the Uppercase property (which should be used instead) and not intended to be used stand-alone',\n    'OUpper/Y' => 'Used by Unicode internally for generating the Uppercase property (which should be used instead) and not intended"..., 4096) = 2081
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 brk(0x84ec000)                    = 0x84ec000
22042 brk(0x850d000)                    = 0x850d000
22042 brk(0x852f000)                    = 0x852f000
22042 stat64("/etc/perl/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/unicore/lib/Perl/Word.pl", 0xbff095d0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/unicore/lib/Perl/Word.pl", {st_mode=S_IFREG|0444, st_size=9548, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/unicore/lib/Perl/Word.pl", O_RDONLY|O_LARGEFILE) = 4
22042 ioctl(4, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff093a8) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(4, 0, [0], SEEK_CUR)      = 0
22042 read(4, "# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!\n# This file is machine-generated by lib/unicore/mktables from the Unicode\n# database, Version 5.2.0.  Any changes made here will be lost!\n\n# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!\n# This file is for internal use by the Perl program only.  The format and even\n# the name or existence of this file are subject to change without notice.\n# Don't use it directly.\n\n# This file returns the 101_685 code points in Unicode Version 5.2.0 that\n# match any of the following regular expression constructs:\n# \n#         \\p{Word}\n#         \\p{Is_Word}\n# \n#     Meaning: \\w, including beyond ASCII\n# \n# perluniprops.pod should be consulted for the syntax rules for any of these,\n# including if adding or subtracting white space, underscore, and hyphen\n# characters matters or doesn't matter, and other permissible syntactic\n# variants.  Upper/lower case distinctions never matter.\n# \n# The format of the lines of this file is: START\\tSTOP\\twhere START is the\n# starting code point of the range, in hex; STOP is the ending point, or if\n# omitted, the range has just one code point.  Numbers in comments in\n# [brackets] indicate how many code points are in the range.\n\nreturn <<'END';\n0030\t0039\t # [10]\n0041\t005A\t # [26]\n005F\t\t\n0061\t007A\t # [26]\n00AA\t\t\n00B5\t\t\n00BA\t\t\n00C0\t00D6\t # [23]\n00D8\t00F6\t # [31]\n00F8\t02C1\t # [458]\n02C6\t02D1\t # [12]\n02E0\t02E4\t # [5]\n02EC\t\t\n02EE\t\t\n0300\t0374\t # [117]\n0376\t0377\t # [2]\n037A\t037D\t # [4]\n0386\t\t\n0388\t038A\t # [3]\n038C\t\t\n038E\t03A1\t # [20]\n03A3\t03F5\t # [83]\n03F7\t0481\t # [139]\n0483\t0525\t # [163]\n0531\t0556\t # [38]\n0559\t\t\n0561\t0587\t # [39]\n0591\t05BD\t # [45]\n05BF\t\t\n05C1\t05C2\t # [2]\n05C4\t05C5\t # [2]\n05C7\t\t\n05D0\t05EA\t # [27]\n05F0\t05F2\t # [3]\n0610\t061A\t # [11]\n0621\t065E\t # [62]\n0660\t0669\t # [10]\n066E\t06D3\t # [102]\n06D5\t06DC\t # [8]\n06DE\t06E8\t # [11]\n06EA\t06FC\t # [19]\n06FF\t\t\n0710\t074A\t # [59]\n074D\t07B1\t # [101]\n07C0\t07F5\t # [54]\n07FA\t\t\n0800\t082D\t # [46]\n0900\t0939\t # [58]\n093C\t094E\t # [19]\n0950\t0955\t # [6]\n0958\t0963\t # [12]\n0966\t096F\t # [10]\n0971\t0972\t # [2]\n0979\t097F\t # [7]\n0981\t098"..., 4096) = 4096
22042 read(4, "]\n0E8A\t\t\n0E8D\t\t\n0E94\t0E97\t # [4]\n0E99\t0E9F\t # [7]\n0EA1\t0EA3\t # [3]\n0EA5\t\t\n0EA7\t\t\n0EAA\t0EAB\t # [2]\n0EAD\t0EB9\t # [13]\n0EBB\t0EBD\t # [3]\n0EC0\t0EC4\t # [5]\n0EC6\t\t\n0EC8\t0ECD\t # [6]\n0ED0\t0ED9\t # [10]\n0EDC\t0EDD\t # [2]\n0F00\t\t\n0F18\t0F19\t # [2]\n0F20\t0F29\t # [10]\n0F35\t\t\n0F37\t\t\n0F39\t\t\n0F3E\t0F47\t # [10]\n0F49\t0F6C\t # [36]\n0F71\t0F84\t # [20]\n0F86\t0F8B\t # [6]\n0F90\t0F97\t # [8]\n0F99\t0FBC\t # [36]\n0FC6\t\t\n1000\t1049\t # [74]\n1050\t109D\t # [78]\n10A0\t10C5\t # [38]\n10D0\t10FA\t # [43]\n10FC\t\t\n1100\t1248\t # [329]\n124A\t124D\t # [4]\n1250\t1256\t # [7]\n1258\t\t\n125A\t125D\t # [4]\n1260\t1288\t # [41]\n128A\t128D\t # [4]\n1290\t12B0\t # [33]\n12B2\t12B5\t # [4]\n12B8\t12BE\t # [7]\n12C0\t\t\n12C2\t12C5\t # [4]\n12C8\t12D6\t # [15]\n12D8\t1310\t # [57]\n1312\t1315\t # [4]\n1318\t135A\t # [67]\n135F\t\t\n1380\t138F\t # [16]\n13A0\t13F4\t # [85]\n1401\t166C\t # [620]\n166F\t167F\t # [17]\n1681\t169A\t # [26]\n16A0\t16EA\t # [75]\n16EE\t16F0\t # [3]\n1700\t170C\t # [13]\n170E\t1714\t # [7]\n1720\t1734\t # [21]\n1740\t1753\t # [20]\n1760\t176C\t # [13]\n176E\t1770\t # [3]\n1772\t1773\t # [2]\n1780\t17B3\t # [52]\n17B6\t17D3\t # [30]\n17D7\t\t\n17DC\t17DD\t # [2]\n17E0\t17E9\t # [10]\n180B\t180D\t # [3]\n1810\t1819\t # [10]\n1820\t1877\t # [88]\n1880\t18AA\t # [43]\n18B0\t18F5\t # [70]\n1900\t191C\t # [29]\n1920\t192B\t # [12]\n1930\t193B\t # [12]\n1946\t196D\t # [40]\n1970\t1974\t # [5]\n1980\t19AB\t # [44]\n19B0\t19C9\t # [26]\n19D0\t19DA\t # [11]\n1A00\t1A1B\t # [28]\n1A20\t1A5E\t # [63]\n1A60\t1A7C\t # [29]\n1A7F\t1A89\t # [11]\n1A90\t1A99\t # [10]\n1AA7\t\t\n1B00\t1B4B\t # [76]\n1B50\t1B59\t # [10]\n1B6B\t1B73\t # [9]\n1B80\t1BAA\t # [43]\n1BAE\t1BB9\t # [12]\n1C00\t1C37\t # [56]\n1C40\t1C49\t # [10]\n1C4D\t1C7D\t # [49]\n1CD0\t1CD2\t # [3]\n1CD4\t1CF2\t # [31]\n1D00\t1DE6\t # [231]\n1DFD\t1F15\t # [281]\n1F18\t1F1D\t # [6]\n1F20\t1F45\t # [38]\n1F48\t1F4D\t # [6]\n1F50\t1F57\t # [8]\n1F59\t\t\n1F5B\t\t\n1F5D\t\t\n1F5F\t1F7D\t # [31]\n1F80\t1FB4\t # [53]\n1FB6\t1FBC\t # [7]\n1FBE\t\t\n1FC2\t1FC4\t # [3]\n1FC6\t1FCC\t # [7]\n1FD0\t1FD3\t # [4]\n1FD6\t1FDB\t # [6]\n1FE0\t1FEC\t # [13]\n1FF2\t1FF4\t # [3]\n1FF6\t1FFC\t # [7]\n203F\t2040\t # [2]\n2054\t\t\n2071\t\t\n207F\t\t\n2090\t2094\t # [5]\n20D0\t20F0\t # [33]\n2102\t\t\n2107\t\t\n210A\t2113\t # [10]\n2115\t\t\n2119\t211D\t # [5]\n2124\t\t\n2126\t\t\n2128\t\t\n212A\t212D\t # [4]\n212F\t2139"..., 4096) = 4096
22042 read(4, "30\t1034A\t # [27]\n10380\t1039D\t # [30]\n103A0\t103C3\t # [36]\n103C8\t103CF\t # [8]\n103D1\t103D5\t # [5]\n10400\t1049D\t # [158]\n104A0\t104A9\t # [10]\n10800\t10805\t # [6]\n10808\t\t\n1080A\t10835\t # [44]\n10837\t10838\t # [2]\n1083C\t\t\n1083F\t10855\t # [23]\n10900\t10915\t # [22]\n10920\t10939\t # [26]\n10A00\t10A03\t # [4]\n10A05\t10A06\t # [2]\n10A0C\t10A13\t # [8]\n10A15\t10A17\t # [3]\n10A19\t10A33\t # [27]\n10A38\t10A3A\t # [3]\n10A3F\t\t\n10A60\t10A7C\t # [29]\n10B00\t10B35\t # [54]\n10B40\t10B55\t # [22]\n10B60\t10B72\t # [19]\n10C00\t10C48\t # [73]\n11080\t110BA\t # [59]\n12000\t1236E\t # [879]\n12400\t12462\t # [99]\n13000\t1342E\t # [1071]\n1D165\t1D169\t # [5]\n1D16D\t1D172\t # [6]\n1D17B\t1D182\t # [8]\n1D185\t1D18B\t # [7]\n1D1AA\t1D1AD\t # [4]\n1D242\t1D244\t # [3]\n1D400\t1D454\t # [85]\n1D456\t1D49C\t # [71]\n1D49E\t1D49F\t # [2]\n1D4A2\t\t\n1D4A5\t1D4A6\t # [2]\n1D4A9\t1D4AC\t # [4]\n1D4AE\t1D4B9\t # [12]\n1D4BB\t\t\n1D4BD\t1D4C3\t # [7]\n1D4C5\t1D505\t # [65]\n1D507\t1D50A\t # [4]\n1D50D\t1D514\t # [8]\n1D516\t1D51C\t # [7]\n1D51E\t1D539\t # [28]\n1D53B\t1D53E\t # [4]\n1D540\t1D544\t # [5]\n1D546\t\t\n1D54A\t1D550\t # [7]\n1D552\t1D6A5\t # [340]\n1D6A8\t1D6C0\t # [25]\n1D6C2\t1D6DA\t # [25]\n1D6DC\t1D6FA\t # [31]\n1D6FC\t1D714\t # [25]\n1D716\t1D734\t # [31]\n1D736\t1D74E\t # [25]\n1D750\t1D76E\t # [31]\n1D770\t1D788\t # [25]\n1D78A\t1D7A8\t # [31]\n1D7AA\t1D7C2\t # [25]\n1D7C4\t1D7CB\t # [8]\n1D7CE\t1D7FF\t # [50]\n20000\t2A6D6\t # [42_711]\n2A700\t2B734\t # [4149]\n2F800\t2FA1D\t # [542]\nE0100\tE01EF\t # [240]\nEND\n", 4096) = 1356
22042 read(4, "", 4096)                 = 0
22042 close(4)                          = 0
22042 read(3, "efault /usr/local/share/:/usr/share/).\n\nFiles with the same name in $XDG_DATA_HOME/applications take precedence over\nfiles in $XDG_DATA_DIRS, so that you can overwrite parts of the system-wide\n.desktop files by copying them to your local directory and making changes.\n\ni3-dmenu-desktop displays the \"Name\" value in the localized version depending\non LC_MESSAGES as specified in the Desktop Entry Specification.\n\nYou can pass a filename or URL (%f/%F and %u/%U field codes in the .desktop\nfile respectively) by appending it to the name of the application. E.g., if you\nwant to launch \"GNU Emacs 24\" with the patch /tmp/foobar.txt, you would type\n\"emacs\", press TAB, type \" /tmp/foobar.txt\" and press ENTER.\n\n.desktop files with Terminal=true are started using i3-sensible-terminal(1).\n\n.desktop files with NoDisplay=true or Hidden=true are skipped.\n\nUTF-8 is supported, of course, but dmenu does not support displaying all\nglyphs. E.g., xfce4-terminal.desktop's Name[fi]=P\303\244\303\244te will be displayed just\nfine, but not its Name[ru]=\320\242\320\265\321\200\320\274\320\270\320\275\320\260\320\273.\n\n=head1 OPTIONS\n\n=over\n\n=item B<--dmenu=command>\n\nExecute command instead of 'dmenu -i'. This option can be used to pass custom\nparameters to dmenu, or to make i3-dmenu-desktop start a custom (patched?)\nversion of dmenu.\n\n=item B<--entry-type=type>\n\nDisplay the (localized) \"Name\" (type = name), the command (type = command) or\nthe (*.desktop) filename (type = filename) in dmenu. This option can be\nspecified multiple times.\n\nExamples are \"GNU Image Manipulation Program\" (type = name), \"gimp\" (type =\ncommand), and \"libreoffice-writer\" (type = filename).\n\n=back\n\n=head1 VERSION\n\nVersion 1.4\n\n=head1 AUTHOR\n\nMichael Stapelberg, C<< <michael at i3wm.org> >>\n\n=head1 LICENSE AND COPYRIGHT\n\nCopyright 2012 Michael Stapelberg.\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the BSD license.\n\n=cut\n", 4096) = 1885
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 stat64("/home/bitozoid/.local/share/applications/", {st_mode=S_IFDIR|0750, st_size=8192, ...}) = 0
22042 stat64("/usr/local/share/applications/", 0xb7773c00) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/share/applications/", {st_mode=S_IFDIR|0755, st_size=8192, ...}) = 0
22042 getcwd("/home/bitozoid/live", 4095) = 19
22042 lstat64("/home/bitozoid/.local/share/applications/", {st_mode=S_IFDIR|0750, st_size=8192, ...}) = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 41 entries */, 32768) = 1928
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 lstat64("/home/bitozoid/.local/share/applications/userapp-mplayer-25V43U.desktop", {st_mode=S_IFREG|0640, st_size=161, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/userapp-xine-4L773U.desktop", {st_mode=S_IFREG|0640, st_size=152, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/mimeapps.list", {st_mode=S_IFREG|0640, st_size=1919, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/mimeinfo.cache", {st_mode=S_IFREG|0640, st_size=1315, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/glslideshow.desktop", {st_mode=S_IFREG|0640, st_size=384, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 3 entries */, 32768) = 80
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine/Programas", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 8 entries */, 32768) = 264
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas/Stream Torrent 1.0", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas/StreamTorrent 1.0", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas/TVAnts", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas/Dr. Abuse", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas/e-Mintza.desktop", {st_mode=S_IFREG|0640, st_size=301, ...}) = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas/Firstbeat", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine/Programas/Stream Torrent 1.0", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 2 entries */, 32768) = 48
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine/Programas/StreamTorrent 1.0", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 2 entries */, 32768) = 48
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine/Programas/TVAnts", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 2 entries */, 32768) = 48
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine/Programas/Dr. Abuse", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 4 entries */, 32768) = 136
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine/Programas/Firstbeat", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 3 entries */, 32768) = 88
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 lstat64("/home/bitozoid/.local/share/applications/wine/Programas/Firstbeat/Firstbeat ATHLETE", {st_mode=S_IFDIR|0750, st_size=4096, ...}) = 0
22042 openat(AT_FDCWD, "/home/bitozoid/.local/share/applications/wine/Programas/Firstbeat/Firstbeat ATHLETE", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 8 entries */, 32768) = 392
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 lstat64("/usr/share/applications/", {st_mode=S_IFDIR|0755, st_size=8192, ...}) = 0
22042 openat(AT_FDCWD, "/usr/share/applications", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 81 entries */, 32768) = 3488
22042 getdents64(3, /* 8 entries */, 32768) = 424
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 lstat64("/usr/share/applications/PyAlaMode.desktop", {st_mode=S_IFREG|0644, st_size=217, ...}) = 0
22042 lstat64("/usr/share/applications/pavucontrol.desktop", {st_mode=S_IFREG|0644, st_size=373, ...}) = 0
22042 lstat64("/usr/share/applications/dia-integrated.desktop", {st_mode=S_IFREG|0644, st_size=440, ...}) = 0
22042 lstat64("/usr/share/applications/dconf-editor.desktop", {st_mode=S_IFREG|0644, st_size=336, ...}) = 0
22042 lstat64("/usr/share/applications/bonobo-browser.desktop", {st_mode=S_IFREG|0644, st_size=8971, ...}) = 0
22042 lstat64("/usr/share/applications/mimeinfo.cache", {st_mode=S_IFREG|0644, st_size=11166, ...}) = 0
22042 lstat64("/usr/share/applications/gnome-about.desktop", {st_mode=S_IFREG|0644, st_size=441, ...}) = 0
22042 lstat64("/usr/share/applications/cups.desktop", {st_mode=S_IFREG|0444, st_size=1247, ...}) = 0
22042 lstat64("/usr/share/applications/glurp-glurp.desktop", {st_mode=S_IFREG|0644, st_size=178, ...}) = 0
22042 lstat64("/usr/share/applications/opera-browser.desktop", {st_mode=S_IFREG|0644, st_size=1278, ...}) = 0
22042 lstat64("/usr/share/applications/sage-sage.desktop", {st_mode=S_IFREG|0644, st_size=230, ...}) = 0
22042 lstat64("/usr/share/applications/network-scheme.desktop", {st_mode=S_IFREG|0644, st_size=317, ...}) = 0
22042 lstat64("/usr/share/applications/nautilus.desktop", {st_mode=S_IFREG|0644, st_size=443, ...}) = 0
22042 lstat64("/usr/share/applications/nautilus-home.desktop", {st_mode=S_IFREG|0644, st_size=387, ...}) = 0
22042 lstat64("/usr/share/applications/nautilus-computer.desktop", {st_mode=S_IFREG|0644, st_size=515, ...}) = 0
22042 lstat64("/usr/share/applications/nautilus-folder-handler.desktop", {st_mode=S_IFREG|0644, st_size=451, ...}) = 0
22042 lstat64("/usr/share/applications/nautilus-file-management-properties.desktop", {st_mode=S_IFREG|0644, st_size=554, ...}) = 0
22042 lstat64("/usr/share/applications/gnome-panel.desktop", {st_mode=S_IFREG|0644, st_size=657, ...}) = 0
22042 lstat64("/usr/share/applications/scribus.desktop", {st_mode=S_IFREG|0644, st_size=3866, ...}) = 0
22042 lstat64("/usr/share/applications/easystroke.desktop", {st_mode=S_IFREG|0644, st_size=540, ...}) = 0
22042 lstat64("/usr/share/applications/hugin.desktop", {st_mode=S_IFREG|0644, st_size=1059, ...}) = 0
22042 lstat64("/usr/share/applications/PTBatcherGUI.desktop", {st_mode=S_IFREG|0644, st_size=1080, ...}) = 0
22042 lstat64("/usr/share/applications/inkscape.desktop", {st_mode=S_IFREG|0644, st_size=10201, ...}) = 0
22042 lstat64("/usr/share/applications/gnome-specimen.desktop", {st_mode=S_IFREG|0644, st_size=377, ...}) = 0
22042 lstat64("/usr/share/applications/wine.desktop", {st_mode=S_IFREG|0644, st_size=1129, ...}) = 0
22042 lstat64("/usr/share/applications/kde4", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
22042 openat(AT_FDCWD, "/usr/share/applications/kde4", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
22042 getdents64(3, /* 6 entries */, 32768) = 200
22042 getdents64(3, /* 0 entries */, 32768) = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/palimpsest.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=311, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=311, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Disk Utility\nName[es]=Utilidad de discos\nComment=Manage Drives and Media\nComment[es]=Gestione dispositivos y soportes\nExec=palimpsest\nIcon=palimpsest\nTerminal=false\nType=Application\nStartupNotify=true\nX-GNOME-DocPath=palimpsest/palimpsest.xml\nCategories=GNOME;GTK;Utility;HardwareSettings;\n", 4096) = 311
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 stat64("/etc/perl/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/i686-linux/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/5.12.4/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/i686-linux/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.4/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/site_perl/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/i686-linux/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.3/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/5.12.2/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/vendor_perl/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/i686-linux/unicore/lib/Perl/SpacePer.pl", 0xbff099e0) = -1 ENOENT (No such file or directory)
22042 stat64("/usr/lib/perl5/5.12.4/unicore/lib/Perl/SpacePer.pl", {st_mode=S_IFREG|0444, st_size=1350, ...}) = 0
22042 open("/usr/lib/perl5/5.12.4/unicore/lib/Perl/SpacePer.pl", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff097b8) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 read(3, "# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!\n# This file is machine-generated by lib/unicore/mktables from the Unicode\n# database, Version 5.2.0.  Any changes made here will be lost!\n\n# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!\n# This file is for internal use by the Perl program only.  The format and even\n# the name or existence of this file are subject to change without notice.\n# Don't use it directly.\n\n# This file returns the 25 code points in Unicode Version 5.2.0 that match\n# any of the following regular expression constructs:\n# \n#         \\p{SpacePerl}\n#         \\p{Is_SpacePerl}\n# \n#     Meaning: \\s, including beyond ASCII\n# \n# perluniprops.pod should be consulted for the syntax rules for any of these,\n# including if adding or subtracting white space, underscore, and hyphen\n# characters matters or doesn't matter, and other permissible syntactic\n# variants.  Upper/lower case distinctions never matter.\n# \n# The format of the lines of this file is: START\\tSTOP\\twhere START is the\n# starting code point of the range, in hex; STOP is the ending point, or if\n# omitted, the range has just one code point.  Numbers in comments in\n# [brackets] indicate how many code points are in the range.\n\nreturn <<'END';\n0009\t000A\t # [2]\n000C\t000D\t # [2]\n0020\t\t\n0085\t\t\n00A0\t\t\n1680\t\t\n180E\t\t\n2000\t200A\t # [11]\n2028\t2029\t # [2]\n202F\t\t\n205F\t\t\n3000\t\t\nEND\n", 4096) = 1350
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/xdvi-xdvik.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=175, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=175, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=XDVI\nType=Application\nComment=DVI previewer for X Window System\nExec=xdvi\nTryExec=xdvi\nIcon=xdvik\nCategories=Graphics;Viewer;\nMimeType=application/x-dvi;\n", 4096) = 175
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/home/bitozoid/.local/share/applications/wine/Programas/Firstbeat/Firstbeat ATHLETE/Uninstall Firstbeat ATHLETE.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=410, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=410, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Uninstall Firstbeat ATHLETE\nExec=env WINEPREFIX=\"/home/bitozoid/.wine\" wine C:\\\\\\\\windows\\\\\\\\command\\\\\\\\start.exe /Unix /home/bitozoid/.wine/dosdevices/c:/users/bitozoid/Men\303\272\\\\ Inicio/Programas/Firstbeat/Firstbeat\\\\ ATHLETE/Uninstall\\\\ Firstbeat\\\\ ATHLETE.lnk\nType=Application\nStartupNotify=true\nIcon=/home/bitozoid/.local/share/icons/fdc7_newshortcut3_4b391ebdbda8421e85f0043d3f13b517.0.png\n", 4096) = 410
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/home/bitozoid/.local/share/applications/wine/Programas/Firstbeat/Firstbeat ATHLETE/Install Firstbeat Bodyguard USB driver.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=544, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=544, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Install Firstbeat Bodyguard USB driver\nExec=env WINEPREFIX=\"/home/bitozoid/.wine\" wine C:\\\\\\\\windows\\\\\\\\command\\\\\\\\start.exe /Unix /home/bitozoid/.wine/dosdevices/c:/users/bitozoid/Men\303\272\\\\ Inicio/Programas/Firstbeat/Firstbeat\\\\ ATHLETE/Install\\\\ Firstbeat\\\\ Bodyguard\\\\ USB\\\\ driver.lnk\nType=Application\nStartupNotify=true\nPath=/home/bitozoid/.wine/dosdevices/c:/Archivos de programa/Firstbeat/Firstbeat ATHLETE/Drivers/Firstbeat Bodyguard driver/\nIcon=/home/bitozoid/.local/share/icons/6311_firstbeat_bodyguard_installer.0.png\n", 4096) = 544
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/mediainfo-gui-mediainfo.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=206, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=206, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=MediaInfo\nType=Application\nComment=MediaInfo supplies technical and tag information about media files\nExec=mediainfo-gui\nTryExec=mediainfo-gui\nIcon=mediainfo\nCategories=AudioVideo;GTK;\n", 4096) = 206
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/home/bitozoid/.local/share/applications/wine-extension-png.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=212, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=212, ...}) = 0
22042 read(3, "[Desktop Entry]\nType=Application\nName=Wine Internet Explorer\nMimeType=image/png;\nExec=env WINEPREFIX=\"/home/bitozoid/.wine\" wine start /ProgIDOpen pngfile %f\nNoDisplay=true\nStartupNotify=true\nIcon=7F56_iexplore.0\n", 4096) = 212
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/dia.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=409, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=409, ...}) = 0
22042 read(3, "[Desktop Entry]\nEncoding=UTF-8\nName=Dia Diagram Editor\nName[es]=Editor de diagramas\nComment=Edit your Diagrams\nComment[es]=Edite sus diagramas\nType=Application\nExec=dia %F\nIcon=dia\nTerminal=false\nCategories=GNOME;Graphics;\nStartupNotify=true\nMimeType=application/x-dia-diagram;\nX-GNOME-Bugzilla-Bugzilla=GNOME\nX-GNOME-Bugzilla-Product=dia\nX-GNOME-Bugzilla-Component=general\nX-GNOME-Bugzilla-Version=@0.97.2@\n\n", 4096) = 409
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/glurp-glurp.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=178, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=178, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Glurp\nType=Application\nComment=Glurp is a GTK2 based graphical client for the Music Player Daemon\nExec=glurp\nTryExec=glurp\nIcon=glurp\nCategories=AudioVideo;\n", 4096) = 178
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/nautilus-folder-handler.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=451, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=451, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Open Folder\nName[es]=Abrir carpeta\nTryExec=nautilus\nExec=nautilus --no-desktop %U\nNoDisplay=true\nTerminal=false\nIcon=folder-open\nStartupNotify=true\nType=Application\nMimeType=x-directory/gnome-default-handler;x-directory/normal;inode/directory;application/x-gnome-saved-search;\nOnlyShowIn=GNOME;\nX-GNOME-Bugzilla-Bugzilla=GNOME\nX-GNOME-Bugzilla-Product=nautilus\nX-GNOME-Bugzilla-Component=general\nX-GNOME-Bugzilla-Version=2.32.2.1\n", 4096) = 451
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/dropbox.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=235, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=235, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Dropbox\nGenericName=File Synchronizer\nComment=Sync your files across computers and to the web\nExec=dropbox start -i\nTerminal=false\nType=Application\nIcon=dropbox\nCategories=Network;FileTransfer;\nStartupNotify=false\n", 4096) = 235
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/CMake.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=245, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=245, ...}) = 0
22042 read(3, "[Desktop Entry]\nVersion=1.0\nName=CMake\nComment=Cross-platform buildsystem\nExec=cmake-gui %f\nIcon=CMakeSetup32.png\nTerminal=false\nX-MultipleArgs=false\nType=Application\nCategories=Development;\nStartupNotify=true\nMimeType=application/x-cmakecache;\n", 4096) = 245
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/home/bitozoid/.local/share/applications/wine-extension-jpeg.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=146, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=146, ...}) = 0
22042 read(3, "[Desktop Entry]\nType=Application\nName=Wine core exe\nMimeType=image/jpeg\nExec=wine start /ProgIDOpen jpegfile %f\nNoDisplay=true\nStartupNotify=true\n", 4096) = 146
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/pavucontrol.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=373, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=373, ...}) = 0
22042 read(3, "[Desktop Entry]\nVersion=1.0\nEncoding=UTF-8\nName=PulseAudio Volume Control\nName[es]=Control de Volumen de PulseAudio\nGenericName=Volume Control\nGenericName[es]=Control de Volumen\nComment=Adjust the volume level\nComment[es]=Ajustar el nivel de volumen\nExec=pavucontrol\nIcon=multimedia-volume-control\nStartupNotify=true\nType=Application\nCategories=AudioVideo;Audio;Mixer;GTK;\n", 4096) = 373
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/home/bitozoid/.local/share/applications/wine-extension-appref-ms.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=241, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=241, ...}) = 0
22042 read(3, "[Desktop Entry]\nType=Application\nName=rundll32\nMimeType=application/x-wine-extension-appref-ms;\nExec=env WINEPREFIX=\"/home/bitozoid/.wine\" wine start /ProgIDOpen Application.Reference %f\nNoDisplay=true\nStartupNotify=true\nIcon=1CD8_rundll32.0\n", 4096) = 241
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/skype-skype.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=183, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=183, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Skype VoIP\nType=Application\nComment=An P2P Internet Telephony (VoiceIP) client\nExec=skype\nTryExec=skype\nIcon=skype\nCategories=Network;InstantMessaging;Telephony;\n", 4096) = 183
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/google-chrome.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=8443, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=8443, ...}) = 0
22042 read(3, "[Desktop Entry]\nVersion=1.0\nName=Google Chrome\n# Only KDE 4 seems to use GenericName, so we reuse the KDE strings.\n# From Ubuntu's language-pack-kde-XX-base packages, version 9.04-20090413.\nGenericName=Web Browser\nGenericName[ar]=\331\205\330\252\330\265\331\201\330\255 \330\247\331\204\330\264\330\250\331\203\330\251\nGenericName[bg]=\320\243\320\265\320\261 \320\261\321\200\320\260\321\203\320\267\321\212\321\200\nGenericName[ca]=Navegador web\nGenericName[cs]=WWW prohl\303\255\305\276e\304\215\nGenericName[da]=Browser\nGenericName[de]=Web-Browser\nGenericName[el]=\316\240\316\265\317\201\316\271\316\267\316\263\316\267\317\204\316\256\317\202 \316\271\317\203\317\204\316\277\317\215\nGenericName[en_GB]=Web Browser\nGenericName[es]=Navegador web\nGenericName[et]=Veebibrauser\nGenericName[fi]=WWW-selain\nGenericName[fr]=Navigateur Web\nGenericName[gu]=\340\252\265\340\253\207\340\252\254 \340\252\254\340\253\215\340\252\260\340\252\276\340\252\211\340\252\235\340\252\260\nGenericName[he]=\327\223\327\244\327\223\327\244\327\237 \327\220\327\231\327\240\327\230\327\250\327\240\327\230\nGenericName[hi]=\340\244\265\340\245\207\340\244\254 \340\244\254\340\245\215\340\244\260\340\244\276\340\244\211\340\244\234\340\244\274\340\244\260\nGenericName[hu]=Webb\303\266ng\303\251sz\305\221\nGenericName[it]=Browser Web\nGenericName[ja]=\343\202\246\343\202\247\343\203\226\343\203\226\343\203\251\343\202\246\343\202\266\nGenericName[kn]=\340\262\234\340\262\276\340\262\262 \340\262\265\340\263\200\340\262\225\340\263\215\340\262\267\340\262\225\nGenericName[ko]=\354\233\271 \353\270\214\353\235\274\354\232\260\354\240\200\nGenericName[lt]=\305\275iniatinklio nar\305\241ykl\304\227\nGenericName[lv]=T\304\253mek\304\274a p\304\201rl\305\253ks\nGenericName[ml]=\340\264\265\340\265\206\340\264\254\340\265\215 \340\264\254\340\265\215\340\264\260\340\265\214\340\264\270\340\264\260\340\265\215\342\200\215\nGenericName[mr]=\340\244\265\340\245\207\340\244\254 \340\244\254\340\245\215\340\244\260\340\244\276\340\244\212\340\244\234\340\244\260\nGenericName[nb]=Nettleser\nGenericName[nl]=Webbrowser\nGenericName[pl]=Przegl\304\205darka WWW\nGenericName[pt]=Navegador Web\nGenericName[pt_BR]=Navegador da Internet\nGenericName[ro]=Navigator de Internet\nGenericName[ru]=\320\222\320\265\320\261-\320\261\321\200\320\260\321\203\320\267\320\265\321\200\nGenericName[sl]=Spletni brskalnik\nGenericName[sv]=Webbl\303\244sare\nGenericName[ta]=\340\256\207\340\256\243\340\257\210\340\256\257 \340\256\211\340\256\262\340\256\276\340\256\265\340\256\277\nGenericName[th]=\340\271\200\340\270\247\340\271\207\340\270\232\340\271\200\340\270\232\340\270\243\340\270\262\340\270\247\340\271\214\340\271\200\340\270\213\340\270\255\340\270\243\340\271\214\nGenericName[tr]=Web Taray\304\261c\304\261\nGenericName[uk]=\320\235\320\260\320\262\321\226\320\263\320\260\321\202\320\276\321\200 \320\242\320\265\320\275\320\265\321\202\nGenericName[zh_CN]=\347\275\221\351\241\265\346\265\217\350\247\210\345\231\250\nGenericName[zh_HK]=\347\266\262\351\240\201\347\200\217\350\246\275\345\231\250\nGenericName[zh_TW]=\347\266\262\351\240\201\347\200\217\350\246\275\345\231\250\n# Not translated in KDE, from Epiphany 2.26.1-0ubuntu1.\nGenericName[bn]=\340\246\223\340\247\237\340\247\207\340\246\254 \340\246\254\340\247\215\340\246\260\340\246\276\340\246\211\340\246\234\340\246\276\340\246\260\nGenericName[fil]=Web Browser\nGenericName[hr]=Web preglednik\nGenericName[id]=Browser Web\nGenericName[or]=\340\254\223\340\255\215\340\254\254\340\255\207\340\254\254 \340\254\254\340\255\215\340\254\260\340\254\276\340\254\211\340\254\234\340\254\260\nGenericName[sk]=WWW prehliada\304\215\nGenericName[sr]=\320\230\320\275\321\202\320\265\321\200\320\275\320\265\321\202 \320\277\321\200\320\265\320\263\320\273\320\265\320\264\320\275\320\270\320\272\nGenericName[te]=\340\260\256\340\260\271\340\260\276\340\260"..., 4096) = 4096
22042 read(3, "Comment[th]=\340\271\200\340\270\202\340\271\211\340\270\262\340\270\226\340\270\266\340\270\207\340\270\255\340\270\264\340\270\231\340\271\200\340\270\227\340\270\255\340\270\243\340\271\214\340\271\200\340\270\231\340\271\207\340\270\225\nComment[tr]=\304\260nternet'e eri\305\237in\nComment[uk]=\320\224\320\276\321\201\321\202\321\203\320\277 \320\264\320\276 \320\206\320\275\321\202\320\265\321\200\320\275\320\265\321\202\321\203\nComment[vi]=Truy c\341\272\255p Internet\nComment[zh_CN]=\350\256\277\351\227\256\344\272\222\350\201\224\347\275\221\nComment[zh_HK]=\351\200\243\347\267\232\345\210\260\347\266\262\351\232\233\347\266\262\350\267\257\nComment[zh_TW]=\351\200\243\347\267\232\345\210\260\347\266\262\351\232\233\347\266\262\350\267\257\nExec=/opt/google/chrome/google-chrome %U\nTerminal=false\nIcon=google-chrome\nType=Application\nCategories=Network;WebBrowser;\nMimeType=text/html;text/xml;application/xhtml_xml;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;\nX-Ayatana-Desktop-Shortcuts=NewWindow;NewIncognito\n\n[NewWindow Shortcut Group]\nName=New Window\nName[am]=\341\212\240\341\213\262\341\210\265 \341\210\230\341\210\265\341\212\256\341\211\265\nName[ar]=\331\206\330\247\331\201\330\260\330\251 \330\254\330\257\331\212\330\257\330\251\nName[bg]=\320\235\320\276\320\262 \320\277\321\200\320\276\320\267\320\276\321\200\320\265\321\206\nName[bn]=\340\246\250\340\246\244\340\247\201\340\246\250 \340\246\211\340\246\207\340\246\250\340\247\215\340\246\241\340\247\213\nName[ca]=Finestra nova\nName[cs]=Nov\303\251 okno\nName[da]=Nyt vindue\nName[de]=Neues Fenster\nName[el]=\316\235\316\255\316\277 \316\240\316\261\317\201\316\254\316\270\317\205\317\201\316\277\nName[en_GB]=New Window\nName[es]=Nueva ventana\nName[et]=Uus aken\nName[fa]=\331\276\331\206\330\254\330\261\331\207 \330\254\330\257\333\214\330\257\nName[fi]=Uusi ikkuna\nName[fil]=New Window\nName[fr]=Nouvelle fen\303\252tre\nName[gu]=\340\252\250\340\252\265\340\253\200 \340\252\265\340\252\277\340\252\202\340\252\241\340\253\213\nName[hi]=\340\244\250\340\244\210 \340\244\265\340\244\277\340\244\202\340\244\241\340\245\213\nName[hr]=Novi prozor\nName[hu]=\303\232j ablak\nName[id]=Jendela Baru\nName[it]=Nuova finestra\nName[iw]=\327\227\327\234\327\225\327\237 \327\227\327\223\327\251\nName[ja]=\346\226\260\350\246\217\343\202\246\343\202\244\343\203\263\343\203\211\343\202\246\nName[kn]=\340\262\271\340\263\212\340\262\270 \340\262\265\340\262\277\340\262\202\340\262\241\340\263\212\nName[ko]=\354\203\210 \354\260\275\nName[lt]=Naujas langas\nName[lv]=Jauns logs\nName[ml]=\340\264\252\340\265\201\340\264\244\340\264\277\340\264\257 \340\264\265\340\264\277\340\264\250\340\265\215\342\200\215\340\264\241\340\265\213\nName[mr]=\340\244\250\340\244\265\340\245\200\340\244\250 \340\244\265\340\244\277\340\244\202\340\244\241\340\245\213\nName[nl]=Nieuw venster\nName[no]=Nytt vindu\nName[pl]=Nowe okno\nName[pt]=Nova janela\nName[pt_BR]=Nova janela\nName[ro]=Fereastr\304\203 nou\304\203\nName[ru]=\320\235\320\276\320\262\320\276\320\265 \320\276\320\272\320\275\320\276\nName[sk]=Nov\303\251 okno\nName[sl]=Novo okno\nName[sr]=\320\235\320\276\320\262\320\270 \320\277\321\200\320\276\320\267\320\276\321\200\nName[sv]=Nytt f\303\266nster\nName[sw]=Dirisha Jipya\nName[ta]=\340\256\252\340\257\201\340\256\244\340\256\277\340\256\257 \340\256\232\340\256\276\340\256\263\340\256\260\340\256\256\340\257\215\nName[te]=\340\260\225\340\261\215\340\260\260\340\261\212\340\260\244\340\261\215\340\260\244 \340\260\265\340\260\277\340\260\202\340\260\241\340\261\213\nName[th]=\340\270\253\340\270\231\340\271\211\340\270\262\340\270\225\340\271\210\340\270\262\340\270\207\340\271\203\340\270\253\340\270\241\340\271\210\nName[tr]=Yeni Pencere\nName[uk]=\320\235\320\276\320\262\320\265 \320\262\321\226\320\272\320\275\320\276\nName[vi]=C\341\273\255a s\341\273\225 M\341\273\233i\nName[zh_CN]=\346\226\260\345\273\272\347\252\227\345\217\243\nName[zh_TW]=\351\226\213\346\226\260\350\246\226\347\252\227\nExec=/opt/google/chrome/google-chrome\nTargetEnvironment=Unity\n\n[NewIncognito"..., 4096) = 4096
22042 read(3, "\320\235\320\276\320\262\320\265 \320\262\321\226\320\272\320\275\320\276 \320\262 \321\200\320\265\320\266\320\270\320\274\321\226 \320\260\320\275\320\276\320\275\321\226\320\274\320\275\320\276\320\263\320\276 \320\277\320\265\321\200\320\265\320\263\320\273\321\217\320\264\321\203\nName[vi]=C\341\273\255a s\341\273\225 \341\272\251n danh m\341\273\233i\nName[zh_CN]=\346\226\260\345\273\272\351\232\220\350\272\253\347\252\227\345\217\243\nName[zh_TW]=\346\226\260\345\242\236\347\204\241\347\227\225\345\274\217\350\246\226\347\252\227\nExec=/opt/google/chrome/google-chrome --incognito\nTargetEnvironment=Unity\n", 4096) = 251
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/home/bitozoid/.local/share/applications/flurry.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=393, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=393, ...}) = 0
22042 read(3, "\n[Desktop Entry]\nEncoding=UTF-8\nName=Flurry\nComment=This X11 port of the OSX screensaver of the same name draws a colourful star(fish)like flurry of particles. Original Mac version: http://homepage.mac.com/calumr Written by Calum Robinson and Tobias Sargeant; 2002.\nTryExec=flurry\nExec=flurry -root\nStartupNotify=false\nTerminal=false\nType=Application\nCategories=Screensaver;\nOnlyShowIn=GNOME;\n", 4096) = 393
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/openoffice.org-base.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=24500, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=24500, ...}) = 0
22042 read(3, "###############################################################\n#  \n#  Licensed to the Apache Software Foundation (ASF) under one\n#  or more contributor license agreements.  See the NOTICE file\n#  distributed with this work for additional information\n#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#  \n#    http://www.apache.org/licenses/LICENSE-2.0\n#  \n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n#  \n###############################################################\n[Desktop Entry]\nVersion=1.0\nTerminal=false\nIcon=openofficeorg3-base\nType=Application\nCategories=Office;X-Red-Hat-Base;X-SuSE-Core-Office;X-MandrivaLinux-MoreApplications-Databases;\nExec=ooffice -base %U\nMimeType=application/vnd.oasis.opendocument.database;application/vnd.sun.xml.base;\nName=OpenOffice.org 3.4.1 Base\nGenericName=Database Development\nGenericName[en]=Database Development\nGenericName[af]=Databasisontwikkeling\nGenericName[ar]=\330\252\330\267\331\210\331\212\330\261 \331\202\331\210\330\247\330\271\330\257 \330\247\331\204\330\250\331\212\330\247\331\206\330\247\330\252\nGenericName[as]=\340\246\241\340\246\276\340\246\237\340\246\276\340\246\254\340\247\207\340\246\233 \340\246\254\340\246\277\340\246\225\340\246\276\340\246\266\nGenericName[ast]=Desendolcu de bases de datos\nGenericName[be_BY]=\320\221\320\260\320\267\320\260 \320\264\320\260\320\275\321\213\321\205\nGenericName[bg]=\320\240\320\260\320\267\321\200\320\260\320\261\320\276\321\202\320\262\320\260\320\275\320\265 \320\275\320\260 \320\261\320\260\320\267\320\270 \320\276\321\202 \320\264\320\260\320\275\320\275\320\270\nGenericName[bn]=\340\246\241\340\246\276\340\246\237\340\246\276\340\246\254\340\247\207\340\246\270 \340\246\241\340\247\207\340\246\255\340\247\207\340\246\262\340\246\252\340\246\256\340\247\207\340\246\250\340\247\215\340\246\237\nGenericName[bo]=\340\275\202\340\275\236\340\275\262\340\274\213\340\275\202\340\276\262\340\275\204\340\275\246\340\274\213\340\275\230\340\275\233\340\275\274\340\275\221\340\274\213\340\275\200\340\276\261\340\275\262\340\274\213\340\275\202\340\275\246\340\275\242\340\274\213\340\275\246\340\276\244\340\275\272\340\275\243\340\274\215\nGenericName[br]=Diorren ar stlennvank\nGenericName[bs]=Razvoj baza podataka\nGenericName[ca]=Desenvolupament de bases de dades\nGenericName[ca_XV]=Desenvolupament de bases de dades\nGenericName[cs]=V\303\275voj datab\303\241ze\nGenericName[cy]=Datblygu Cronfa Ddata\n"..., 4096) = 4096
22042 read(3, "GenericName[om]=Uuminsa Kuusaa Deetaa\nGenericName[or]=\340\254\244\340\254\245\340\255\215\340\255\237\340\254\276\340\254\247\340\254\276\340\254\260 \340\254\254\340\254\277\340\254\225\340\254\276\340\254\266\nGenericName[pa_IN]=\340\250\241\340\250\276\340\250\237\340\250\276\340\250\254\340\251\207\340\250\270 \340\250\241\340\250\277\340\250\265\340\251\210\340\250\262\340\250\256\340\251\210\340\250\202\340\250\237\nGenericName[pl]=Opracowanie i rozw\303\263j bazy danych\nGenericName[pt]=Desenvolvimento da base de dados\nGenericName[pt_BR]=Desenvolvimento de banco de dados\nGenericName[ro]=Dezvoltare de baze de date\nGenericName[ru]=\320\221\320\260\320\267\320\260 \320\264\320\260\320\275\320\275\321\213\321\205\nGenericName[rw]=Gukora ububikoshingiro\nGenericName[sa_IN]=\340\244\241\340\244\276\340\244\237\340\244\276\340\244\254\340\245\207\340\244\270\340\245\215 \340\244\265\340\244\277\340\244\225\340\244\276\340\244\270\340\244\203 \nGenericName[sh]=Razvoj baza podataka\nGenericName[si]=\340\266\257\340\266\255\340\267\212\340\266\255\340\267\203\340\266\270\340\267\224\340\266\257\340\267\217\340\266\272 \340\267\203\340\266\202\340\267\200\340\266\273\340\267\212\340\266\260\340\266\261\340\266\272\nGenericName[sk]=V\303\275voj datab\303\241z\nGenericName[sl]=Razvoj zbirk podatkov\nGenericName[sq]=Kolonat e databaz\303\253s\nGenericName[sr]=\320\240\320\260\320\267\320\262\320\276\321\230 \320\261\320\260\320\267\320\260 \320\277\320\276\320\264\320\260\321\202\320\260\320\272\320\260\nGenericName[ss]=Databasisontwikkeling\nGenericName[st]=Databasisontwikkeling\nGenericName[sv]=Databasutveckling\nGenericName[ta]=\340\256\244\340\256\260\340\256\265\340\257\201\340\256\244\340\257\215\340\256\244\340\256\263 \340\256\211\340\256\260\340\257\201\340\256\265\340\256\276\340\256\225\340\257\215\340\256\225\340\256\256\340\257\215\nGenericName[te]=\340\260\241\340\260\276\340\260\237\340\260\276\340\260\254\340\261\207\340\260\270\340\261\215 \340\260\241\340\261\206\340\260\265\340\260\262\340\260\252\340\261\215\342\200\214\340\260\256\340\261\206\340\260\202\340\260\237\340\261\215\nGenericName[tn]=Databasisontwikkeling\nGenericName[tr]=Veritaban\304\261 Geli\305\237tirme\nGenericName[ts]=Databasisontwikkeling\nGenericName[ug]=\330\263\330\247\331\206\330\257\330\247\331\206 \330\246\331\211\330\254\330\247\330\257\331\211\331\212\331\211\330\252\331\211\nGenericName[uk]=\320\221\320\260\320\267\320\260 \320\264\320\260\320\275\320\270\321\205\nGenericName[uz]=Ma\312\274lumot bazasi\nGenericName[ve]=Databasisontwikkeling\nGenericName[vi]=Ph\303\241t tri\341\273\203n c\306\241 s\341\273\237 d\341\273\257 li\341\273\207u\nGenericName[xh]=Databasisontwikkeling\nGenericName[zh_CN]=\346\225\260\346\215\256\345\272\223\345\274\200\345\217\221\nGenericName[zh_TW]=\350\263\207\346\226\231\345\272\253\351\226\213\347\231\274\nGenericName[zu]=Databasisontwikkeling\nComment=Manage databases, create queries and reports to track and manage your information by using Base.\nComment[en]=Manage databases, create queries and reports to track and manage your information by using Base.\nComment[af]=Bestuur databasisse, skep navrae en verslae om u inligting na te speur en te bestuur, met Base.\nComment[arnComment[as]=\340\246\241\340\246\276\340\246\237\340\246\276\340\246\254\340\247\207\340\246\233\340\246\254\340\247\213\340\247\260 \340\246\252\340\247\260\340\246"..., 4096) = 4096
22042 read(3, "tionar informaci\303\263 amb el Base.\nComment[ca_XV]=Gestioneu bases de dades i creeu consultes i informes per fer el seguiment i gestionar informaci\303\263 amb el Base.\nComment[cs]=Spravujte datab\303\241ze, vytv\303\241\305\231ejte dotazy a sestavy pro sledov\303\241n\303\255 a \305\231\303\255zen\303\255 va\305\241ich informac\303\255 pomoc\303\255 Base.\nComment[cy]=Rheoli cronfeydd data, creu ymholiadau ac adroddiadau i ddilyn a rheoli eich gwybodaeth drwy ddefnyddio Base.\nComment[da]=Administrer databaser, opret foresp\303\270rgsler og rapporter til at spore og administrere dine informationer ved at bruge Base.\nComment[de]=Verwalten von Datenbanken, Erstellen von Abfragen und Berichten - Base macht's m\303\266glich.\nComment[dgonComment[dznComment[el]=\316\224\316\271\316\261\317\207\316\265\316\257\317\201\316\271\317\203\316\267 \316\262\316\254\317\203\316\265\317\211\316\275 \316\264\316\265\316\264\316\277\316\274\316\255\316\275\317\211\316\275, \316\264\316\267\316\274\316\271\316\277\317\205\317\201\316\263\316\257\316\261 \316\265\317\201\317\211\317\204\316\267\316\274\316\254\317\204\317\211\316\275 \316\272\316\261\316\271 \316\261\316\275\316\261\317\206\316\277\317\201\317\216\316\275 \316\272\316\261\316\271 \316\264\316\271\316\261\317\207\316\265\316\257\317\201\316\271\317\203\316\267 \317\200\316\273\316\267\317\201\316\277\317\206\316\277\317\201\316\271\317\216\316\275 \316\274\316\265 \317\204\316\267 \317\207\317\201\316\256\317\203\316\267 \317\204\316\267\317\202 Base.\nComment[en_GB]=Manage databases, create queries and reports to track and manage your information using Base.\nComment[en_ZA]=Manage databases, create queries and reports to track and manage your information by using Base.\nComment[eo]=Administri datumbazojn, krei informpetojn kaj raportojn por kontroli kaj administri viajn informojn per Base.\nComment[es]=Administrar bases de datos, crear consultas e informes para controlar y editar informac"..., 4096) = 4096
22042 read(3, "ata, membuat kuiri, dan laporan untuk melacak dan mengelola informasi menggunakan Base.\nComment[is]=Me\303\260h\303\266ndla gagnagrunna, b\303\272a til fyrirspurnir og sk\303\275rslur til a\303\260 hafa stj\303\263rn \303\241 uppl\303\275singafl\303\246\303\260i me\303\260 Base.\nComment[it]=Usando Base, potete gestire i database e creare interrogazioni e rapporti per controllare e organizzare le vostre informazioni.\nComment[ja]=Base \343\202\222\344\275\277\347\224\250\343\201\231\343\202\213\343\201\223\343\201\250\343\201\247\343\200\201\343\203\207\343\203\274\343\202\277\343\203\231\343\203\274\343\202\271\343\202\222\347\256\241\347\220\206\343\201\227\343\200\201\343\202\257\343\202\250\343\203\252\343\203\274\343\201\250\343\203\254\343\203\235\343\203\274\343\203\210\343\202\222\344\275\234\346\210\220\343\201\227\343\201\246\343\200\201\346\203\205\345\240\261\343\202\222\350\277\275\350\267\241\343\201\212\343\202\210\343\201\263\347\256\241\347\220\206\343\201\227\343\201\276\343\201\231\343\200\202\nComment[kaase-\341\203\230\341\203\241 \341\203\222\341\203\220\341\203\233\341\203\235\341\203\247\341\203\224\341\203\234\341\203\224\341\203\221\341\203\230\341\203\227.\nComment[kk]=Base \320\272\323\251\320\274\320\265\320\263i\320\274\320\265\320\275 \320\264\320\265\321\200\320\265\320\272\321\202\320\265\321\200 \322\233\320\276\321\200\321\213\320\275 \320\261\320\260\321\201\322\233\320\260\321\200\321\203, \321\201\322\261\321\200\320\260\320\275\321\213\321\201\321\202\320\260\321\200\320\264\321\213 \320\266\323\231\320\275\320\265 \320\265\321\201\320\265\320\277\321\202\320\265\321\200\320\264i \320\266\320\260\321\201\320\260\321\203 \321\201i\320\267\320\264i\322\243 \320\260\322\233\320\277\320\260\321\200\320\260\321\202\321\202\320\260\321\200\321\213\322\243\321\213\320\267\320\264\320\260\321\200\320\264\321\213 \322\233\320\260\320\264\320\260\322\223\320\260\320\273\320\260\321\203 \320\266\323\231\320\275\320\265 \320\261\320\260\321\201\322\233\320\260\321\200\321\203 \322\257\321\210i\320\275. \nComment[kmase\302\240\341\237\224\nComment[knnComment[ko]=Base\353\245\274 \354\202\254\354\232\251\355\225\230\354\227\254 \353\215\260\354\235\264\355\204\260\353\262\240\354\235\264\354\212\244\353\245\274 \352\264\200\353\246\254\355\225\230\352\263\240, \354\266\224\354\240\201\355\225\240 \354\277\274\353\246\254\354\231\200 \353\263\264\352\263\240\354\204\234\353\245\274 \353\247\214\353\223\244\353\251\260, \354\240\225\353\263\264\353\245\274 \352\264\200\353\246\254\355\225\251\353\213\210\353\213\244.\nComment[kok
22042 readnComment[my]=\341\200\222\341\200\261\341\200\220\341\200\254\341\200\230\341\200\261\341\200\267\341\200\205\341\200\272\341\200\231\341\200\273\341\200\254\341\200\270\341\200\205\341\200\256\341\200\231\341\200\266\341\200\201\341\200\224\341\200\267\341\200\272\341\200\201\341\200\275\341\200\262\341\200\225\341\200\253\341\201\212 \341\200\200\341\200\275\341\200\254\341\200\233\341\200\256\341\200\231\341\200\273\341\200\254\341\200\270\341\200\220\341\200\212\341\200\272\341\200\206\341\200\261\341\200\254\341\200\200\341\200\272\341\200\225\341\200\274\341\200\256\341\200\270 \341\200\241\341\200\205\341\200\256\341\200\233\341\200\204\341\200\272\341\200\201\341\200\266\341\200\205\341\200\254\341\200\231\341\200\273\341\200\254\341\200\270\341\200\200\341\200\255\341\200\257 \341\200\234\341\200\231\341\200\272\341\200\270\341\200\200\341\200\274\341\200\261\341\200\254\341\200\204\341\200\272\341\200\270\341\200\220\341\200\205\341\200\272\341\200\201\341\200\257\341\200\206\341\200\256\341\200\236\341\200\255\341\200\257\341\200\267 \341\200\225\341\200\261\341\200\270\341\200\225\341\200\255\341\200\257\341\200\267\341\200\225\341\200\253\341\201\213 \341\200\225\341\200\274\341\200\256\341\200\270\341\200\234\341\200\273\341\200\276\341\200\204\341\200\272 \341\200\222\341\200\261\341\200\220\341\200\254\341\200\230\341\200\261\341\200\267\341\200\205\341\200\272\341\200\200\341\200\255\341\200\257 \341\200\241\341\200\236\341\200\257\341\200\266\341\200\270\341\200\225\341\200\274\341\200\257\341\200\201\341\200\274\341\200\204\341\200\272\341\200\270\341\200\226\341\200\274\341\200\204\341\200\267\341\200\272 \341\200\236\341\200\204\341\200\272\341\201\217 \341\200\236\341\200\220\341\200\204\341\200\272\341\200\270\341\200\241\341\200\201\341\200\273\341\200\200\341\200\272\341\200\241\341\200\234\341\200\200\341\200\272\341\200\231\341\200\273\341\200\254\341\200\270\341\200\200\341\200\255\341\200\257 \341\200\205\341\200\256\341\200\231\341\200\266\341\200\201\341\200\224\341\200\267\341\200\272\341\200\201\341\200\275\341\200\262\341\200\225\341\200\253\341\201\213 \nComment[nb]=H\303\245ndter databaser, lag sp\303\270rringer og rapporter og h\303\245ndter informasjon ved hjelp av Base.\nComment[nenComment[nl]=Met Base kunt u databases beheren, query's en rapporten maken om uw gegevens te controleren en beheren.\nComment[nn]=Med Base kan du handtera databasar, laga sp\303\270rjingar og rapportar for sporing og handtering av informasjon.\nComment[nr]=Bestuur databasisse, skep navrae en verslae om u inligting na te speur en te bestuur, met Base.\nComment[nso]=Bestuur databasisse, skep navrae en verslae om u inligting na te speur en te bestuur, met Base.\nComment[oc]=Base - Gestion de bancas de donadas, creacion de requ\303\250stas e rap\303\262rts.\nComment[om]=Base fayyadamuun kuusaa deetaa taligi, gaafataa fi gabaasota odeeffannoo kee hordofuu fi taliguuf oolan uumi.\nComment[or]= \340\254\206\340\254\247\340\254\276\340\254\260 \340\254\211\340\254\252\340\255\237\340\255\213\340\254\227 \340\254\225\340\254\260\340\254\277 \340\254\244\340\254\245\340\255\215\340\254\257 \340\254\270\340\254\236\340\255\215\340\254\232\340\254\257\340\254\227\340\255\201\340\254\241\340\254\277\340\254\225 \340\254\252\340\254\260\340\254\277\340\254\232\340\254\276\340\254\263\340\254\250\340\254\276 ,\340\254\252\340\255\215\340\254\260\340"..., 4096) = 4096
22042 read(3, "\210\330\261\331\275\331\210\331\206 \330\256\331\204\331\202\331\212\331\210 \333\275 \331\276\331\206\331\207\331\206\330\254\331\212 \331\205\330\271\331\204\331\210\331\205\330\247\330\252 \330\254\331\210 \330\250\331\206\330\257\331\210\330\250\330\263\330\252 \332\252\330\261\331\212\331\210\333\224 \nComment[sh]=Upravljajte bazama podataka, napravite upite i izve\305\241taje za pra\304\207enje podataka u programu Baza.\nComment[si]=BasenComment[sk]=Spravujte datab\303\241zy, vytv\303\241rajte dotazy a spr\303\241vy pre spr\303\241vu a anal\303\275zu va\305\241ich inform\303\241ci\303\255 s pou\305\276it\303\255m Base.\nComment[sl]=S programom Base upravljajte z zbirkami podatkov, ustvarjajte poizvedbe in poro\304\215ila za sledenje in upravljanje s podatki.\nComment[sq]=Menaxho bazat e sh\303\253nimeve, krijo pyet\303\253sor\303\253t dhe raportet p\303\253r t\303\253 p\303\253rcjellur dhe menaxhuar informacionet p\303\253rmes Base.\nComment[srnComment[ss]=Bestuur databasisse, skep navrae en verslae om u inligting na te speur en te bestuur, met Base.\nComment[st]=Bestuur databasisse, skep navrae en verslae om u inligting na te speur en te bestuur, met Base.\nComment[sv]=Hantera databaser, skapa s\303\266kningar och rapporter f\303\266r att sp\303\245ra och hantera information med hj\303\244lp av Base.\nComment[sw_TZ]=Manage databases, create queries and reports to track and manage your information by using Base.\nComment[tanComment[te
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/home/bitozoid/.local/share/applications/wine-extension-rtf.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=202, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0640, st_size=202, ...}) = 0
22042 read(3, "[Desktop Entry]\nType=Application\nName=wordpad\nMimeType=application/rtf;\nExec=env WINEPREFIX=\"/home/bitozoid/.wine\" wine start /ProgIDOpen rtffile %f\nNoDisplay=true\nStartupNotify=true\nIcon=2EF4_wordpad.0\n", 4096) = 202
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/transmission-gtk.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=12978, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=12978, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Transmission\nName[an]=Transmission\nName[ar]=\330\252\330\261\330\247\331\206\330\262\331\205\331\212\330\264\331\206\nName[ast]=Transmission\nName[be]=Transmission\nName[be@latin]=Transmisija\nName[bg]=BitTorrent \320\272\320\273\320\270\320\265\320\275\321\202 (Transmission)\nName[bn]=\340\246\237\340\247\215\340\246\260\340\246\276\340\246\250\340\247\215\340\246\270\340\246\256\340\246\277\340\246\266\340\246\250\nName[ca]=Transmission\nName[ca@valencia]=Transmission\nName[ckb]=Transmission\nName[cs]=Transmission\nName[da]=Transmission\nName[de]=Transmission\nName[el]=Transmission\nName[en_AU]=Transmission\nName[en_CA]=Transmission\nName[en_GB]=Transmission\nName[eo]=Transmission\nName[es]=Transmission\nName[et]=Transmission\nName[eu]=Transmission\nName[fi]=Transmission\nName[fil]=Transmission\nName[fo]=Transmission\nName[fr]=Transmission\nName[gl]=Transmission\nName[he]=Transmission\nName[hi]=\340\244\237\340\245\215\340\244\260\340\244\276\340\244\202\340\244\270\340\244\256\340\244\277\340\244\266\340\244\250\nName[hr]=Transmission\nName[hu]=Transmission\nName[id]=Transmission\nName[is]=Torrent flutningur\nName[it]=Transmission\nName[ja]=Transmission\nName[kk]=Transmission\nName[ko]=\355\212\270\353\236\234\354\212\244\353\257\270\354\205\230\nName[ku]=Transmission\nName[li]=Transmission\nName[lt]=Transmission\nName[lv]=Transmission\nName[mk]=Transmission\nName[ms]=Transmission\nName[nb]=Transmission\nName[nl]=Transmission\nName[nn]=Transmission\nName[oc]=Transmission\nName[pl]=Transmission\nName[pt]=Transmission\nName[pt_BR]=Transmission\nName[ro]=Transmission\nName[ru]=Transmission\nName[si]=\340\266\247\340\267\212\342\200\215\340\266\273\340\267\217\340\266\261\340\267\212\340\267\203\340\267\212\340\266\270\340\267\222\340\267\202\340\266\261\340\267\212\nName[sk]=Transmission\nName[sl]=Transmission\nName[sq]=Transmission\nName[sr]=\320\242\321\200\320\260\320\275\321\201\320\274\320\270\321\201\320\270\321\230\320\260\nName[sv]=Transmission\nName[te]=\340\260\237\340\261\215\340\260\260\340\260\276\340\260\250\340\261\215\340\260\270\340\261\215\342\200\215\340\260\256\340\260\277\340\260\267\340\260\250\340\261\215\nName[th]=Transmission\nName[tr]=Transmission\nName[ug]=Transmission\nName[uk]=Transmission\nName[vi]=Transmission\nName[zh_CN]=Transmission\nName[zh_TW]=Transmission\nGenericName=BitTorrent Client\nGenericName[ar]=\330\271\331\205\331\212\331\204 \302\253\330\250\330\252 \330\252\331\210\330\261\331\206\330\252\302\273\nGenericName[ast]=Veceru de BitTorrent\nGenericName[be]=\320\232\320\273\321\226\320\265\320\275\321\202 BitTorrent\nGenericName[be@latin]=Klijent BitTorrent\nGenericName[bg]=BitTorrent \320\272\320\273\320\270\320\265\320\275\321\202\nGenericName[bn]=\340\246\254\340\246\277\340\246\237\340\246\237\340\246\260\340\247\207\340\246\250\340\247\215\340\246\237 \340\246\225\340\247\215\340\246\262\340\246\276\340\247\237\340\247\207\340\246\250\340\247\215\340\246\237\nGenericName[br]=Arval BitTorrent\nGenericName[ca]=Client de BitTorrent\nGenericName[ca@valencia"..., 4096) = 4096
22042 read(3, "e[vi]=Tr\303\254nh kh\303\241ch BitTorrent\nGenericName[zh_CN]=BitTorrent \345\256\242\346\210\267\347\253\257\nGenericName[zh_TW]=BitTorrent \347\224\250\346\210\266\347\253\257\nX-GNOME-FullName=Transmission BitTorrent Client\nX-GNOME-FullName[ar]=\330\252\330\261\330\247\331\206\330\262\331\205\331\212\330\264\331\206\330\214 \330\271\331\205\331\212\331\204 \302\253\330\250\330\252 \330\252\331\210\330\261\331\206\330\252\302\273\nX-GNOME-FullName[ast]=Cliente BitTorrent Transmission\nX-GNOME-FullName[be]=BitTorrent-\320\272\320\273\321\226\320\265\320\275\321\202 Transmission\nX-GNOME-FullName[be@latin]=Transmisija, klijent BitTorrent\nX-GNOME-FullName[bg]=BitTorrent \320\272\320\273\320\270\320\265\320\275\321\202 (Transmission)\nX-GNOME-FullName[bn]=\340\246\237\340\247\215\340\246\260\340\246\276\340\246\250\340\247\215\340\246\270\340\246\256\340\246\277\340\246\266\340\246\250 BitTorrent \340\246\225\340\247\215\340\246\262\340\246\276\340\247\237\340\247\207\340\246\250\340\247\215\340\246\237\nX-GNOME-FullName[br]=Arval BitTorrent Transmission\nX-GNOME-FullName[ca]=Client de BitTorrent Transmission\nX-GNOME-FullName[ca@valencia]=Client de BitTorrent Transmission\nX-GNOME-FullName[cs]=BitTorrent klient Transmission\nX-GNOME-FullName[da]=Transmission BitTorrent-klient\nX-GNOME-FullName[de]=Transmission BitTorrent-Programm\nX-GNOME-FullName[el]=Transmission \317\200\316\265\316\273\316\254\317\204\316\267\317\202 BitTorrent\nX-GNOME-FullName[en_AU]=Transmission BitTorrent Client\nX-GNOME-FullName[en_CA]=Transmission BitTorrent Client\nX-GNOME-FullName[en_GB]=Transmission BitTorrent Client\nX-GNOME-FullName[eo]=Transmission BitTorrent-Kliento\nX-GNOME-FullName[es]=Cliente de BitTorrent Transmission\nX-GNOME-FullName[et]=Transmission, BitTorrenti klient\nX-GNOME-FullName[eu]=Transmission BitTorrent bezeroa\nX-GNOME-FullName[fi]=Transmission \342\200\223 BitTorrent-sovellus\nX-GNOME-FullName[fo]=Transmission BitTorrent-vi\303\260skiftari\nX-GNOME-FullName[fr]=Client BitTorrent Transmission\nX-GNOME-FullName[gl]=Cliente de BitTorrent Transmission\nX-GNOME-FullName[he]=Transmission - \327\252\327\225\327\233\327\240\327\252 \327\221\327\231\327\230\327\225\327\250\327\240\327\230\nX-GNOME-FullName[hi]=\340\244\237\340\245\215\340\244\260\340\244\276\340\244\202\340\244\270\340\244\256\340\244\277\340\244\266\340\244\250 \340\244\254\340\244\277\340\244\237-\340\244\237\340\245\213\340\244\260\340\245\207\340\244\202\340\244\237 \340\244\227\340\245\215\340\244\260\340\244\276\340\244\271\340\244\225\nX-GNOME-FullName[hr]=Transmission BitTorrent klijent\nX-GNOME-FullName[hu]=Transmission Bittorrent kliens\nX-GNOME-FullName[is]=Torrent flutningur\nX-GNOME-FullName[it]=Client BitTorrent Transmission\nX-GNOME-FullName[ja]=Transmission BitTorrent \343\202\257\343\203\251\343\202\244\343\202\242\343\203\263\343\203\210\nX-GNOME-FullName[kk]=Transmission BitTorrent \322\233\320\276\320\273\320\264\320\260\320\275\320\261\320\260\321\201\321\213\nX-GNOME-Ful"..., 4096) = 4096
22042 read(3, "Torrent\nComment[be]=\320\227\320\260\320\277\320\260\320\274\320\277\320\276\321\236\320\272\320\260 \321\226 \320\260\320\261\320\274\320\265\320\275 \321\204\320\260\320\271\320\273\320\260\320\274\321\226 \321\236 \321\201\320\265\321\202\320\272\321\226 BitTorrent\nComment[be@latin]=\305\232ciahvaj i rassy\305\202aj faj\305\202y praz BitTorrent\nComment[bg]=\320\230\320\267\321\202\320\265\320\263\320\273\321\217\320\275\320\265 \320\270 \321\201\320\277\320\276\320\264\320\265\320\273\321\217\320\275\320\265 \320\275\320\260 \321\204\320\260\320\271\320\273\320\276\320\262\320\265 \321\207\321\200\320\265\320\267 BitTorrent\nComment[bn]=\340\246\270\340\246\256\340\246\270\340\247\215\340\246\244 BitTorrent \340\246\217 \340\246\253\340\246\276\340\246\207\340\246\262 \340\246\241\340\246\276\340\246\211\340\246\250\340\246\262\340\247\213\340\246\241 \340\246\217\340\246\254\340\246\202 \340\246\205\340\246\202\340\246\266\340\246\227\340\247\215\340\246\260\340\246\271\340\246\250 \340\246\225\340\246\260\340\247\201\340\246\250\nComment[ca]=Baixeu i compartiu fitxers mitjan\303\247ant el BitTorrent\nComment[ca@valencia]=Baixeu i compartiu fitxers mitjan\303\247ant el BitTorrent\nComment[cs]=Stahovat a sd\303\255let soubory p\305\231es BitTorrent\nComment[da]=Download og del filer via BitTorrent\nComment[de]=Dateien \303\274ber BitTorrent herunterladen und verteilen\nComment[el]=\316\233\316\256\317\210\316\267 \316\272\316\261\316\271 \316\264\316\271\316\261\316\274\316\277\316\271\317\201\316\261\317\203\316\274\317\214\317\202 \317\204\317\211\316\275 \316\261\317\201\317\207\316\265\316\257\317\211\316\275 \316\274\316\255\317\203\317\211 \317\204\316\277\317\205 BitTorrent\nComment[en_AU]=Download and share files over BitTorrent\nComment[en_CA]=Download and share files over BitTorrent\nComment[en_GB]=Download and share files over BitTorrent\nComment[eo]=El\305\235uti kaj kunhavigi dosierojn per BitTorrent\nComment[es]=Descargue y comparta archivos mediante BitTorrent\nComment[et]=Laadi alla ja levita faile BitTorrenti kaudu\nComment[eu]=Deskargatu eta partekatu fitxategiak BitTorrent bidez\nComment[fi]=Lataa ja jaa tiedostoja BitTorrentin avulla\nComment[fo]=Tak ni\303\260ur og deil f\303\255lur yvir BitTorrent\nComment[fr]=T\303\251l\303\251chargement et partage des fichiers via BitTorrent\nComment[gl]=Descargue e comparta ficheiros a trav\303\251s da rede BitTorrent\nComment[he]=\327\224\327\225\327\250\327\223\327\224 \327\225\327\251\327\231\327\252\327\225\327\243 \327\247\327\221\327\246\327\231\327\235 \327\221\327\250\327\251\327\252 \327\221\327\231\327\230\327\225\327\250\327\240\327\230\nComment[hi]=\340\244\254\340\244\277\340\244\237-\340\244\237\340\245\213\340\244\260\340\245\207\340\244\202\340\244\237 \340\244\252\340\244\260 \340\244\270\340\244\202\340\244\232\340\244\277\340\244\225\340\244\276 \340\244\225\340\245\213 \340\244\241\340\244\276\340\244\211\340\244\250\340\244\262\340\245\213\340\244\241 \340\244\244\340\244\245\340\244\276 \340\244\270\340\244\276\340\244\235\340\244\276 \340\244\225\340\244\260\340\245\207\340\244\202\nComment[hr]=Preuzimajte i dijelite datoteke preko BitTorrenta\nComment[hu]=F\303\241jlok let\303\266lt\303\251se \303\251s megoszt\303\241sa BitTorrenten kereszt\303\274l\nComment[id]=Unduh dan berbagi berkas melalui BitTorrent\nComment[is]=S\303\246kja og deila skr\303\241m me\303\260 BitTorrent\nComment[it]=Scarica e condivide i file via BitTorrent\nComment[ja]=BitTorrent\343\201\247\343\203\225\343\202\241\343\202\244\343\203\253\343\202\222\343\203\200\343\202\246\343\203\263\343\203\255\343\203\274\343\203\211\343\201\212\343\202\210\343\201\263\345\205\261\346\234\211\343\201\227\343\201\276\343\201\231\nComment[kk]=BitTo"..., 4096) = 4096
22042 read(3, "t\341\272\255p tin qua BitTorrent\nComment[zh_CN]=\351\200\232\350\277\207 BitTorrent \344\270\213\350\275\275\345\222\214\345\205\261\344\272\253\346\226\207\344\273\266\nComment[zh_TW]=\351\200\217\351\201\216 BitTorrent \345\215\224\345\256\232\344\276\206\344\270\213\350\274\211\345\222\214\345\210\206\344\272\253\346\252\224\346\241\210\nExec=transmission-gtk %U\nIcon=transmission\nTerminal=false\nTryExec=transmission-gtk\nType=Application\nStartupNotify=true\nMimeType=application/x-bittorrent;x-scheme-handler/magnet;\nCategories=Network;FileTransfer;P2P;GTK;\nX-Ubuntu-Gettext-Domain=transmission\nX-AppInstall-Keywords=torrent \nActions=Pause;Minimize;\n\n[Desktop Action Pause]\nName=Start Transmission with All Torrents Paused\nExec=transmission-gtk --paused\nOnlyShowIn=Unity;\n\n[Desktop Action Minimize]\nName=Start Transmission Minimized\nExec=transmission-gtk --minimized\nOnlyShowIn=Unity;\n", 4096) = 690
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/javaws.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=255, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=255, ...}) = 0
22042 read(3, "[Desktop Entry]\nVersion=1.0\nType=Application\nName=Java Web Start\nGenericName=Java Web Start\nComment=Start Java Web Start applications\nExec=javaws %u\nNoDisplay=true\nTerminal=false\nIcon=java-icon48\nMimeType=application/x-java-jnlp-file;\nCategories=Network;\n", 4096) = 255
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/thunderbird-bin.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=229, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=229, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Mozilla Thunderbird (bin)\nComment=Mail & News Reader\nExec=/usr/bin/thunderbird-bin\nIcon=thunderbird-bin-icon\nTerminal=false\nType=Application\nCategories=Office;Network;Email;\nMimeType=x-scheme-handler/mailto;\n", 4096) = 229
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/sage-sage.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=230, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=230, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=Sage Shell\nType=Application\nComment=Math software for algebra, geometry, number theory, cryptography and numerical computation\nExec=sage\nTryExec=sage\nIcon=sage\nCategories=Education;Science;Math;\nTerminal=true\n", 4096) = 230
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/fluid.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=189, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=189, ...}) = 0
22042 read(3, "[Desktop Entry]\nName=FLUID\nComment=FLTK GUI Designer\nTryExec=fluid\nExec=fluid %F\nIcon=fluid\nTerminal=false\nType=Application\nMimeType=application/x-fluid\nCategories=Development;GUIDesigner;\n", 4096) = 189
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/openoffice.org-qstart.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d18) = -1 ENOTTY (Inappropriate ioctl for device)
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=1154, ...}) = 0
22042 fcntl64(3, F_SETFD, FD_CLOEXEC)   = 0
22042 fstat64(3, {st_mode=S_IFREG|0644, st_size=1154, ...}) = 0
22042 read(3, "###############################################################\n#  \n#  Licensed to the Apache Software Foundation (ASF) under one\n#  or more contributor license agreements.  See the NOTICE file\n#  distributed with this work for additional information\n#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#  \n#    http://www.apache.org/licenses/LICENSE-2.0\n#  \n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n#  \n###############################################################\n[Desktop Entry]\nVersion=1.0\nTerminal=false\nType=Application\nCategories=Office;\nExec=ooffice -quickstart -nologo -nodefault\nNoDisplay=true\nName=OpenOffice.org 3.4.1 Quickstarter\nComment=Hook for quickstarter startup\n", 4096) = 1154
22042 read(3, "", 4096)                 = 0
22042 close(3)                          = 0
22042 open("/usr/share/applications/nautilus-browser.desktop", O_RDONLY|O_LARGEFILE) = 3
22042 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0xbff09d28) = -1 ENOTTY (Inappropriate ioctl for device)
22042 _llseek(3, 0, [0], SEEK_CUR)      = 0
